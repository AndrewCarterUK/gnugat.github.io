<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Lo誰c Chardonnet&#039;s blog</title>
    <subtitle>Talks about Symfony2, git and other developer stuff</subtitle>
    <link href="http://gnugat.github.io/feed/index.atom" rel="self" />
    <link href="http://gnugat.github.io/" />
        <id>http://gnugat.github.io/</id>
            <updated>2014-01-22T00:00:00+01:00</updated>
            <entry>
        <title>Carew, the static site generator</title>
                <id>http://gnugat.github.io/2014/01/01/carew-static-site-generator.html</id>
                <updated>2014-01-01T00:00:00+01:00</updated>
        <author>
            <name>Lo誰c Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/01/01/carew-static-site-generator.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Frameworks are a real help when building web applications which serve business
logic. But what about static websites?</p>
<p>Those only contain pages which could be directly written in HTML. The only
problem with this approach is that HTML isn't writter friendly compared to
Markdown.</p>
<p>Also, we could say that static websites like blogs do have some logic behind the
scenes:</p>
<ul><li>posts can have a state (is it published yet?)</li>
<li>posts can be tagged, in order to make them easier to find</li>
</ul><p>But still, a framework might be too much for this task.</p>
<p>Static site generators are a way to solve this problem:</p>
<ol><li>simply write your pages in markdown</li>
<li>launch a command to generate HTML from it</li>
</ol><p><a href="http://carew.github.io/">Carew</a> is one of them (among
  <a href="http://jekyllrb.com/">Jekyll</a>,
  <a href="http://hyde.github.io/">Hyde</a>,
  <a href="https://github.com/obensonne/poole">Poole</a>
  and <a href="https://github.com/spjwebster/lanyon">Lanyon</a>):
it is written in PHP, allows you to use the template engine
<a href="http://twig.sensiolabs.org/">Twig</a> in your markdown and it provides a theme
using <a href="http://getbootstrap.com/2.3.2/">Bootstrap</a>.</p>
<p>This blog post will focus on Carew, as
<a href="https://github.com/gnugat/gnugat.github.io">this very blog is written with it</a>.</p>
<h2 id="carew-and-github">Carew and Github<a href="#carew-and-github" class="anchor">#</a></h2>
<p>A common way to quickly publish static sites is to use
<a href="http://pages.github.com/">Github Pages</a> which works as follow:</p>
<ol><li>create a repository, the name should follow this format: <code>&lt;username&gt;.github.io</code></li>
<li>add, commit and push the content of the <code>web</code> directory directly at the
root of your repo</li>
<li>the site is now available at this address: <code>http://&lt;username&gt;.github.io</code></li>
</ol><p><a href="http://carew.github.io/cookbook/hosting.html">Learn more about hosting a website built with Carew on the official website</a>.</p>
<h2 id="creation">Creation<a href="#creation" class="anchor">#</a></h2>
<p>Creating your site using Carew is very simple, just follow these steps:</p>
<pre><code>$ php composer.phar create-project carew/boilerplate &lt;project&gt; -s dev
$ cd &lt;project&gt;
$ bin/carew build</code></pre>
<p>Examples pages (which sources are located in <code>pages</code> and <code>posts</code>) are converted
from markdown to HTML in the <code>web</code> directory.</p>
<h2 id="customization">Customization<a href="#customization" class="anchor">#</a></h2>
<p>Before writing any page or post, edit the configuration wich is located inside
the <code>config.yml</code> file.</p>
<p>Then edit the <code>pages/index.md</code> and <code>pages/about.md</code> pages with your own content.</p>
<p>Finally, remove the content of the <code>posts</code> folder and create your first blog
post using this command:</p>
<pre><code>$ bin/carew generate:post [--date='YYYY-MM-DD'] title</code></pre>
<p><a href="http://carew.github.io/cookbook/configuration.html">See the configuration documentation on the official website</a>.</p>
<h2 id="front-matters">Front matters<a href="#front-matters" class="anchor">#</a></h2>
<p>Each markdown file starts with a header:</p>
<pre><code>---
layout: post # no need for this line when writing a regular page
title: Will be used by `&lt;title&gt;&lt;/title&gt;` and `&lt;h1&gt;&lt;/h1&gt;`
tags:
    - first tag
    - carew
---</code></pre>
<p>Carew generates a page listing all existing tags. You can create a link to this
page with the following snippet:</p>
<pre><code>{{ link('tags', 'The page with all the tags') }}.</code></pre>
<p><a href="http://carew.github.io/documentation.html#front-matter">Learn more about Front matters on the official website</a>.</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Carew is really simple to use, in this article we've covered the minimum you
should know to create pages, blog posts and tags.</p>
<p>I hope you enjoyed this article and that it helped you a little.</p>
<p>If you want to learn more, for example to customize its behaviour or its theme,
please refer to <a href="http://carew.github.io/documentation.html">the official documentation</a>.</p>]]></content>
    </entry>
        <entry>
        <title>Technology scouting</title>
                <id>http://gnugat.github.io/2014/01/08/technology-scouting.html</id>
                <updated>2014-01-08T00:00:00+01:00</updated>
        <author>
            <name>Lo誰c Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/01/08/technology-scouting.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>As a curious person I'm constantly trying to learn new practices and to discover
tools which might help me, by collecting information via technology scouting and
then reading it.</p>
<p>In this article, I will present how to do so effectively.</p>
<h2 id="collecting-information">Collecting information<a href="#collecting-information" class="anchor">#</a></h2>
<p>Whenever you find an interesting link, send it to <a href="http://getpocket.com/">Pocket</a>
so you can read it later.</p>
<h3 id="blogs">Blogs<a href="#blogs" class="anchor">#</a></h3>
<p>To find interesting links subscribe to blog RSS feeds using
<a href="https://ifttt.com/">If This Then That</a>: it will send new entries directly to
pocket.</p>
<p>Here are some blogs I personnally follow (caution, they're not really sorted):</p>
<ul><li><a href="http://williamdurand.fr/">William Durand's blog</a></li>
<li><a href="http://www.mountaingoatsoftware.com/blog">Mountain Goat Software</a></li>
<li><a href="http://blog.karolsojko.com/">Karol S&oacute;jko's blog</a></li>
<li><a href="http://blog.8thlight.com/">8th light</a></li>
<li><a href="http://richardmiller.co.uk/">Richard Miller's blog</a></li>
<li><a href="http://verraes.net/#blog">Mathias Verraes's blog</a></li>
<li><a href="http://www.whitewashing.de/">Benjamin Eberlei's blog</a></li>
<li><a href="http://nedroid.com/">Nedroid</a></li>
<li><a href="https://igor.io/">Igor Wiedler's blog</a></li>
</ul><h3 id="twitter">Twitter<a href="#twitter" class="anchor">#</a></h3>
<p>You can also use <a href="https://twitter.com/">Twitter</a>:</p>
<ol><li>create a private list which will serve as a pool</li>
<li>add any author which might post interresting messages</li>
<li>after a week or so, add the author to a public list</li>
</ol><p>The lists only show messages (not retweets) and conversations between people
you follow. They also allow you to create categories.</p>
<p>If you want, you can have a look at
<a href="https://twitter.com/epiloic/lists/">my own public lists</a>.</p>
<h3 id="github">Github<a href="#github" class="anchor">#</a></h3>
<p>Last but not least, <a href="https://github.com/">Github</a> can also be a great source of
discoveries: by following someone which stars or watch a lot of projects you
will have them listed on your homepage.</p>
<p>Here's my advice: <a href="https://github.com/pborreli">Pascal Borreli</a> contributes to
many repositories, you should start to follow him.</p>
<h2 id="reading-it">Reading it<a href="#reading-it" class="anchor">#</a></h2>
<p>Collecting resources is a thing, getting it read is another one. Just like
<a href="http://verraes.net/2012/12/how-to-read-more-books/">Mathias Verraes advised it</a>,
you should get an e-reader: you can send the pages you gathered on Pocket and
then read them everywhere.</p>
<p>Pocket allows you to remove the articles you found not so interresting after
all, it also allows you to archive the good ones and to favorite the great ones.</p>
<p>Speaking of reading and e-readers, books are another good way of discovering new
things. Do not underestimate them. Here's a list of books I'd recommend:</p>
<ul><li><a href="http://git-scm.com/book">Pro Git</a></li>
<li>Clean Code, by Robert C. Martin</li>
<li>Agile Software Development, Principles, Patterns, and Practices, by Robert C. Martin</li>
</ul><h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>The point is: current tools won't last and there's a lot of practices you're
not aware of. If you want to improve yourself and keep up with other developers,
you have to try your best to discover new practices (which might be rather old
actually) and new trending tools.</p>
<p>I hope you found this article enjoyable and helpful.</p>]]></content>
    </entry>
        <entry>
        <title>Bootstrap the markdown files of your FOSS project</title>
                <id>http://gnugat.github.io/2014/01/15/bootstrap-markdown-files-of-your-FOSS-project.html</id>
                <updated>2014-01-15T00:00:00+01:00</updated>
        <author>
            <name>Lo誰c Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/01/15/bootstrap-markdown-files-of-your-FOSS-project.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>The one thing that will make developers use your Free or Open Source Software
(FOSS) project is its documentation. Without it, how can they know what it does,
or how to install it?</p>
<p>Last summer <a href="http://williamdurand.fr/2013/07/04/on-open-sourcing-libraries/">William Durand wrote an article about it</a>,
describing the minimum files your FOSS project should have, and what they should
contain.</p>
<p>After reading his article, maybe you did the same thing as me: you took your
courage with both hands and wrote thoroughly a decent documentation for the
project you were working on at the time.</p>
<p>Because it was tedious, you decided to copy those markdown files into your new
projects and adapt them.</p>
<p>But this too was tedious...</p>
<p>To solve this problem once for all I created <strong><a href="https://github.com/gnugat/fossil">fossil</a></strong>:
it will bootstrap the markdown files of your FOSS projects, and it will even
create an installer for you!</p>
<p>It generates the following files out of skeletons:</p>
<ul><li><code>CHANGELOG.md</code></li>
<li><code>CONTRIBUTING.md</code></li>
<li><code>LICENSE</code></li>
<li><code>README.md</code></li>
<li><code>VERSIONING.md</code></li>
<li><code>bin/installer.sh</code></li>
<li><code>doc</code> (or <code>Resources/doc</code> if the project is a bundle) directory:<ul><li><code>01-introduction.md</code></li>
<li><code>02-installation.md</code></li>
<li><code>03-usage.md</code></li>
<li><code>04-tests.md</code></li>
</ul></li>
</ul><p>The best thing about it: you can run it on your new FOSS projects as well as
with your existing ones! By default it does not replace existing files (if you
want to, simply use the <code>-f</code> option).</p>
<p><strong>Fossil</strong> supports different kind of projects: applications, libraries and
Symfony2 bundles. Here's a quick usage guide.</p>
<h2 id="applications">Applications<a href="#applications" class="anchor">#</a></h2>
<p>The <code>doc</code> command allows you to generate the markdown files of your
applications, which can be a web application or a CLI tool just like <strong>fossil</strong>.</p>
<p>As you can see in the following example, it only requires 2 arguments:</p>
<pre><code>fossil doc 'acme/application' 'The ACME company'</code></pre>
<h3 id="the-github-repository-argument">The <a href="https://github.com/">Github</a> repository argument<a href="#the-github-repository-argument" class="anchor">#</a></h3>
<p>Applications are installed by cloning the github repository, which makes it as
easy to update as to run <code>git pull</code>.</p>
<p>This argument is used in the installer script as well as in the installation
instructions.</p>
<p>You don't need to write the whole github URL, simply give the username and the
project name in the following format: <code>username/project-name</code></p>
<h3 id="the-license-author-argument">The license author argument<a href="#the-license-author-argument" class="anchor">#</a></h3>
<p>While the copyright's date can be computed, you need to provide the author's
name to generate the <code>LICENSE</code> file.</p>
<p>For now it only generates MIT licenses, but pull requests are welcomed :) .</p>
<h3 id="the-path-option">The path option<a href="#the-path-option" class="anchor">#</a></h3>
<p>By default the files are created in the current directory, but you can target a
specific path:</p>
<pre><code>fossil doc 'acme/application' 'The ACME company' -p '/tmp/application'</code></pre>
<h3 id="the-force-overwrite-option">The force overwrite option<a href="#the-force-overwrite-option" class="anchor">#</a></h3>
<p>As mentioned earlier, <strong>fossil</strong> won't replace existing files by default: for
instance if your project already has a <code>README.md</code> and a <code>LICENSE</code> file it will
only generate the other ones.</p>
<p>But if you want to throw them away, you can use this option:</p>
<pre><code>fossil doc 'acme/project' 'The ACME company' -f</code></pre>
<h2 id="libraries">Libraries<a href="#libraries" class="anchor">#</a></h2>
<p>The <code>doc:library</code> command has the exact same arguments and options as the <code>doc</code>
one:</p>
<pre><code>fossil doc:library 'acme/library' 'The ACME company'</code></pre>
<p>You can use the shortcut <code>d:l</code>:</p>
<pre><code>fossil d:l 'acme/library' 'The ACME company'</code></pre>
<p>The difference between an application and a library lies in its installation:
the library is installed using <a href="http://getcomposer.org/">composer</a>.</p>
<h3 id="the-composer-package-option">The composer package option<a href="#the-composer-package-option" class="anchor">#</a></h3>
<p>By default <strong>fossil</strong> assumes the composer package's name is the same as the
Github repository name (in the example it would be <code>acme/library</code>).
If it's not your case, use the following option:</p>
<pre><code>fossil d:l 'acme/library' 'The ACME company' -c 'acme/composer-package'</code></pre>
<h2 id="symfony2-bundles">Symfony2 Bundles<a href="#symfony2-bundles" class="anchor">#</a></h2>
<p>The <code>doc:bundle</code> command has almost the same arguments and options as the
<code>doc:library</code> one. It has an additional argument:</p>
<pre><code>fossil doc:bundle 'acme/demo-bundle' 'The ACME company' 'Acme\DemoBundle\AcmeDemoBundle'</code></pre>
<p>You can use the shortcut <code>d:b</code>:</p>
<pre><code>fossil d:b 'acme/demo-bundle' 'The ACME company' 'Acme\DemoBundle\AcmeDemoBundle'</code></pre>
<p>The difference between a library and a bundle is the documentation directory,
which is in <code>Resources/doc</code> instead of <code>doc</code>.</p>
<h3 id="the-fully-qualified-classname-argument">The fully qualified classname argument<a href="#the-fully-qualified-classname-argument" class="anchor">#</a></h3>
<p>Another difference is the installation: the bundle needs to be added in the
application's kernel.</p>
<p>This will be detailed in the documentation, but it will also be taken care of
by the installer.</p>
<p>That's right, you read it right: when developers will run the installer, not
only will it download the bundle using composer, but it will also add its fully
qualified classname in the <code>app/AppKernel.php</code> file! Hooray!</p>
<p>The application's kernel will look like this afterwards:</p>
<pre><code>&lt;?php
// File: app/AppKernel.php

use Symfony\Component\HttpKernel\Kernel;

class AppKernel extends Kernel
{
    public function registerBundles()
    {
        $bundles = array(
            // Other bundles...
            new Acme\DemoBundle\AcmeDemoBundle(),
        );

        if (in_array($this-&gt;getEnvironment(), array('dev', 'test'))) {
            // Other bundles...
        }

        return $bundles;
    }
}</code></pre>
<p><em>Note</em>: because of the backslashes you should escape this argument using
quotes, just like in the example.</p>
<h3 id="the-development-tool-option">The development tool option<a href="#the-development-tool-option" class="anchor">#</a></h3>
<p>By using this option, the bundle will be registered in the application only if
it runs in development or test environment:</p>
<pre><code>fossil d:b 'acme/demo-bundle' 'The ACME company' 'Acme\DemoBundle\AcmeDemoBundle' -d</code></pre>
<p>The application's kernel will look like this afterwards:</p>
<pre><code>&lt;?php
// File: app/AppKernel.php

use Symfony\Component\HttpKernel\Kernel;

class AppKernel extends Kernel
{
    public function registerBundles()
    {
        $bundles = array(
            // Other bundles...
        );

        if (in_array($this-&gt;getEnvironment(), array('dev', 'test'))) {
            // Other bundles...
            $bundles[] = new Acme\DemoBundle\AcmeDemoBundle();
        }

        return $bundles;
    }
}</code></pre>
<h2 id="you-still-need-to-write-the-documentation">You still need to write the documentation<a href="#you-still-need-to-write-the-documentation" class="anchor">#</a></h2>
<p>After running <strong>fossil</strong> you still need to provide some information (for
instance the elevator pitch in <code>README.md</code>) by editing those files:</p>
<ul><li><code>README.md</code></li>
<li><code>doc/01-introduction.md</code></li>
<li><code>doc/03-usage.md</code></li>
<li><code>doc/04-tests.md</code></li>
</ul><p>But is that enough? While I think <strong>fossil</strong> automates as much things as
possible, there's still some part of your project that needs specific
documentation.</p>
<p>For example you could add recipes which describe common tasks, or a glossary
defining technical or business terms used in your project.</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Bootstrap the markdown files of your new and your old FOSS projects using
<strong><a href="https://github.com/gnugat/fossil">fossil</a></strong>, and then complete the
documentation so everyone can see how awesome your work is!</p>
<p>Happy hacking!</p>]]></content>
    </entry>
        <entry>
        <title>Inversion of Control, Dependency Injection, Dependency Injection Container and Service Locator</title>
                <id>http://gnugat.github.io/2014/01/22/ioc-di-and-service-locator.html</id>
                <updated>2014-01-22T00:00:00+01:00</updated>
        <author>
            <name>Lo誰c Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/01/22/ioc-di-and-service-locator.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>If you don't want to read this article, just jump to the <a href="#conclusion">conclusion</a>
which sums it up in 44 words.</p>
<p>If you've never heard of those (or one of those), this article will teach you
what they are.</p>
<p>If you know what are those, but don't know what's the difference between them,
this article will teach you what it is.</p>
<p>If you know what are those and what's the difference between them... Well read
this article and tell me what you think about it on
<a href="https://twitter.com/epiloic">Twitter</a> ;) .</p>
<p>Those big names actually refer to simple design patterns and principles which
might help you in your projects. Maybe you've been using them without knowing it!</p>
<h2 id="inversion-of-control">Inversion of Control<a href="#inversion-of-control" class="anchor">#</a></h2>
<p>This principle is very abstract, as it is based on the way you use objects
rather than specifying how to write them.</p>
<p>To keep things short: IoC (Inversion of Control) is all about relationship
between higher level classes and detail classes. Higher level classes shouldn't
depend on detail classes, but rather the contrary.</p>
<p>In order to ensure this, higher level classes should depend on abstractions
(like interfaces) instead of depending on concrete classes. Also, you should
make sure that higher level classes own detail classes.</p>
<p>While I understand this principle, I cannot make a better explanation than this
which is really a shame. But I know a good article which can:
<a href="http://lostechies.com/derickbailey/2011/09/22/dependency-injection-is-not-the-same-as-the-dependency-inversion-principle/">Dependency Injection is NOT the same as the Dependency Inversion Principle, by Derick Bailey</a>.</p>
<p>I really encourage you to read it as it explains very well the problem IoC tries
to solve, with some good (and graphical) examples.</p>
<h2 id="dependency-injection">Dependency Injection<a href="#dependency-injection" class="anchor">#</a></h2>
<p>Let's explain each words:</p>
<ul><li>a dependency is an object used by your class</li>
<li>an injection is the fact of passing an argument to a function</li>
</ul><p>Some people instanciate those dependencies inside the class which use them, for
example:</p>
<pre><code>&lt;?php

namespace Gnugat\Fossil\MarkdownFile;

use Symfony\Component\Filesystem\Filesystem;

class DocumentationWriter
{
    public function write($absolutePathname, $content)
    {
        $filesystem = new Filesystem();
        if (!$filesystem-&gt;exists($absolutePathname)) {
            $filesystem-&gt;dumpFile($absolutePathname, $content);
        }
    }
}

$documentationWriter = new DocumentationWriter();
$documentationWriter-&gt;write('/tmp/example.txt', 'Hello world');</code></pre>
<p>There's nothing wrong with this code, but it could be improved.</p>
<p>First of all, it happens that <code>Filesystem</code> is "stateless": you can call every
methods it has, in the order you want, it won't change the way it behaves. Which
means you could create a single instance for your whole application: it would
save some precious memory.</p>
<p>Second of all, this class cannot be tested: if anything, you would be testing
<code>Filesystem</code> itself by checking if the file was written with the same name and
content.</p>
<p>DI (Dependency Injection) is used to solve these two problems: you should first
create the instance of <code>Filesystem</code> and then pass it to (inject it into)
<code>DocumentationWriter</code>:</p>
<pre><code>&lt;?php

namespace Gnugat\Fossil\MarkdownFile;

use Symfony\Component\Filesystem\Filesystem;

class DocumentationWriter
{
    public function write(Filesystem $filesystem, $absolutePathname, $content)
    {
        if (!$filesystem-&gt;exists($absolutePathname)) {
            $filesystem-&gt;dumpFile($absolutePathname, $content);
        }
    }
}

$filesystem = new Filesystem();

$documentationWriter = new DocumentationWriter();
$documentationWriter-&gt;write($filesystem, '/tmp/example.txt', 'Hello world');</code></pre>
<p>The dependency can now be shared throughout your application, and you can pass
a mock of it which will be able to tell you which method was called.</p>
<p>Injection is usually done via the constructor:</p>
<pre><code>&lt;?php

namespace Gnugat\Fossil\MarkdownFile;

use Symfony\Component\Filesystem\Filesystem;

class DocumentationWriter
{
    private $filesystem;

    public function __construct(Filesystem $filesystem)
    {
        $this-&gt;filesystem = $filesystem;
    }

    public function write($absolutePathname, $content)
    {
        if (!$this-&gt;filesystem-&gt;exists($absolutePathname)) {
            $this-&gt;filesystem-&gt;dumpFile($absolutePathname, $content);
        }
    }
}

$filesystem = new Filesystem();

$documentationWriter = new DocumentationWriter($filesystem);
$documentationWriter-&gt;write('/tmp/example.txt', 'Hello world');</code></pre>
<p>Time to time, injection will be done via setters:</p>
<pre><code>&lt;?php

namespace Gnugat\Fossil\MarkdownFile;

use Symfony\Component\Filesystem\Filesystem;

class DocumentationWriter
{
    private $filesystem;

    public function setFilesystem(Filesystem $filesystem)
    {
        $this-&gt;filesystem = $filesystem;
    }

    public function write($absolutePathname, $content)
    {
        if (!$this-&gt;filesystem-&gt;exists($absolutePathname)) {
            $this-&gt;filesystem-&gt;dumpFile($absolutePathname, $content);
        }
    }
}

$filesystem = new Filesystem();

$documentationWriter = new DocumentationWriter();
$documentationWriter-&gt;setFilesystem($filesystem);
$documentationWriter-&gt;write('/tmp/example.txt', 'Hello world');</code></pre>
<p>Setter injection is used when you have no control on the object construction,
and can be dangerous: if the setter isn't called, a runtime error will occur.</p>
<p>To help debug this kind of error, you can do this:</p>
<pre><code>&lt;?php

namespace Gnugat\Fossil\MarkdownFile;

use Symfony\Component\Filesystem\Filesystem;

class DocumentationWriter
{
    private $filesystem;

    public function setFilesystem(Filesystem $filesystem)
    {
        $this-&gt;filesystem = $filesystem;
    }

    public function write($absolutePathname, $content)
    {
        if (!$this-&gt;getFilesystem()-&gt;exists($absolutePathname)) {
            $this-&gt;getFilesystem()-&gt;dumpFile($absolutePathname, $content);
        }
    }

    private function getFilesystem()
    {
        if (!($this-&gt;filesystem instanceof Filesystem)) {
            $msg = 'The Filesystem dependency is missing.';
            $msg .= ' Did you forgot to call setFilesystem?';
            throw new \LogicException($msg);
        }

        return $this-&gt;filesystem;
    }
}

$documentationWriter = new DocumentationWriter();
// Will throw an exception with a helpful message.
$documentationWriter-&gt;write('/tmp/example.txt', 'Hello world');</code></pre>
<p>You shouldn't need to use setter injection in your own class, but rather on
classes which extend third party library.</p>
<p>For example Doctrine's repositories can only be retrieved using its
<code>EntityManager</code>, which mean you don't have the control on its construction. If
you need to pass dependencies to it, you'll have to use setter injection.</p>
<h3 id="dependency-injection-and-inversion-of-control">Dependency Injection and Inversion of Control<a href="#dependency-injection-and-inversion-of-control" class="anchor">#</a></h3>
<p>The subject of <a href="http://lostechies.com/derickbailey/2011/09/22/dependency-injection-is-not-the-same-as-the-dependency-inversion-principle/">the article previously quoted</a>
is the relation between DI and IoC: some people confuse them and think they're
the same by simply deducing that IoC is injecting interfaces instead of concrete
classes.</p>
<p>While combining them is possible, you should remember that IoC is first a matter
of higher level classes owning their detail classes. The principle (IoC) and the
design pattern (DI) are really different things.</p>
<h2 id="dependency-injection-container">Dependency Injection Container<a href="#dependency-injection-container" class="anchor">#</a></h2>
<p>The flaw of DI is the manual construction of all those objects: some classes
might have dependencies which themselves have dependencies. And even without
deep dependencies, manually creating a large number of classes is never
pleasant.</p>
<p>The biggest risk is to scatter object construction in the whole application and
losing track of it: if you don't know that an object has already been
constructing you might accidently construct it again.</p>
<p>Let's add a dependency on <a href="https://github.com/Seldaek/monolog">Monolog</a> to our
<code>DocumentationWriter</code> (plus some custom configuration to spice it up):</p>
<pre><code>&lt;?php

use Gnugat\Fossil\ApplicationLayer\OutputFormatter;
use Monolog\Logger;
use Symfony\Bridge\Monolog\Handler\ConsoleHandler;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;

$verbosityLevelMap = array(
    'OutputInterface::VERBOSITY_NORMAL' =&gt; Logger::NOTICE,
    'OutputInterface::VERBOSITY_VERBOSE' =&gt; Logger::INFO,
    'OutputInterface::VERBOSITY_VERY_VERBOSE' =&gt; Logger::DEBUG,
    'OutputInterface::VERBOSITY_DEBUG' =&gt; Logger::DEBUG,
);

$consoleOutput = new ConsoleOutput();
$outputFormatter = new OutputFormatter();
$consoleHandler = new ConsoleHandler(
    $consoleOutput,
    true,
    $verbosityLevelMap
);
$consoleHandler-&gt;setFormatter($outputFormatter);

$logger = new Logger('default.logger');
$logger-&gt;pushHandler($consoleHandler);

$filesystem = new Filesystem();

$documentationWritter = new DocumentationWriter(
    $filesystem,
    $logger
);
$documentationWriter-&gt;write('/tmp/example.txt', 'Hello world');</code></pre>
<p>It's quite a burden isn't it?</p>
<p>The DIC (Dependency Injection Container) solves this problem by taking the
responsibility of creating them for you. technically, you still write all of
these lines, but instead of putting them mixed with business logic code you put
it in a separate file.</p>
<p>DIC can be found in many languages:</p>
<ul><li>java, for example with <a href="http://docs.spring.io/spring/docs/2.5.6/reference/beans.html">Spring</a></li>
<li>PHP, for example with <a href="http://framework.zend.com/manual/2.0/en/modules/zend.di.introduction.html">Zend\Di</a></li>
<li>js, for example in <a href="http://angularjs.org/">AngularJs</a></li>
</ul><p>To better understand what is a DIC, we'll take a look at <a href="pimple.sensiolabs.org">Pimple</a>,
a small DIC for PHP using a javascript-like syntax.</p>
<p>Pimple can be considered as an array in which you can put parameters and
"factories": an anonymous function which creates an instance of the class.</p>
<p>Here's the code sample:</p>
<pre><code>&lt;?php

use Gnugat\Fossil\ApplicationLayer\OutputFormatter;
use Monolog\Logger;
use Symfony\Bridge\Monolog\Handler\ConsoleHandler;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;

$dic = new Pimple();

// This is a parameter definition
$dic['verbosity_level_map'] = array(
    'OutputInterface::VERBOSITY_NORMAL' =&gt; Logger::NOTICE,
    'OutputInterface::VERBOSITY_VERBOSE' =&gt; Logger::INFO,
    'OutputInterface::VERBOSITY_VERY_VERBOSE' =&gt; Logger::DEBUG,
    'OutputInterface::VERBOSITY_DEBUG' =&gt; Logger::DEBUG,
);

// Thess are a factory definition
$dic['console_output'] = $dic-&gt;share(function($dic) {
    return new ConsoleOutput();
});
$dic['output_formatter'] = $dic-&gt;share(function($dic) {
    return new OutputFormatter();
});

// You can inject dependencies which have been declared previously
$dic['console_handler'] = $dic-&gt;share(function($dic) {
    $consoleHandler = new ConsoleHandler(
        $dic['console_output'],
        true,
        $dic['verbosity_level_map']
    );
    $consoleHandler-&gt;setFormatter($dic['output_formatter']);

    return $consoleHandler
});

$dic['console_handler'] = $dic-&gt;share(function($dic) {
    $logger = new Logger('default.logger');
    $logger-&gt;pushHandler($dic['console_handler']);

    return $logger
});

$dic['filesystem'] = $dic-&gt;share(function($dic) {
    return new Filesystem();
});

$dic['documentation_writer'] = $dic-&gt;share(function($dic) {
    return new DocumentationWriter(
        $dic['console_output'],
        $dic['verbosity_level_map']
    );
});</code></pre>
<p>So, what's the big difference between this and the previous code sample? Well
now you centralized all your instances into a single container, the definition
of your object is done in a central place (you can move it into a file
<code>dic.php</code> for example) and the best of all: classes will be instanciated lazily,
which means as long as you don't aks for them they won't be created, and once
you created them they won't be created a second time.</p>
<p>In your application, you just need to pass the DIC and use it:</p>
<pre><code>&lt;?php

require_once __DIR__.'/dic.php';

// Now you can retrieve instances from the DIC
$documentationWriter = $dic['documentation_writer'];

$documentationWriter-&gt;write('/tmp/example.txt', 'Hello world');</code></pre>
<p>I must stress on the fact that object creation is now centralized: the code
from the first example (the one without DIC) could be scattered into different
places of your application.</p>
<h3 id="dependency-injection-container-and-ioc">Dependency Injection Container and IoC<a href="#dependency-injection-container-and-ioc" class="anchor">#</a></h3>
<p>Again, people often mixep up those two for the same reason they mix up DI and
IoC. There's a lot of <a href="https://github.com/rande/python-simple-ioc">DIC libraries which have been falsely called ioc</a>.</p>
<p>Please, don't make the same mistake.</p>
<h3 id="dependency-injection-container-and-singleton">Dependency Injection Container and Singleton<a href="#dependency-injection-container-and-singleton" class="anchor">#</a></h3>
<p>Singleton is a design pattern saying that a given object should only be
instanciated once and that it should be guarded from being instanciated a second
time.</p>
<p>Here's an implementation example of a singleton:</p>
<pre><code>&lt;?php

// Code from https://github.com/domnikl/DesignPatternsPHP/blob/master/Singleton/Singleton.php

class Singleton
{
    protected static $instance;

    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static;
        }

        return static::$instance;
    }

    private function __construct()
    {
        // is not allowed to call from outside: private!
    }
}</code></pre>
<p>While in our example the DIC makes sure our objects are constructed only once,
we can't call them singletons as nobody prevents you from creating them a second
time manually.</p>
<p>Keep in mind that DIC aren't always making sure of this: in our example we've
used <a href="https://github.com/fabpot/Pimple/blob/1.1/lib/Pimple.php#L116">the special share method</a>
of Pimple to ensure it, but you can also retrieve a new instance on every call:</p>
<pre><code>&lt;?php

use Symfony\Component\Finder\Finder;

$dic['finder'] = function($dic) {
    return new Finder();
});

$firstFinder = $dic['finder'];
$secondFinder = $dic['finder'];</code></pre>
<p>To recap: DI and DIC have nothing to do with Singleton.</p>
<h2 id="service-locator">Service Locator<a href="#service-locator" class="anchor">#</a></h2>
<p>The classes you put into the DIC can be called <code>Services</code>: they will execute
a task for you when you call them.</p>
<p>A Service Locator isn't just a container of services which gets them when you
ask it to: what we described is simply a DIC. To be a Service Locator, a DIC
must be injected as a dependency.</p>
<p>This might happen with classes which have many dependencies: instead of
injecting them one by one you can inject directly the DIC and let the class
retrieve the services it needs.</p>
<p>You should be warned that this is generally a bad idea: a class which requires
too many dependencies should be splitted into several smaller classes.</p>
<p>There is however some cases when Service Locator are usefull, for example
controllers are good candidates as their only responsibility is to pass input
to services and to return output.</p>
<p>To be more precise, Service Locator shouldn't be used in your business logic,
but rather in objects which serve as intermediate between two layers.</p>
<p>Here's a <a href="http://ralphschindler.com/2012/10/10/di-dic-service-locator-redux">good article about when to use Service Locators by Ralph Schindler</a>.</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Here's the TL;DR:</p>
<ul><li>IoC: higher level classes own detail classes (which are abstractions)</li>
<li>DI: pass as argument objects to the class which will use them</li>
<li>DIC: creates the dependencies and then injects them into the asked class</li>
<li>Service Locator: depending on the DIC instead of many dependencies</li>
</ul><p>If this article didn't teach you anything and made you angry, please
<a href="https://twitter.com/epiloic">tweet it to me</a>. If you learned some things, or
if this article made your day, feel free to do the same ;) .</p>
<h3 id="more-resources">More resources<a href="#more-resources" class="anchor">#</a></h3>
<p>If you want to read more about DI and DIC, here's good series by
Fabien Potencier's series on <a href="http://fabien.potencier.org/article/11/what-is-dependency-injection">what is Dependency Injection</a></p>]]></content>
    </entry>
    </feed>
