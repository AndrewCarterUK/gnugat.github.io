<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Loïc Chardonnet&#039;s blog</title>
    <subtitle>Talks about Symfony2, git and other developer stuff</subtitle>
    <link href="http://gnugat.github.io/feed/index.atom" rel="self" />
    <link href="http://gnugat.github.io/" />
        <id>http://gnugat.github.io/</id>
            <updated>2014-11-15T00:00:00+00:00</updated>
            <entry>
        <title>Symfony2 - Quick functional tests</title>
                <id>http://gnugat.github.io/2014/11/15/sf2-quick-functional-tests.html</id>
                <updated>2014-11-15T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/11/15/sf2-quick-functional-tests.html"/>
        <content type="html" xml:lang="en"><![CDATA[<blockquote>
<p><strong>TL;DR</strong>: Only check the status and exit code, don't use the given <code>TestCase</code>.</p>
</blockquote>
<p>Provided that your controllers and commands are thin and they rely on services
which are heavily unit tested, only checking the status and exit code in your
functional test should be entirely sufficient.</p>
<blockquote>
<p><strong>Note</strong>: Checking at least the status and exit code is recommended by
<a href="http://symfony.com/doc/current/best_practices/tests.html#functional-tests">Symfony's Official Best Practices</a>.</p>
</blockquote>
<p>In this article, we will see how easy and quick it is to write them.</p>
<h2 id="making-the-kernel-available">Making the Kernel available<a href="#making-the-kernel-available" class="anchor">#</a></h2>
<p>If you're familiar with <a href="http://symfony.com">Symfony2</a>, you might use one of
the given <code>KernelTestCase</code> to write your tests with <a href="http://phpunit.de">PHPUnit</a>.</p>
<p>The whole purpose of this file is to create an instance of the application's
Kernel, by guessing its localization. The problem with this approach is that it
ties you to the PHPUnit test framework. If you have a look at its code, you'll
also find it a bit complicated.</p>
<blockquote>
<p><strong>Note</strong>: <code>WebTestCase</code> also makes available a <a href="http://symfony.com/doc/current/book/testing.html#functional-tests">crawler</a>,
which we don't need as we only intend on checking the status code, not the body.</p>
</blockquote>
<p>Let's take an easier way: we will create a bootstrap file which requires the
kernel's file:</p>
<pre><code class="language-php">&lt;?php
// File: app/bootstrap.php

require __DIR__.'/bootstrap.php.cache';
require __DIR__.'/AppKernel.php';</code></pre>
<p>Now all you need to do for your tests is to use this file. For example with
PHPUnit:</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!-- File: app/phpunit.xml.dist --&gt;
&lt;phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://schema.phpunit.de/4.3/phpunit.xsd"
    backupGlobals="false"
    colors="true"
    bootstrap="./bootstrap.php"
&gt;
    &lt;testsuites&gt;
        &lt;testsuite name="Test Suite"&gt;
            &lt;directory&gt;./src/AppBundle/Tests&lt;/directory&gt;
        &lt;/testsuite&gt;
    &lt;/testsuites&gt;
&lt;/phpunit&gt;</code></pre>
<h2 id="testing-commands">Testing commands<a href="#testing-commands" class="anchor">#</a></h2>
<p>Now let's say we're testing the famous <a href="https://github.com/sensiolabs/SensioDistributionBundle/tree/master/Resources/skeleton/acme-demo-bundle/Acme/DemoBundle">AcmeDemoBundle</a>,
and its <a href="https://github.com/sensiolabs/SensioDistributionBundle/blob/master/Resources/skeleton/acme-demo-bundle/Acme/DemoBundle/Command/HelloWorldCommand.php">hello world command</a>:</p>
<pre><code class="language-php">&lt;?php

namespace Acme\DemoBundle\Tests\Command;

use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\Console\Output\NullOutput;
use Symfony\Component\Console\Input\ArrayInput;

class HelloWorldCommandTest extends \PHPUnit_Framework_TestCase
{
    private $app;
    private $output;

    protected function setUp()
    {
        $kernel = new \AppKernel('test', false);
        $this-&gt;app = new Application($kernel);
        $this-&gt;app-&gt;setAutoExit(false);
        $this-&gt;output = new NullOutput();
    }

    public function testItRunsSuccessfully()
    {
        $input = new ArrayInput(array(
            'commandName' =&gt; 'acme:hello',
            'name' =&gt; 'Igor',
        ));

        $exitCode = $this-&gt;app-&gt;run($input, $this-&gt;output);

        $this-&gt;assertSame(0, $exitCode);
    }
}</code></pre>
<p>As you can see our test is neatly structured in 3 parts: input definition, the
actual call and finally the check.</p>
<blockquote>
<p><strong>Note</strong>: the <code>setAutoExit</code> method will ensure that the application doesn't
call PHP's <code>exit</code>. The <code>NullOutput</code> ensures that nothing is displayed.</p>
</blockquote>
<h2 id="testing-controllers">Testing controllers<a href="#testing-controllers" class="anchor">#</a></h2>
<p>Once again let's test AcmeDemoBundle, this time the <a href="https://github.com/sensiolabs/SensioDistributionBundle/blob/master/Resources/skeleton/acme-demo-bundle/Acme/DemoBundle/Controller/DemoController.php">demo controller</a>:</p>
<pre><code class="language-php">&lt;?php

namespace Acme\DemoBundle\Tests\Controller;

use Symfony\Component\HttpFoundation\Request;

class DemoControllerTest extends \PHPUnit_Framework_TestCase
{
    private $app;

    protected function setUp()
    {
        $this-&gt;app = new \AppKernel('test', false);
        $this-&gt;app-&gt;boot();
    }

    public function testHomepage()
    {
        $request = new Request::create('/', 'GET');

        $response = $this-&gt;app-&gt;handle($request);

        $this-&gt;assertTrue($response-&gt;isSuccessful());
    }

    public function testItSaysHello()
    {
        $request = new Request('/hello/igor', 'GET');

        $response = $this-&gt;app-&gt;handle($request);

        $this-&gt;assertTrue($response-&gt;isSuccessful());
    }

    public function testItSendsEmail()
    {
        $request = new Request('/contact', 'POST', array(
            'email' =&gt; 'igor@example.com',
            'content' =&gt; 'Hello',
        ));

        $response = $this-&gt;app-&gt;handle($request);

        $this-&gt;assertTrue($response-&gt;isSuccessful());
    }
}</code></pre>
<blockquote>
<p><strong>Note</strong>: The <code>boot</code> method makes the container available.</p>
</blockquote>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>We stripped Symfony2 to its bare minimum and as a result we are now able to
write functional tests without any effort.</p>
<p>I hope you enjoyed this article, please feel free to
<a href="https://twitter.com/epiloic">tweet me</a> for any comment and question.</p>]]></content>
    </entry>
        <entry>
        <title>Redaktilo 1.3</title>
                <id>http://gnugat.github.io/2014/11/06/redaktilo-1-3.html</id>
                <updated>2014-11-06T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/11/06/redaktilo-1-3.html"/>
        <content type="html" xml:lang="en"><![CDATA[<blockquote>
<p><strong>TL;DR</strong>: <a href="https://github.com/gnugat/redaktilo">Redaktilo</a> is a library
which wraps array manipulation to make it feel like using a text editor.</p>
</blockquote>
<p><a href="../../../2014/05/09/redaktilo.html">Six months ago</a>, I talked about a
<a href="https://github.com/gnugat/redaktilo">silly library</a> I was working on.</p>
<p>I've just released it's version 1.3, so I figured that maybe it's time to talk
about it as the mature and usefull project it has become.</p>
<h2 id="statistics">Statistics<a href="#statistics" class="anchor">#</a></h2>
<p>First, here's some meaningless figures:</p>
<ul><li>fisrt commit: at 08:06:46, on the 24th thursday of April 2014</li>
<li>number of releases: 36 (including 11 stable ones)</li>
<li>number of contributors: 3 (<a href="http://loickpiera.com/">Loick Piera</a>, <a href="http://wouterj.nl/">WouterJ</a> and myself)</li>
<li>lines of code (according to <a href="https://insight.sensiolabs.com/projects/fbe2d89f-f64d-45c2-a680-bbafac4b0d08/analyses/36">Insight, for version 1.3.0</a>): 1 183</li>
</ul><h2 id="history">History<a href="#history" class="anchor">#</a></h2>
<p>In my two previous pet projects (GnugatWizardBundle and Fossil), as well as in
professional projects, I've encountered the need to manipulate lines (from a
file or a static string).</p>
<p>I've done 3 different implementations, each less reusable than the other, so I
started to think that there was something to do here.</p>
<p>That's how <a href="https://github.com/gnugat/redaktilo">Redaktilo</a> is born!</p>
<h2 id="public-api">Public API<a href="#public-api" class="anchor">#</a></h2>
<p>My purpose was to create a single service which would be used as a text editor
("redaktilo" means "editor", in esperanto):</p>
<pre><code class="language-php">&lt;?php

namespace Gnugat\Redaktilo;

class Editor
{
    // Filesystem operations:
    public function open($filename, $force = false);
    public function save(File $file);

    // Line selection
    public function jumpAbove(Text $text, $pattern, $location = null);
    public function jumpBelow(Text $text, $pattern, $location = null);

    // Line detection
    public function hasAbove(Text $text, $pattern, $location = null);
    public function hasBelow(Text $text, $pattern, $location = null);

    // Line manipulations
    public function insertAbove(Text $text, $addition, $location = null);
    public function insertBelow(Text $text, $addition, $location = null);
    public function replace(Text $text, $replacement, $location = null);
    public function replaceAll(Text $text, $pattern, $replacement);
    public function remove(Text $text, $location = null);

    // You can execute custom commands!
    public function run($name, array $input);
}</code></pre>
<p>This service is <strong>stateless</strong>, it manipulates the following model:</p>
<pre><code class="language-php">&lt;?php

namespace Gnugat\Redaktilo;

class Text
{
    public function getLines();
    public function setLines(array $lines);
    public function getLength();

    public function getLineBreak();
    public function setLineBreak($lineBreak);

    public function getCurrentLineNumber();
    public function setCurrentLineNumber($lineNumber);
    public function getLine($lineNumber = null);
    public function setLine($line, $lineNumber = null);
}</code></pre>
<blockquote>
<p><strong>Note</strong>: The <code>File</code> model extends <code>Text</code> and adds <code>filename</code> getter and
setter.</p>
</blockquote>
<p>As you can see, everything is centered around a current line, but specifying
directly a line number is possible (that's the meaning of the <code>$location</code>
argument).</p>
<h2 id="facade-and-extension-points">Facade and extension points<a href="#facade-and-extension-points" class="anchor">#</a></h2>
<p>To be honest, <code>Editor</code> doesn't do anything, it just wraps some low level
services. Amongst those, we have:</p>
<ul><li><code>SearchEngine</code>: decides which <code>SearchStrategy</code> will be used</li>
<li><code>CommandInvoker</code>: executes a <code>Command</code></li>
</ul><p>Those two are actually here to provide extension points: if you need to look for
a line with something else than a regular expression, you can create your own
<code>SearchStrategy</code>, register it in <code>SearchEngine</code> and it will be available
directly from the <code>Editor</code>!</p>
<p>If the manipulations provided out of the box aren't sufficient, you can create
your own <code>Command</code>, register it in <code>CommandInvoker</code> and it will be available
directly from the <code>Editor</code>!</p>
<p>Commands rely on user input, which is why Lo&iuml;ck worked on <code>InputSanitizer</code> to
validate it. If the ones provided aren't enough, you can still create your own
implementations.</p>
<p>Finally, I'd like to highlight Wouter's work on the <code>EditorFatory</code> helper: it is
really cumbersome to instantiate manually <code>Editor</code>... But thanks to this
factory, you'll never have to do it by yourself!</p>
<blockquote>
<p><strong>Note</strong>: Working on a <a href="http://symfony.com">Symfony2</a> project? You can use
<a href="https://github.com/gnugat/redaktilo-bundle">RedaktiloBundle</a>, which also
provides tags to register custom search strategies and commands.</p>
</blockquote>
<h2 id="what-s-next">What's next?<a href="#what-s-next" class="anchor">#</a></h2>
<p>Lo&iuml;ck is currently improving the library's exceptions for the version 1.4.</p>
<p>For version 1.5, two new methods will be added to <code>Text</code>:
<code>incrementCurrentLineNumber</code> and <code>decrementCurrentLineNumber</code>, to avoid the
following:</p>
<pre><code class="language-php">&lt;?php

require __DIR__.'/vendor/autoload.php';

use Gnugat\Redaktilo\EditorFactory;

$editor = EditorFactory::createEditor();
$file = $editor-&gt;open('/tmp/monty-python.txt');

// Currently
$currentLineNumber = $file-&gt;getCurrentLineNumber();
$file-&gt;setCurrentLineNumber($currentLineNumber + 2);

// Soon...
$file-&gt;incrementCurrentLineNumber(2);</code></pre>
<p>For the final version 1.6, a strong documentation of the deprecations will be
done, leading the way to version 2.0 where those will be removed (50% of the code
base will vanish!).</p>
<blockquote>
<p><strong>Note</strong>: As I'm using Redaktilo everyday, I might discover new improvements
to be done, leading the given version numbers above to change.</p>
</blockquote>
<h2 id="frequently-asked-questions">Frequently Asked Questions<a href="#frequently-asked-questions" class="anchor">#</a></h2>
<h3 id="is-it-a-gui-cli-tool">Is it a GUI / CLI tool?<a href="#is-it-a-gui-cli-tool" class="anchor">#</a></h3>
<p>A question I've been often asked, because describing Redaktilo as a text editor
might be a bit misleading. It is a library which <strong>feels like</strong> an editor, but
it is in no way an actual editor you might run.</p>
<p>Here's an example of what you might be doing currently without Redaktilo:</p>
<pre><code class="language-php">&lt;?php

$lines = file('/tmp/monty-python.txt');
$currentLineNumber = 42;
$section = array_slice($lines, 0, $current, true); // Lines from 0 to 42
$reversedSection = array_reverse($section, true);
$found = preg_grep('/a knewt/', $reversedSection); // finding the first occurence, above line 42
$currentLineNumber = key($found);

array_splice($lines, $currentLineNumber + 1, 0, 'new line below "a knewt"');
$content = implode("\n", $lines); // Let's hope it wasn't a file created on Windows.
file_put_contents($content, '/tmp/monty-python');</code></pre>
<p>With redaktilo:</p>
<pre><code class="language-php">&lt;?php

require __DIR__.'/vendor/autoload.php';

use Gnugat\Redaktilo\EditorFactory;

$editor = EditorFactory::createEditor();
$file = $editor-&gt;open('/tmp/monty-python');
$editor-&gt;jumpAbove($file, '/a knewt/', 42);
$editor-&gt;insertBelow($file, 'new line below "a knewt"');
$editor-&gt;save($file);</code></pre>
<h3 id="is-it-a-code-editor">Is it a code editor?<a href="#is-it-a-code-editor" class="anchor">#</a></h3>
<p>Because the code example on the README is about inserting a new line in the
<code>AppKernel</code> file of a Symfony2 application, I also get this question.</p>
<p>Redaktilo can edit any text file, so it includes source files. But keep in mind
that it only manipulates lines, when you might want to manipulate an AST to edit
code.</p>
<p>I'm working on a new silly project: <a href="https://github.com/gnugat/medio">Medio</a>.
It heavily relies on Redaktilo to actually edit code: so you can make a code
editor with it, but again before you start ask yourself if an AST wouldn't be
better.</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Redaktilo is a library which makes line manipulation dead easy! It provides
extension points and will soon reach version 2 which will mark its final
maturity point.</p>
<p>Until then, you can still use it safely, it's been stable for 11 releases now.</p>]]></content>
    </entry>
        <entry>
        <title>Symfony2 Bundle, standalone</title>
                <id>http://gnugat.github.io/2014/10/29/sf2-bundle-standalone.html</id>
                <updated>2014-10-29T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/10/29/sf2-bundle-standalone.html"/>
        <content type="html" xml:lang="en"><![CDATA[<blockquote>
<p><strong>TL;DR</strong>: Create an empty application in your bundle to allow people to test
it (manually or automatically) outside of an actual application.</p>
</blockquote>
<p><a href="http://symfony.com">Symfony2</a> bundles are a great way to:</p>
<ul><li>configure the application's Dependency Injection Container (DIC)</li>
<li>provide it with resources (mainly templates and assets)</li>
<li>register entry points (like controllers and commands)</li>
</ul><p>In this article, we will see how to make sure a third party bundle actually work
by creating an embed application. We will then have a look at its practical use:</p>
<ol><li><a href="#minimal-bundle">Minimal Bundle</a></li>
<li><a href="#embed-application">Embed Application</a></li>
<li><a href="#manual-tests">Manual tests</a>
<ul><li><a href="#running-commands">Running commands</a></li>
<li><a href="#browsing-pages">Browsing pages</a></li>
</ul></li>
<li><a href="#automated-tests">Automated tests</a>
<ul><li><a href="#container-tests">Container tests</a></li>
<li><a href="#functional-cli-tests">Functional CLI tests</a></li>
<li><a href="#functional-web-tests">Functional web tests</a></li>
</ul></li>
<li><a href="#conclusion">Conclusion</a></li>
</ol><h2 id="minimal-bundle">Minimal Bundle<a href="#minimal-bundle" class="anchor">#</a></h2>
<p>Creating a bundle is fairly easy as you just need to create the following class:</p>
<pre><code class="language-php">&lt;?php
// File: AcmeStandaloneBundle.php

namespace Acme\StandaloneBundle;

use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\HttpKernel\Bundle\Bundle;

class AcmeStandaloneBundle extends Bundle
{
}</code></pre>
<p>It also needs a <code>composer.json</code> file, so it can be distributed all around the
world:</p>
<pre><code class="language-json">{
    "name": "acme/standalone-bundle",
    "type": "symfony-bundle",
    "license": "MIT",
    "autoload": {
        "psr-4": {
            "Acme\\StandaloneBundle\\": ""
        }
    },
    "require": {
        "symfony/http-kernel": "~2.3"
    }
}</code></pre>
<blockquote>
<p><strong>Note</strong>: to release it, you would then need to create a git repository and
to register it in <a href="https://packagist.org/">Packagist</a>.</p>
</blockquote>
<h2 id="embed-application">Embed Application<a href="#embed-application" class="anchor">#</a></h2>
<p>Now how can we make sure our bundle would work in an application? We could:</p>
<ol><li>use an existing application</li>
<li>make the bundle's sources available in it somehow:
<ul><li>creating the bundle in the application</li>
<li>or making a symbolic link that points to the bundle</li>
</ul></li>
<li>register it in its <code>app/AppKernel.php</code> file and have a look...</li>
</ol><p>But we can do better!</p>
<p>We can create the smallest Symfony2 application ever <strong>inside</strong> our bundle:</p>
<pre><code class="language-php">&lt;?php
// File: Tests/app/AppKernel.php

use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Config\Loader\LoaderInterface;

class AppKernel extends Kernel
{
    public function registerBundles()
    {
        return array(
            new Symfony\Bundle\FrameworkBundle\FrameworkBundle(),
            new Acme\StandaloneBundle\AcmeStandaloneBundle(),
        );
    }

    public function registerContainerConfiguration(LoaderInterface $loader)
    {
        $loader-&gt;load(__DIR__.'/config.yml');
    }
}</code></pre>
<p><a href="https://github.com/symfony/FrameworkBundle">FrameworkBundle</a> requires the
following configuration parameter in order to work:</p>
<pre><code class="language-yaml"># File: Tests/app/config.yml
framework:
    secret: "Three can keep a secret, if two of them are dead."</code></pre>
<p>I'd also advise you to create an autoload file to make things easier:</p>
<pre><code class="language-php">&lt;?php
// File: Tests/app/autoload.php

$loader = require __DIR__.'/../../vendor/autoload.php';
require __DIR__.'/AppKernel.php';</code></pre>
<p>The last step is to add the new dependency in the <code>composer.json</code> file:</p>
<pre><code class="language-json">{
    "name": "acme/standalone-bundle",
    "type": "symfony-bundle",
    "license": "MIT",
    "autoload": {
        "psr-4": {
            "Acme\\StandaloneBundle\\": ""
        }
    },
    "require": {
        "symfony/http-kernel": "~2.3"
    },
    "require-dev": {
        "symfony/framework-bundle": "~2.3"
    }
}</code></pre>
<p>We would also need to ignore the following directories:</p>
<pre><code># File: .gitignore

/Tests/app/cache
/Tests/app/logs</code></pre>
<p>And that's it, we now have a minimalistic embed application in our bundle.
As it can now be ran on its own, it has become a <strong>Standalone Bundle</strong>!</p>
<p>Let's see the practical use.</p>
<h2 id="manual-tests">Manual tests<a href="#manual-tests" class="anchor">#</a></h2>
<p>Because your bundle now doesn't need any existing applications to be used,
people will be able to test it manually and do some demonstrations with it.</p>
<h3 id="running-commands">Running commands<a href="#running-commands" class="anchor">#</a></h3>
<p>Let's pretend we created a command in our bundle. We'd like to run it just to
make sure everything works as expected. For this we'll need to create an
embed console:</p>
<pre><code class="language-php">&lt;?php
// File: Tests/app/console.php

set_time_limit(0);

require_once __DIR__.'/autoload.php';

use Symfony\Bundle\FrameworkBundle\Console\Application;

$kernel = new AppKernel('dev', true);
$application = new Application($kernel);
$application-&gt;run();</code></pre>
<p>That's it! You can now run:</p>
<pre><code>php Tests/app/console.php</code></pre>
<h3 id="browsing-pages">Browsing pages<a href="#browsing-pages" class="anchor">#</a></h3>
<p>Let's pretend we created a controller which returns some JSON data. We'd like to
browse it just to make sure everyting works as expected. For this, we'll need to
create an embed web app:</p>
<pre><code class="language-php">&lt;?php
// File: Tests/app/web.php

use Symfony\Component\HttpFoundation\Request;

require_once __DIR__.'/autoload.php';

$kernel = new AppKernel('prod', false);
$request = Request::createFromGlobals();
$response = $kernel-&gt;handle($request);
$response-&gt;send();</code></pre>
<p>That's it! You can now run:</p>
<pre><code>php Tests/app/console.php server:run -d Tests/app</code></pre>
<p>And browse your application.</p>
<blockquote>
<p><strong>Note</strong>: If you use a templating engine like Twig to render HTML pages,
or if you use the Symfony2 Form Component in your bundle, don't forget to add
the dependencies to your <code>composer.json</code> file and to register the appropriate
bundles to the embed <code>AppKernel</code>.</p>
</blockquote>
<h2 id="automated-tests">Automated tests<a href="#automated-tests" class="anchor">#</a></h2>
<p>Manual tests are great to get a quick idea of what your bundle does.
But an embed application is also great to write automated tests.</p>
<h3 id="container-tests">Container tests<a href="#container-tests" class="anchor">#</a></h3>
<p>Let's pretend we created a service which is defined in the DIC. We'd like to
make sure it is properly configured (for e.g. checking if we forgot to inject a
dependency). For this, we'll need to created a simple test:</p>
<pre><code class="language-php">&lt;?php
// File: Tests/ServiceTest.php

namespace Acme\StandaloneBundle\Tests;

class ServiceTest extends \PHPUnit_Framework_TestCase
{
    private $container;

    protected function setUp()
    {
        $kernel = new \AppKernel('test', true);
        $kernel-&gt;boot();

        $this-&gt;container = $kernel-&gt;getContainer();
    }

    public function testServiceIsDefinedInContainer()
    {
        $service = $this-&gt;container-&gt;get('acme_standalone.service');

        $this-&gt;assertInstanceOf('Acme\StandaloneBundle\Service', $service);
    }
}</code></pre>
<p>We need to add <a href="https://phpunit.de/">PHPUnit</a> as a development dependency:</p>
<pre><code class="language-json">{
    "name": "acme/standalone-bundle",
    "type": "symfony-bundle",
    "license": "MIT",
    "autoload": {
        "psr-4": {
            "Acme\\StandaloneBundle\\": ""
        }
    },
    "require": {
        "symfony/http-kernel": "~2.3"
    },
    "require-dev": {
        "symfony/framework-bundle": "~2.3"
        "phpunit/phpunit": "~4.3"
    }
}</code></pre>
<p>Finally we need to configure PHPUnit to use our autoload:</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!-- http://phpunit.de/manual/4.3/en/appendixes.configuration.html --&gt;
&lt;phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://schema.phpunit.de/4.3/phpunit.xsd"
    backupGlobals="false"
    colors="true"
    bootstrap="./Tests/app/autoload.php"
&gt;
    &lt;testsuites&gt;
        &lt;testsuite name="Test Suite"&gt;
            &lt;directory&gt;./Tests/&lt;/directory&gt;
        &lt;/testsuite&gt;
    &lt;/testsuites&gt;
&lt;/phpunit&gt;</code></pre>
<p>That's it! You can now run:</p>
<pre><code>./vendor/bin/phpunit</code></pre>
<blockquote>
<p><strong>Note</strong>: You can of course use any testing framework of your choice.</p>
</blockquote>
<h3 id="functional-cli-tests">Functional CLI tests<a href="#functional-cli-tests" class="anchor">#</a></h3>
<p>Let's pretend we created a command. We'd like to run it automatically and check
its exit code to make sure it works. For this, we'll need to created a simple
test:</p>
<pre><code class="language-php">&lt;?php
// File: Tests/ServiceTest.php

namespace Acme\StandaloneBundle\Tests\Command;

use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Output\NullOutput;

class DemoCommandTest extends \PHPUnit_Framework_TestCase
{
    private $application;

    protected function setUp()
    {
        $kernel = new AppKernel('dev', true);
        $this-&gt;application = new Application($kernel);
    }

    public function testItRunsSuccessfully()
    {
        $output = new NullOutput();
        $input = new ArrayInput(
            'command_name' =&gt; 'acme:demo',
            'argument' =&gt; 'value',
            '--option' =&gt; 'value',
        );
        $exitCode = $this-&gt;application-&gt;run($input, $output);

        $this-&gt;assertSame(0, $exitCode);
    }
}</code></pre>
<p>And that's it!</p>
<h3 id="functional-web-tests">Functional web tests<a href="#functional-web-tests" class="anchor">#</a></h3>
<p>Let's pretend we created a controller which returns some JSON data. We'd like to
browse it automatically and check its status code to make sure it works. For
this, we'll need to created a simple test:</p>
<pre><code class="language-php">&lt;?php
// File: Tests/ServiceTest.php

namespace Acme\StandaloneBundle\Tests\Controller;

use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Output\NullOutput;

class DemoControllerTest extends \PHPUnit_Framework_TestCase
{
    private $client;

    protected function setUp()
    {
        $kernel = new AppKernel('test', true);
        $kernel-&gt;boot();

        $this-&gt;client = $kernel-&gt;getContainer()-&gt;get('test.client');
    }

    public function testItRunsSuccessfully()
    {
        $headers = array('CONTENT_TYPE' =&gt; 'application/json');
        $content = array('parameter' =&gt; 'value');
        $response = $this-&gt;client-&gt;request(
            'POST',
            '/demo',
            array(),
            array(),
            $headers,
            $content
        );

        $this-&gt;assertTrue($response-&gt;isSuccessful());
    }
}</code></pre>
<p>The <code>test.client</code> service is only available when the <code>test</code> configuration
parameter is set.</p>
<pre><code class="language-yaml"># File: Tests/app/config.yml
framework:
    secret: "Three can keep a secret, if two of them are dead."
    test: ~</code></pre>
<p>And that's it!</p>
<blockquote>
<p><strong>Note</strong>: When creating APIs, you might want to test the precise status code.</p>
</blockquote>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Creating an embed application in a third party bundle is fairly easy and brings
many advantages as it enables demonstrations and simple automated tests.</p>
<p>I hope you enjoyed this article, if you have any questions or comments, please
<a href="https://twitter.com/epiloic">let me know</a>.</p>]]></content>
    </entry>
        <entry>
        <title>PHP array manipulation</title>
                <id>http://gnugat.github.io/2014/10/15/php-array-manipulation.html</id>
                <updated>2014-10-15T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/10/15/php-array-manipulation.html"/>
        <content type="html" xml:lang="en"><![CDATA[<blockquote>
<p><strong>TL;DR</strong>: <a href="https://github.com/gnugat/redaktilo">Redaktilo</a> provides a nice
API to manipulate array of lines (insert, replace, go to line, etc).</p>
</blockquote>
<p>Arrays are surely one of the most used PHP functionality: they're simple,
convenient and benefit from a large set of standard functions to manipulate them.</p>
<p>Let's see the different possibilities:</p>
<ul><li><a href="#finding-an-element">Finding an element</a></li>
<li><a href="#finding-an-element-relatively-to-a-given-index">Finding an element relatively to a given index</a></li>
<li><a href="#inserting-a-new-element">Inserting a new element</a></li>
<li><a href="#removing-an-element">Removing an element</a></li>
<li><a href="#retrieving-elements-from-a-file">Retrieving elements from a file</a></li>
<li><a href="#saving-changes-in-a-file">Saving changes in a file</a></li>
<li><a href="#there-is-a-better-way">There is a better way</a>
<ul><li><a href="#retrieving-a-line">Retrieving a line</a></li>
<li><a href="#finding-an-element-relatively-to-a-given-line-number">Finding an element relatively to a given line number</a></li>
<li><a href="#inserting-a-new-line">Inserting a new line</a></li>
<li><a href="#using-text">Using Text</a></li>
<li><a href="#cheat-sheet">Cheat Sheet</a>
<ul><li><a href="#editor">Editor</a></li>
<li><a href="#text">Text</a></li>
<li><a href="#file">File</a></li>
</ul></li>
</ul></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul><h2 id="finding-an-element">Finding an element<a href="#finding-an-element" class="anchor">#</a></h2>
<p>In order to find the index of a string in an array, we can use one of the
following functions:</p>
<pre><code class="language-php">&lt;?php

$montyPython = array(
    'This is a dead parrot',
    'No, no, it\'s not dead, it\'s resting!',
);

$exactSentence = 'This is a dead parrot';
array_search($exactSentence, $montyPython, true); // Returns 0
$regex = '/resting!$/';
$found = preg_grep($regex, $montyPython);
key($found); // Returns 1</code></pre>
<blockquote>
<p><strong>Note</strong>: The third parameter of <a href="http://php.net/array_search"><code>array_search</code></a>
enables the strict comparison (it makes sure the types are also the same).</p>
</blockquote>
<p>We can find the matching elements of a pattern using
<a href="http://php.net/preg_grep"><code>preg_grep</code></a>. To get the index of the first result
found, we can use <a href="http://php.net/key"><code>key</code></a>.</p>
<h2 id="finding-an-element-relatively-to-a-given-index">Finding an element relatively to a given index<a href="#finding-an-element-relatively-to-a-given-index" class="anchor">#</a></h2>
<p>It's great! Now what if we want to remember the index and then make a search
relatively to it? For example we want to find the index of the element
<code>/a knewt/</code>, but only in the elements above <code>... I got better...</code>:</p>
<pre><code class="language-php">&lt;?php

$holyGrail = array(
    'She turned me into a knewt!',
    'A knewt?',
    '... I got better...',
    'A WITCH!',
);

$index = array_search('... I got better...', $holyGrail, true);
$section = array_slice($holyGrail, 0, $index, true);
$reversedSection = array_reverse($section, true);
$found = preg_grep('/a knewt/', $reversedSection);
key($found); // Returns 0</code></pre>
<p>In this code snippet, we get a subset of the array
(from the first element to <code>... I got better</code>) using
<a href="http://php.net/array_slice"><code>array_slice</code></a> (the last argument allows to keep
the indexes unchanged). This also excludes <code>... I got better...</code>.</p>
<p>Then we change the order of the elements using
<a href="http://php.net/array_reverse"><code>array_reverse</code></a> (the second argument allows to
keep the index unchanged) so the element above <code>... I got better...</code> would be
the first result.</p>
<p>Finally we look for <code>/a knewt/</code> as we did previously.</p>
<h2 id="inserting-a-new-element">Inserting a new element<a href="#inserting-a-new-element" class="anchor">#</a></h2>
<p>If we want to insert a new element after a given index in the array, we need to
use <a href="http://php.net/array_splice"><code>array_splice</code></a>:</p>
<pre><code class="language-php">&lt;?php

$grandPiano = array(
    'I would like to learn how to fly an aeroplane',
    'A what?',
    'An aeroplane',
    'OH! An aeroplane, oh I say we are grand aren\'t we?',
    'Pardon me while I\'m flying me aeroplane... NOW GET ON THE TABLE!',
);

$found = preg_grep('/grand/', $grandPiano);
$index = key($found);
array_splice($grandPiano, $index + 1, 0, 'No more cluttered cream for me, butler, I\'m off to play the grand piano');</code></pre>
<p>Actually <code>array_splice</code> allows to replace a subsection of an array, here's the
explanation of its arguments:</p>
<ol><li>the array to manipulate</li>
<li>the starting index</li>
<li>the ending index (<code>0</code> means replacing nothing, therefore just inserting)</li>
<li>the replacement (in our case the element to insert)</li>
</ol><p>It's not very explicit, but we have a solution for this (keep reading to find
out).</p>
<h2 id="removing-an-element">Removing an element<a href="#removing-an-element" class="anchor">#</a></h2>
<p>Here's an easy one:</p>
<pre><code class="language-php">&lt;?php

$parrot = array(
    'Hello, I would like to make a complain. Hello, miss?',
    'What do you mean miss?',
    'Sorry, I have a cold',
);

$index = array_search('Sorry, I have a cold', $parrot, true);
unset($parrot[$index]);</code></pre>
<p>You might want to reorder the indexes, to avoid gaps:</p>
<pre><code class="language-php">&lt;?php

$parrot = array(
    'Hello, I would like to make a complain. Hello, miss?',
    'What do you mean miss?',
    'Sorry, I have a cold',
);

$index = array_search('What do you mean miss?', $parrot, true);
unset($parrot[$index]);
// Current value:
// $parrot = array(
//     0 =&gt; 'Hello, I would like to make a complain. Hello, miss?',
//     2 =&gt; 'Sorry, I have a cold',
// );

$parrot = array_values($parrot);
// Current value:
// $parrot = array(
//     0 =&gt; 'Hello, I would like to make a complain. Hello, miss?',
//     1 =&gt; 'Sorry, I have a cold',
// );</code></pre>
<p>The <a href="http://php.net/array_values"><code>array_values</code></a> function is equivalent to:</p>
<pre><code class="language-php">$newArray = array();
foreach ($oldArray as $element) {
    $newArray[] = $element;
}</code></pre>
<h2 id="retrieving-elements-from-a-file">Retrieving elements from a file<a href="#retrieving-elements-from-a-file" class="anchor">#</a></h2>
<p>Until now, we've been using a hard coded array, but this is rarely what we
encounter in real life project. The data could for example come from a file,
which can be transformed into an array of lines:</p>
<pre><code class="language-php">&lt;?php

$file = file('/tmp/holy-grail.text', FILE_IGNORE_NEW_LINES);</code></pre>
<blockquote>
<p><strong>Note</strong>: the second argument will remove the trailing line breaks.</p>
</blockquote>
<p>The only problem with <a href="http://php.net/file"><code>file</code></a> is that it will remove the
last line if it's empty. Let's use another function:</p>
<pre><code class="language-php">&lt;?php

$content = file_get_contents('/tmp/holy-grail.txt');
$lines = explode("\n", $content);</code></pre>
<p>The <a href="http://php.net/file_get_contents"><code>file_get_contents</code></a> function returns the
content as a string.</p>
<p>We used <a href="http://php.net/explode"><code>explode</code></a> to split it into an array of lines.</p>
<p>This assumes that the file hasn't been created on Windows (where the line
separator is <code>\r\n</code>)... We need to detect the line break:</p>
<pre><code class="language-php">&lt;?php

$content = @file_get_contents('/tmp/holy-grail.txt');
$lineBreak = "\n"; // Used by every systems (except Windows), so used as default
if (false === strpos($content, "\n")) { // No line break detected at all
    $lineBreak = PHP_EOL; // Using the system's one
}
if (false !== strpos($content, "\r\n")) { // Windows line break detected
    $lineBreak = "\r\n";
}
$lines = explode($lineBreak, $content);</code></pre>
<blockquote>
<p><strong>Note</strong>: There's many check to be done before actually reading the file
(does the file actually exists? Do we have the permission to read it?).
We have a solution for this (keep reading to find out).</p>
</blockquote>
<h2 id="saving-changes-in-a-file">Saving changes in a file<a href="#saving-changes-in-a-file" class="anchor">#</a></h2>
<p>If we do any changes to those lines, we might want to save them on the
filesystem:</p>
<pre><code class="language-php">&lt;?php

$lines = array(
    'Morning, morning, morning',
    'Morning Jim, Morning Jack',
    'Can\'t complain, keep coming back',
    'Boring, boring, boring',
);
$lineBreak = "\n"; // Or whatever has been detected
$content = implode($lineBreak, $lines);
file_put_contents('/tmp/silly-walk-song.txt', $content);</code></pre>
<p>To convert back the array of lines to a string content, we use
<a href="http://php.net/implode"><code>implode</code></a>.</p>
<p>To write the content in the file, we use
<a href="http://php.net/file_put_contents"><code>file_put_contents</code></a>.</p>
<blockquote>
<p><strong>Note</strong>: There's many check to be done before actually writing in a file
(does the path actually exists? Do we have the permissions? What happens if
the writing process fails during the execution?). To solve this, use the
Symfony2 Filesystem Component (<code>Filesystem#dumpFile()</code>).</p>
</blockquote>
<h2 id="there-is-a-better-way">There is a better way<a href="#there-is-a-better-way" class="anchor">#</a></h2>
<p>You don't find <code>array_splice</code> very explicit for element insertion (or can't find
a way to remember its argument order/meaning)?</p>
<p>Keeping the elements, the index, the line break in separates variables looks too
procedural for you?</p>
<p>And what about error management?</p>
<p>Don't panic! There is a better way: <a href="https://github.com/gnugat/redaktilo">Redaktilo</a>
(it means "Editor" in esperanto).</p>
<p>This small library makes array manipulation easier by providing:</p>
<ul><li>an <code>Editor</code> object (open, save, find, insert, etc)</li>
<li>a <code>Text</code> object (line break, elements, current index, etc)</li>
<li>a <code>File</code> object (same as <code>Text</code>, but with filename)</li>
</ul><p>Use it in your projects, thanks to <a href="http://getcomposer.org">Composer</a>:</p>
<pre><code>composer require 'gnugat/redaktilo:~1.1'</code></pre>
<pre><code class="language-php">&lt;?php

require __DIR__.'/vendor/autoload.php';

use Gnugat\Redaktilo\EditorFactory;

$editor = EditorFactory::createEditor();</code></pre>
<blockquote>
<p><strong>Note</strong>: In order to make operations more explicit, Redaktilo has adopted the
vocabulary of file edition (more specifically manipulation of lines). But in
the end it's still array manipulation.</p>
</blockquote>
<h3 id="retrieving-a-line">Retrieving a line<a href="#retrieving-a-line" class="anchor">#</a></h3>
<p>You don't have to worry about file checking and line break detection anymore:</p>
<pre><code class="language-php">&lt;?php

require __DIR__.'/vendor/autoload.php';

use Gnugat\Redaktilo\EditorFactory;

$editor = EditorFactory::createEditor();
$file = $editor-&gt;open('/tmp/silly-walk-song.txt');
$file-&gt;getLineBreak(); // Returns "\n" if the file hasn't been created on Windows</code></pre>
<h3 id="finding-an-element-relatively-to-a-given-line-number">Finding an element relatively to a given line number<a href="#finding-an-element-relatively-to-a-given-line-number" class="anchor">#</a></h3>
<p>Redaktilo takes care of the search strategy for you (it uses <code>preg_grep</code> when
you give a valid regular expression, and <code>array_search</code> when you give a string).</p>
<p>It supports search relative to the current line number stored in the given
<code>Text</code> and <code>File</code> (it uses <code>array_slice</code>, <code>array_reverse</code> and <code>key</code> internally).</p>
<p>The <code>hasAbove</code> and <code>hasBelow</code> methods just return a boolean, while the
<code>jumpAbove</code> and <code>jumpBelow</code> methods rather store the found line number in the
given <code>Text</code> and <code>File</code> (and raise an exception if nothing is found):</p>
<pre><code class="language-php">&lt;?php

require __DIR__.'/vendor/autoload.php';

use Gnugat\Redaktilo\EditorFactory;

$editor = EditorFactory::createEditor();
$file = $editor-&gt;open('/tmp/silly-walk-song.txt');

$editor-&gt;jumpBelow($file, 'Boring, boring, boring');
$file-&gt;getCurrentLineNumber(); // Returns 3

$editor-&gt;hasAbove($file, '/morning,/'); // Returns true</code></pre>
<blockquote>
<p><strong>Note</strong>: <code>hasAbove</code>, <code>hasBelow</code>, <code>jumpAbove</code> and <code>jumpBelow</code> all have a third
argument which is a line number. If provided, the search will be done
relatively to this line number, rather than to the current one.</p>
<p>For example, checking the presence of a pattern in the whole file can be done
as: <code>$editor-&gt;hasBelow($file, $pattern, 0); // starts the search from the top of the file</code>.</p>
</blockquote>
<h3 id="inserting-a-new-line">Inserting a new line<a href="#inserting-a-new-line" class="anchor">#</a></h3>
<p>No more <code>array_splice</code> nonsense!</p>
<pre><code class="language-php">&lt;?php

require __DIR__.'/vendor/autoload.php';

use Gnugat\Redaktilo\EditorFactory;

$editor = EditorFactory::createEditor();
$file = $editor-&gt;open('/tmp/silly-walk-song.txt');

$editor-&gt;insertAbove($file, 'The silly walk song');</code></pre>
<blockquote>
<p><strong>Note</strong>: <code>insertAbove</code>, <code>insertBelow</code>, <code>replace</code> and <code>remove</code> all have a
third argument which is a line number. If provided, the anipulation will be
done relatively to it, instead of relatively to the current one.</p>
</blockquote>
<h3 id="using-text">Using Text<a href="#using-text" class="anchor">#</a></h3>
<p>If you're not manipulating a file, you can use <code>Text</code> just like we used
<code>File</code>:</p>
<pre><code class="language-php">&lt;?php

require __DIR__.'/vendor/autoload.php';

use Gnugat\Redaktilo\EditorFactory;
use Gnugat\Redaktilo\Service\LineBreak;
use Gnugat\Redaktilo\Service\TextFactory;

$lineBreak = new LineBreak();
$textFactory = new TextFactory($lineBreak);

$text = $textFactory-&gt;make(&lt;&lt;&lt;EOF
Some raw text you would have got from somewhere,
for example a database.
EOF
);

$editor = EditorFactory::createEditor();
$editor-&gt;hasBelow($text, '/a database/'); // Returns true</code></pre>
<h3 id="cheat-sheet">Cheat Sheet<a href="#cheat-sheet" class="anchor">#</a></h3>
<p>There's many more operations available, as you can discover in
<a href="https://github.com/gnugat/redaktilo/tree/master/doc">the documentation</a>.</p>
<p>To make it easier, here's some cheat sheet.</p>
<h4 id="editor">Editor<a href="#editor" class="anchor">#</a></h4>
<pre><code class="language-php">&lt;?php

namespace Gnugat\Redaktilo;

use Gnugat\Redaktilo\Search\PatternNotFoundException;
use Gnugat\Redaktilo\Search\SearchEngine;
use Gnugat\Redaktilo\Service\Filesystem;
use Symfony\Component\Filesystem\Exception\FileNotFoundException;
use Symfony\Component\Filesystem\Exception\IOException;

class Editor
{
    public function open($filename, $force = false); // @throws FileNotFoundException
    public function save(File $file); // @throws IOException If cannot write

    // @throw PatternNotFoundException
    public function jumpAbove(Text $text, $pattern, $location = null);
    public function jumpBelow(Text $text, $pattern, $location = null);

    // @return bool
    public function hasAbove(Text $text, $pattern, $location = null);
    public function hasBelow(Text $text, $pattern, $location = null);

    public function insertAbove(Text $text, $addition, $location = null);
    public function insertBelow(Text $text, $addition, $location = null);
    public function replace(Text $text, $replacement, $location = null);
    public function remove(Text $text, $location = null);
}</code></pre>
<h4 id="text">Text<a href="#text" class="anchor">#</a></h4>
<pre><code class="language-php">&lt;?php

namespace Gnugat\Redaktilo;

class Text
{
    public function getLines();
    public function setLines(array $lines);
    public function getLength();
    public function getLineBreak();
    public function setLineBreak($lineBreak);
    public function getCurrentLineNumber();

    // @throw InvalidLineNumberException
    public function setCurrentLineNumber($lineNumber);
    public function getLine($lineNumber = null);
    public function setLine($line, $lineNumber = null);
}</code></pre>
<h4 id="file">File<a href="#file" class="anchor">#</a></h4>
<pre><code class="language-php">&lt;?php

namespace Gnugat\Redaktilo;

class File extends Text
{
    public function getFilename();
    public function setFilename($filename);
}</code></pre>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>PHP provides plenty of built-in functions to manipulate arrays, but those are
not enough. <a href="https://github.com/gnugat/redaktilo">Redaktilo</a> is a small library
which provides a nicer API.</p>
<p>It allows you to select a line relatively to the current one and then do CRUD
operations on it.</p>
<p>I hope you'll find it as usefull as I do and if you find any bug or have any
proposals feel free to do so on <a href="https://github.com/gnugat/redaktilo/issues">Github</a>
where <a href="http://loickpiera.com/">Lo&iuml;ck Piera</a> and myself will both be glad to help
you.</p>
<blockquote>
<p><strong>Note</strong>: As for the 15/10/2014, the current version of Redaktilo is 1.1.6
(stable). Future updates are already planned!</p>
</blockquote>]]></content>
    </entry>
        <entry>
        <title>Master Symfony2 - Conclusion</title>
                <id>http://gnugat.github.io/2014/10/08/master-sf2-conclusion.html</id>
                <updated>2014-10-08T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/10/08/master-sf2-conclusion.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>This is the conclusion of the series on mastering the
<a href="http://symfony.com/">Symfony2</a> framework. Have a look at the five articles:</p>
<ul><li><a href="../../../2014/08/05/master-sf2-part-1-bootstraping.html">1: Bootstraping</a></li>
<li><a href="../../../2014/08/13/master-sf2-part-2-tdd.html">2: TDD</a></li>
<li><a href="../../../2014/08/22/master-sf2-part-3-services.html">3: Services</a></li>
<li><a href="../../../2014/08/27/master-sf2-part-4-doctrine.html">4: Doctrine</a></li>
<li><a href="../../../2014/09/03/master-sf2-part-5-events.html">5: Events</a></li>
<li><a href="../../../2014/09/10/master-sf2-part-6-annotations.html">6: Annotations</a></li>
</ul><p>It quickly sums up what we've seen and provides some directions to the next
steps, for those interrested in learning more (there's always more!).</p>
<h2 id="summary">Summary<a href="#summary" class="anchor">#</a></h2>
<p>In these 6 articles, we've learned how to master Symfony2 through:</p>
<ol><li>the usage of distributions to bootstrap our projects</li>
<li>the writing of simple functional tests (we used TDD/PHPUnit but any methodology/Framework can be used)</li>
<li>the creation of services and entities (where our business related code actually lies)</li>
<li>the usage of a third party library (Doctrine)</li>
<li>the extension of the framework via events (change the Request and Response at will)</li>
<li>the configuration via annotations, allowing to reduce the distance with the code</li>
</ol><p>As a bonus, we've also seen:</p>
<ul><li>the Repository Design Pattern (retrieve data and format it before using it)</li>
<li>the Symfony Console Component, which can be used as a standalone library</li>
</ul><h2 id="going-further">Going further<a href="#going-further" class="anchor">#</a></h2>
<p>There's still a deal lot more to learn, but with this series we've hopefully
seen the strict minimum to create any day to day application with deep knowledge
on how to extend the framework and where to put our code.</p>
<p>We've seen Symfony as a full stack framework: it deals with the HTTP protocol
for you. But the truth is that Symfony is a collection of third party libraries
before anything else. Here's a short selection of its available components:</p>
<ul><li>Validation: define constraints and check if the given variable complies to them</li>
<li>Form: define fields, generate the HTML form and populate variables from the request</li>
<li>Yaml: parse a yaml file</li>
<li>Security: check the identity users and their permissions</li>
</ul><p>Do you want to go further? Then have a look a these fabulous resources:</p>
<ul><li><a href="http://symfony.com/doc/current/index.html">The documentation</a></li>
<li><a href="https://twitter.com/raulfraile">Raul Fraile</a> overview articles on the:
<ul><li><a href="http://blog.servergrove.com/2013/09/23/symfony2-components-overview-httpfoundation/">HttpFoundation Component</a></li>
<li><a href="http://blog.servergrove.com/2013/09/30/symfony2-components-overview-httpkernel/">HttpKernel Component</a></li>
<li><a href="http://blog.servergrove.com/2013/10/08/symfony2-components-overview-routing/">Routing Component</a></li>
<li><a href="http://blog.servergrove.com/2013/10/23/symfony2-components-overview-eventdispatcher/">EventDispather Component</a></li>
<li><a href="http://blog.servergrove.com/2014/02/21/symfony2-components-overview-config/">Config Component</a></li>
<li><a href="http://blog.servergrove.com/2014/03/03/symfony2-components-overview-validator/">Validator Component</a></li>
<li><a href="http://blog.servergrove.com/2014/03/11/symfony2-components-overview-templating/">Templating Component</a></li>
<li><a href="http://blog.servergrove.com/2014/03/18/symfony2-components-overview-translation/">Translation Component</a></li>
<li><a href="http://blog.servergrove.com/2014/03/26/symfony2-components-overview-finder/">Finder Component</a></li>
<li><a href="http://blog.servergrove.com/2014/04/07/symfony2-components-overview-expression-language/">ExpressionLanguage Component</a></li>
<li><a href="http://blog.servergrove.com/2014/04/16/symfony2-components-overview-process/">Process Component</a></li>
</ul></li>
<li><a href="https://twitter.com/khepin">Sebastien Armand</a>'s book <a href="http://www.amazon.co.uk/Extending-Symfony-Web-Application-Framework/dp/1783287195">Extending Symfony Web Application Framework</a></li>
<li><a href="https://twitter.com/matthiasnoback">Matthias Noback</a>'s book <a href="http://www.amazon.co.uk/Year-With-Symfony-reusable-Symfony2/dp/9082120119">A Year with Symfony</a></li>
<li><a href="https://twitter.com/kriswallsmith">Kris Walsmith</a> slides on the <a href="http://www.slideshare.net/kriswallsmith/love-and-loss-a-symfony-security-play">Security Component</a></li>
</ul><h3 id="previous-articles">Previous articles<a href="#previous-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/08/05/master-sf2-part-1-bootstraping.html">1: Bootstraping</a></li>
<li><a href="../../../2014/08/13/master-sf2-part-2-tdd.html">2: TDD</a></li>
<li><a href="../../../2014/08/22/master-sf2-part-3-services.html">3: Services</a></li>
<li><a href="../../../2014/08/27/master-sf2-part-4-doctrine.html">4: Doctrine</a></li>
<li><a href="../../../2014/09/03/master-sf2-part-5-events.html">5: Events</a></li>
<li><a href="../../../2014/09/10/master-sf2-part-6-annotations.html">6: Annotations</a></li>
</ul>]]></content>
    </entry>
        <entry>
        <title>Master Symfony2 - part 6: Annotations</title>
                <id>http://gnugat.github.io/2014/09/10/master-sf2-part-6-annotations.html</id>
                <updated>2014-09-10T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/09/10/master-sf2-part-6-annotations.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>This is the sixth article of the series on mastering the
<a href="http://symfony.com/">Symfony2</a> framework. Have a look at the four first ones:</p>
<ul><li><a href="../../../2014/08/05/master-sf2-part-1-bootstraping.html">1: Bootstraping</a></li>
<li><a href="../../../2014/08/13/master-sf2-part-2-tdd.html">2: TDD</a></li>
<li><a href="../../../2014/08/22/master-sf2-part-3-services.html">3: Services</a></li>
<li><a href="../../../2014/08/27/master-sf2-part-4-doctrine.html">4: Doctrine</a></li>
<li><a href="../../../2014/09/03/master-sf2-part-5-events.html">5: Events</a></li>
</ul><p>In the previous articles we created an API allowing us to submit and list
quotes:</p>
<pre><code>.
&#9500;&#9472;&#9472; app
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; AppKernel.php
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; cache
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; .gitkeep
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config_prod.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config_test.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; doctrine.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; parameters.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; parameters.yml.dist
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; routing.yml
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; console
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; logs
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; .gitkeep
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; phpunit.xml.dist
&#9500;&#9472;&#9472; composer.json
&#9500;&#9472;&#9472; composer.lock
&#9500;&#9472;&#9472; src
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; Fortune
&#9474;&nbsp;&nbsp;     &#9492;&#9472;&#9472; ApplicationBundle
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; Controller
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; QuoteController.php
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; DependencyInjection
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; FortuneApplicationExtension.php
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; Entity
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; QuoteFactory.php
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; QuoteGateway.php
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; Quote.php
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; QuoteRepository.php
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; EventListener
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; SubmitJsonListener.php
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; FortuneApplicationBundle.php
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; Resources
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; config
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp;     &#9500;&#9472;&#9472; doctrine
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp;     &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; Quote.orm.yml
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp;     &#9492;&#9472;&#9472; services.xml
&#9474;&nbsp;&nbsp;         &#9492;&#9472;&#9472; Tests
&#9474;&nbsp;&nbsp;             &#9500;&#9472;&#9472; Controller
&#9474;&nbsp;&nbsp;             &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; QuoteControllerTest.php
&#9474;&nbsp;&nbsp;             &#9492;&#9472;&#9472; Entity
&#9474;&nbsp;&nbsp;                 &#9492;&#9472;&#9472; QuoteRepositoryTest.php
&#9492;&#9472;&#9472; web
    &#9492;&#9472;&#9472; app.php</code></pre>
<p>Here's the <a href="https://github.com/gnugat/mastering-symfony2">repository where you can find the actual code</a>.</p>
<p>In this article, we'll discover annotations.</p>
<h2 id="doctrine-annotations">Doctrine Annotations<a href="#doctrine-annotations" class="anchor">#</a></h2>
<p>Inspired by <a href="http://legacy.python.org/dev/peps/pep-0318/">Python Decorators</a> and
<a href="http://docs.oracle.com/javase/tutorial/java/annotations/">Java Annotations</a>,
the <a href="http://www.doctrine-project.org/">Doctrine Project</a> created a convenient
library allowing to put in the same file: information (like configuration) and
source code.</p>
<p>In concrete terms, <a href="http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html">Annotations</a>
are comments which are read by <code>AnnotationReader</code> and can then be cached in any
format (generally PHP) to make things faster afterwards.</p>
<p>It's main strength is the possibility to avoid having a configuration file in a
path too far from the source code which uses it. For example intead of having
the schema definition in <code>src/Fortune/ApplicationBundle/Resources/config/doctrine/Quote.orm.yml</code>
we could have it directly in the <code>QuoteEntity</code>.</p>
<h2 id="installing-sensio-frameworkextra-bundle">Installing Sensio FrameworkExtra Bundle<a href="#installing-sensio-frameworkextra-bundle" class="anchor">#</a></h2>
<p>The <a href="http://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/index.html">Sensio FrameworkExtra Bundle</a>
provides controller annotations, amongst them lies <code>@Route</code> allowing us to move
the routing configuration from <code>app/config/routing.yml</code> directly to the actions.</p>
<p>Let's download the bundle:</p>
<pre><code>composer require sensio/framework-extra-bundle:~3.0</code></pre>
<p>Then register it:</p>
<pre><code>&lt;?php
// File: app/AppKernel.php

use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Config\Loader\LoaderInterface;

class AppKernel extends Kernel
{
    public function registerBundles()
    {
        return array(
            new Symfony\Bundle\FrameworkBundle\FrameworkBundle(),
            new Fortune\ApplicationBundle\FortuneApplicationBundle(),
            new Doctrine\Bundle\DoctrineBundle\DoctrineBundle(),
            new Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle(),
        );
    }

    public function registerContainerConfiguration(LoaderInterface $loader)
    {
        $loader-&gt;load(__DIR__.'/config/config_'.$this-&gt;getEnvironment().'.yml');
    }
}</code></pre>
<p>Finally, we need to tell Doctrine's Annotation library  where to find the
classes by registering Composer's autoloader:</p>
<pre><code>&lt;?php
// File: app/autoload.php

use Doctrine\Common\Annotations\AnnotationRegistry;

$loader = require __DIR__.'/../vendor/autoload.php';

AnnotationRegistry::registerLoader(array($loader, 'loadClass'));

return $loader;</code></pre>
<p>This file should be used in our front controller:</p>
<pre><code>&lt;?php

use Symfony\Component\HttpFoundation\Request;

require_once __DIR__.'/app/autoload.php';
require_once __DIR__.'/../app/AppKernel.php';

$kernel = new AppKernel('prod', false);
$request = Request::createFromGlobals();
$response = $kernel-&gt;handle($request);
$response-&gt;send();
$kernel-&gt;terminate($request, $response);</code></pre>
<p>But also in our test suite:</p>
<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- http://phpunit.de/manual/current/en/appendixes.configuration.html --&gt;
&lt;phpunit
    backupGlobals="false"
    colors="true"
    syntaxCheck="false"
    bootstrap="autoload.php"&gt;

    &lt;testsuites&gt;
        &lt;testsuite name="Functional Test Suite"&gt;
            &lt;directory&gt;../src/*/*/Tests&lt;/directory&gt;
        &lt;/testsuite&gt;
    &lt;/testsuites&gt;
&lt;/phpunit&gt;</code></pre>
<h2 id="using-the-route-annotation">Using the @Route annotation<a href="#using-the-route-annotation" class="anchor">#</a></h2>
<p>We can now empty the <code>routing.yml</code> file and tell it to import the configuration
from the <code>QuoteController</code> using its annotations:</p>
<pre><code># File: app/config/routing.yml
fortune_application:
    resource: @FortuneApplicationBundle/Controller
    type: annotation</code></pre>
<p>The controller itself will look like this:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Controller/QuoteController.php

namespace Fortune\ApplicationBundle\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;

class QuoteController extends Controller
{
    /**
     * @Route("/api/quotes", methods={"POST"})
     */
    public function submitAction(Request $request)
    {
        $postedValues = $request-&gt;request-&gt;all();
        if (empty($postedValues['content'])) {
            $answer = array('message' =&gt; 'Missing required parameter: content');

            return new JsonResponse($answer, Response::HTTP_UNPROCESSABLE_ENTITY);
        }
        $quoteRepository = $this-&gt;container-&gt;get('fortune_application.quote_repository');
        $quote = $quoteRepository-&gt;insert($postedValues['content']);

        return new JsonResponse($quote, Response::HTTP_CREATED);
    }

    /**
     * @Route("/api/quotes", methods={"GET"})
     */
    public function listAction(Request $request)
    {
        $quoteRepository = $this-&gt;container-&gt;get('fortune_application.quote_repository');
        $quotes = $quoteRepository-&gt;findAll();

        return new JsonResponse($quotes, Response::HTTP_OK);
    }
}</code></pre>
<p>And now annotations are ready to be used, as the tests prove it:</p>
<pre><code>./vendor/bin/phpunit -c app</code></pre>
<p>That's green enough for us to commit:</p>
<pre><code>git add -A
git commit -m 'Used annotations'</code></pre>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Annotations allow us to remove the distance between configuration and code.</p>
<blockquote>
<p><strong>Note</strong>: You should know that annotations can
<a href="https://r.je/php-annotations-are-an-abomination.html">raise concerns about tight coupling</a>,
but it doesn't seem to be <a href="http://marekkalnik.tumblr.com/post/34047514685/are-annotations-really-bad">relevant when used as configuration</a>.</p>
<p>The best thing to do is to minimize their use to the classes which are
already coupled to our tools (for example the controllers) and do some
research on the subject to make your own opinion.</p>
</blockquote>
<p>If the concept seduced you, have a look a <a href="https://github.com/mmoreram/ControllerExtraBundle">ControllerExtraBundle</a>.</p>
<p>The next artile will be the conclusion, I hope you enjoy this series!</p>
<h2 id="next-articles">Next articles<a href="#next-articles" class="anchor">#</a></h2>
<ul><li><a href="../../../2014/10/08/master-sf2-conclusion.html">Conclusion</a></li>
</ul><h3 id="previous-articles">Previous articles<a href="#previous-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/08/05/master-sf2-part-1-bootstraping.html">1: Bootstraping</a></li>
<li><a href="../../../2014/08/13/master-sf2-part-2-tdd.html">2: TDD</a></li>
<li><a href="../../../2014/08/22/master-sf2-part-3-services.html">3: Services</a></li>
<li><a href="../../../2014/08/27/master-sf2-part-4-doctrine.html">4: Doctrine</a></li>
<li><a href="../../../2014/09/03/master-sf2-part-5-events.html">5: Events</a></li>
</ul>]]></content>
    </entry>
        <entry>
        <title>Master Symfony2 - part 5: Events</title>
                <id>http://gnugat.github.io/2014/09/03/master-sf2-part-5-events.html</id>
                <updated>2014-09-03T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/09/03/master-sf2-part-5-events.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>This is the fifth article of the series on mastering the
<a href="http://symfony.com/">Symfony2</a> framework. Have a look at the four first ones:</p>
<ul><li><a href="../../../2014/08/05/master-sf2-part-1-bootstraping.html">1: Bootstraping</a></li>
<li><a href="../../../2014/08/13/master-sf2-part-2-tdd.html">2: TDD</a></li>
<li><a href="../../../2014/08/22/master-sf2-part-3-services.html">3: Services</a></li>
<li><a href="../../../2014/08/27/master-sf2-part-4-doctrine.html">4: Doctrine</a></li>
</ul><p>In the previous articles we created an API allowing us to submit and list
quotes:</p>
<pre><code>.
&#9500;&#9472;&#9472; app
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; AppKernel.php
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; cache
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; .gitkeep
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config_prod.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config_test.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; doctrine.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; parameters.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; parameters.yml.dist
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; routing.yml
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; logs
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; .gitkeep
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; phpunit.xml.dist
&#9500;&#9472;&#9472; composer.json
&#9500;&#9472;&#9472; composer.lock
&#9500;&#9472;&#9472; src
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; Fortune
&#9474;&nbsp;&nbsp;     &#9492;&#9472;&#9472; ApplicationBundle
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; Controller
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; QuoteController.php
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; DependencyInjection
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; FortuneApplicationExtension.php
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; Entity
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; QuoteFactory.php
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; QuoteGateway.php
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; Quote.php
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; QuoteRepository.php
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; FortuneApplicationBundle.php
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; Resources
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; config
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp;     &#9500;&#9472;&#9472; doctrine
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp;     &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; Quote.orm.yml
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp;     &#9492;&#9472;&#9472; services.xml
&#9474;&nbsp;&nbsp;         &#9492;&#9472;&#9472; Tests
&#9474;&nbsp;&nbsp;             &#9500;&#9472;&#9472; Controller
&#9474;&nbsp;&nbsp;             &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; QuoteControllerTest.php
&#9474;&nbsp;&nbsp;             &#9492;&#9472;&#9472; Entity
&#9474;&nbsp;&nbsp;                 &#9492;&#9472;&#9472; QuoteRepositoryTest.php
&#9492;&#9472;&#9472; web
    &#9492;&#9472;&#9472; app.php</code></pre>
<p>Here's the <a href="https://github.com/gnugat/mastering-symfony2">repository where you can find the actual code</a>.</p>
<p>In this one we'll learn how to extend the framework using events.</p>
<h2 id="eventdispatcher-component">EventDispatcher Component<a href="#eventdispatcher-component" class="anchor">#</a></h2>
<p>The <a href="http://symfony.com/doc/current/components/event_dispatcher/introduction.html">Event Dispatcher</a>
is another standalone component which can be summed up as follow:</p>
<pre><code>&lt;?php

class EventDispatcher
{
    private $events = array();

    public function addListener($event, $listener)
    {
        $this-&gt;events[$event][] = $listener;
    }

    public function dispatch($event)
    {
        foreach ($this-&gt;events[$event] as $listener) {
            $listener();
        }
    }
}</code></pre>
<p>You can register listeners (which are callables) and then call them by
dispatching the subscribed event:</p>
<pre><code>$dispatcher = new EventDispatcher();
$dispatcher-&gt;addListener('before.boyard', function () { echo 'Ultimate Challenge'; });
$dispatcher-&gt;dispatch('before.boyard'); // Prints "Ultimate Challenge".</code></pre>
<p>Here's the actual API:</p>
<pre><code>&lt;?php

namespace Symfony\Component\EventDispatcher;

interface EventDispatcherInterface
{
    public function dispatch($eventName, Event $event = null);

    public function addListener($eventName, $listener, $priority = 0);
    public function removeListener($eventName, $listener);
    public function getListeners($eventName = null);
    public function hasListeners($eventName = null);

    public function addSubscriber(EventSubscriberInterface $subscriber);
    public function removeSubscriber(EventSubscriberInterface $subscriber);
}</code></pre>
<p>The Component handles priorities, and contrary to our previous example it needs
an <code>Event</code> object when dispatching events, allowing us to provide a context.</p>
<p>Subscribers are listeners which have a <code>getSubscribedEvents</code> method.</p>
<p><strong>Note</strong>: If you want to learn more about this component, have a look at
<a href="https://twitter.com/raulfraile">Raul Fraile</a>'s <a href="http://blog.servergrove.com/2013/10/23/symfony2-components-overview-eventdispatcher/">article</a>.</p>
<h2 id="in-the-fullstack-framework">In the fullstack framework<a href="#in-the-fullstack-framework" class="anchor">#</a></h2>
<p>The <a href="http://symfony.com/doc/current/components/http_kernel/introduction.html">Symfony2 HttpKernel Component</a>
dispatches events to provide extension points, we can:</p>
<ul><li>modify the Request when it has just been received: <a href="http://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-request-event">kernel.request</a></li>
<li>change the controller when it has been guessed: <a href="http://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-controller-event">kernel.controller</a></li>
<li>use the value returned by the controller: <a href="http://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-view-event">kernel.view</a></li>
<li>change the Response when it has been created: <a href="http://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-response-event">kernel.response</a></li>
<li><a href="https://github.com/symfony/symfony/pull/8904">handle global state and cleanup</a>: kernel.finish_request</li>
<li>handle exceptions: <a href="http://symfony.com/doc/current/components/http_kernel/introduction.html#handling-exceptions-the-kernel-exception-event">kernel.exception</a></li>
</ul><p><strong>Note</strong>: exceptions are caught by default, but this can be disabled.</p>
<p>Here's the <a href="http://symfony.com/doc/current/components/http_kernel/introduction.html#component-http-kernel-event-table">full list of kernel events</a>.</p>
<p><strong>Note</strong>: If you want to learn more about those events, have a look at
<a href="https://twitter.com/matthiasnoback">Matthias Noback</a>'s book:
<a href="https://leanpub.com/a-year-with-symfony?utm_campaign=a-year-with-symfony&amp;utm_medium=embed&amp;utm_source=gnugat.github.io">A year with Symfony</a>.</p>
<p>The FrameworkBundle takes care of registering the listeners using the
Dependency Injection Container (DIC): we declare our listener as a service in
the configuration, with a specific tag.</p>
<p><strong>Note</strong>: the DIC can retrieve all the services with the given tag using
<code>findTaggedServiceIds</code>, making it easier to register listeners for example
(this is done in <code>Symfony\Component\EventDispatcher\DependencyInjection\RegisterListenersPass</code>
which is called in the <a href="https://github.com/symfony/symfony/blob/f940d92a32e4d70cbe045ab8e1b3c70d3eb6061e/src/Symfony/Bundle/FrameworkBundle/FrameworkBundle.php#L71">FrameworkBundle</a>).</p>
<h2 id="submitted-json">Submitted JSON<a href="#submitted-json" class="anchor">#</a></h2>
<p>In <code>QuoteController::submitAction</code>, we need to get the request's content and
convert it from JSON. This is a generic task which should be executed before
every controller: we can move it in an event listener.</p>
<p>First create the directory:</p>
<pre><code>mkdir src/Fortune/ApplicationBundle/EventListener</code></pre>
<p>Then we create the actual listener:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/EventListener/SubmitJsonListener.php

namespace Fortune\ApplicationBundle\EventListener;

use Symfony\Component\HttpKernel\Event\GetResponseEvent;

class SubmitJsonListener
{
    public function onKernelRequest(GetResponseEvent $event)
    {
        $request = $event-&gt;getRequest();
        $content = $request-&gt;getContent();
        $data = json_decode($content, true);
        $request-&gt;request-&gt;add($data ?: array());
    }
}</code></pre>
<p>Next we register it in the Dependency Injection Container:</p>
<pre><code>&lt;?xml version="1.0" ?&gt;
&lt;!-- File: src/Fortune/ApplicationBundle/Resources/config/services.xml --&gt;

&lt;container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd"&gt;
    &lt;services&gt;
        &lt;service id="fortune_application.quote_factory"
            class="Fortune\ApplicationBundle\Entity\QuoteFactory"
        &gt;
        &lt;/service&gt;
        &lt;service id="fortune_application.quote_gateway"
            class="Fortune\ApplicationBundle\Entity\QuoteGateway"
            factory-service="doctrine"
            factory-method="getRepository"&gt;
            &lt;argument&gt;FortuneApplicationBundle:Quote&lt;/argument&gt;
        &lt;/service&gt;
        &lt;service id="fortune_application.quote_repository"
            class="Fortune\ApplicationBundle\Entity\QuoteRepository"
        &gt;
            &lt;argument type="service" id="fortune_application.quote_gateway" /&gt;
            &lt;argument type="service" id="fortune_application.quote_factory" /&gt;
        &lt;/service&gt;
        &lt;service id="fortune_application.submit_json_listener"
            class="Fortune\ApplicationBundle\EventListener\SubmitJsonListener"
        &gt;
            &lt;tag name="kernel.event_listener" event="kernel.request" method="onKernelRequest" /&gt;
        &lt;/service&gt;
    &lt;/services&gt;
&lt;/container&gt;</code></pre>
<p>And finally we update the controller:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Controller/QuoteController.php

namespace Fortune\ApplicationBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;

class QuoteController extends Controller
{
    public function submitAction(Request $request)
    {
        $postedValues = $request-&gt;request-&gt;all();
        if (empty($postedValues['content'])) {
            $answer = array('message' =&gt; 'Missing required parameter: content');

            return new JsonResponse($answer, Response::HTTP_UNPROCESSABLE_ENTITY);
        }
        $quoteRepository = $this-&gt;container-&gt;get('fortune_application.quote_repository');
        $quote = $quoteRepository-&gt;insert($postedValues['content']);

        return new JsonResponse($quote, Response::HTTP_CREATED);
    }

    public function listAction(Request $request)
    {
        $quoteRepository = $this-&gt;container-&gt;get('fortune_application.quote_repository');
        $quotes = $quoteRepository-&gt;findAll();

        return new JsonResponse($quotes, Response::HTTP_OK);
    }
}</code></pre>
<p>We can now run the tests:</p>
<pre><code>./vendor/bin/phpunit -c app</code></pre>
<p>No regression detected! We can commit our work:</p>
<pre><code>git add -A
git ci -m 'Used event'</code></pre>
<p><strong>Note</strong>: The <a href="https://github.com/FriendsOfSymfony/FOSRestBundle">FOSRestBundle</a>
provides such an event listener. We're only creating it manually here to learn
about events.</p>
<h2 id="managing-errors-in-a-listener">Managing errors in a listener<a href="#managing-errors-in-a-listener" class="anchor">#</a></h2>
<p>If someone submits a malformed JSON, our listener can stop the execution and
return a proper response:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/EventListener/SubmitJsonListener.php

namespace Fortune\ApplicationBundle\EventListener;

use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpKernel\Event\GetResponseEvent;

class SubmitJsonListener
{
    public function onKernelRequest(GetResponseEvent $event)
    {
        $request = $event-&gt;getRequest();
        $content = $request-&gt;getContent();
        $data = json_decode($content, true);
        if (JSON_ERROR_NONE !== json_last_error()) {
            $data = array('message' =&gt; 'Invalid or malformed JSON');
            $response = new JsonResponse($data, Response::HTTP_BAD_REQUEST);
            $event-&gt;setResponse($response);
            $event-&gt;stopPropagation();
        }
        $request-&gt;request-&gt;add($data ?: array());
    }
}</code></pre>
<p>By setting a response in the event, the <code>HttpKernel</code> will almost stop (it
dispatches a <code>kernel.response</code> event and an extra <code>kernel.finish_request</code> event)
and return it.</p>
<p>By using <code>stopPropagation</code>, we prevent further <code>kernel.request</code> listeners from
being executed.</p>
<p>Have a look at <a href="https://github.com/symfony/symfony/blob/f940d92a32e4d70cbe045ab8e1b3c70d3eb6061e/src/Symfony/Component/HttpKernel/HttpKernel.php#L120">HttpKernel::handleRaw</a>
to discover what's going on.</p>
<p>Let's run the tests one last time:</p>
<pre><code>./vendor/bin/phpunit -c app</code></pre>
<p>All green, we can commit our work:</p>
<pre><code>git add -A
git ci -m 'Handled errors'</code></pre>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Events are a powerful way to extend the framework: you create a listener,
register it on a specific event and you're done.</p>
<p>Kernel events aren't the only ones available:
<a href="http://doctrine-orm.readthedocs.org/en/latest/reference/events.html">Doctrine provides its own</a>,
(it uses its own event dispatcher library)
<a href="http://symfony.com/doc/current/components/form/form_events.html">the Symfony2 Form Component uses them</a>
and we could even <a href="http://isometriks.com/symfony2-custom-events">create our own events</a>!</p>
<p>The only drawback is that they're sort of hidden: by looking at the controller's
code we cannot know that submitted JSON has been handled, we lose explicitness.</p>
<p>The next article will be about annotations.</p>
<h3 id="next-articles">Next articles<a href="#next-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/09/10/master-sf2-part-6-annotations.html">6: Annotations</a></li>
<li><a href="../../../2014/10/08/master-sf2-conclusion.html">Conclusion</a></li>
</ul><h3 id="previous-articles">Previous articles<a href="#previous-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/08/05/master-sf2-part-1-bootstraping.html">1: Bootstraping</a></li>
<li><a href="../../../2014/08/13/master-sf2-part-2-tdd.html">2: TDD</a></li>
<li><a href="../../../2014/08/22/master-sf2-part-3-services.html">3: Services</a></li>
<li><a href="../../../2014/08/27/master-sf2-part-4-doctrine.html">4: Doctrine</a></li>
</ul>]]></content>
    </entry>
        <entry>
        <title>Master Symfony2 - part 4: Doctrine</title>
                <id>http://gnugat.github.io/2014/08/27/master-sf2-part-4-doctrine.html</id>
                <updated>2014-08-27T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/08/27/master-sf2-part-4-doctrine.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>This is the fourth article of the series on mastering the
<a href="http://symfony.com/">Symfony2</a> framework. Have a look at the three first ones:</p>
<ul><li><a href="../../../2014/08/05/master-sf2-part-1-bootstraping.html">1: Bootstraping</a></li>
<li><a href="../../../2014/08/13/master-sf2-part-2-tdd.html">2: TDD</a></li>
<li><a href="../../../2014/08/22/master-sf2-part-3-services.html">3: Services</a></li>
</ul><p>In the previous articles we created an API allowing us to submit and list
quotes:</p>
<pre><code>.
&#9500;&#9472;&#9472; app
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; AppKernel.php
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; cache
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; .gitkeep
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config_prod.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config_test.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; parameters.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; parameters.yml.dist
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; routing.yml
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; logs
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; .gitkeep
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; phpunit.xml.dist
&#9500;&#9472;&#9472; composer.json
&#9500;&#9472;&#9472; composer.lock
&#9500;&#9472;&#9472; src
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; Fortune
&#9474;&nbsp;&nbsp;     &#9492;&#9472;&#9472; ApplicationBundle
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; Controller
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; QuoteController.php
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; DependencyInjection
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; FortuneApplicationExtension.php
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; Entity
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; QuoteFactory.php
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; QuoteGateway.php
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; Quote.php
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; QuoteRepository.php
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; FortuneApplicationBundle.php
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; Resources
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; config
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp;     &#9492;&#9472;&#9472; services.xml
&#9474;&nbsp;&nbsp;         &#9492;&#9472;&#9472; Tests
&#9474;&nbsp;&nbsp;             &#9500;&#9472;&#9472; Controller
&#9474;&nbsp;&nbsp;             &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; QuoteControllerTest.php
&#9474;&nbsp;&nbsp;             &#9492;&#9472;&#9472; Entity
&#9474;&nbsp;&nbsp;                 &#9492;&#9472;&#9472; QuoteRepositoryTest.php
&#9492;&#9472;&#9472; web
    &#9492;&#9472;&#9472; app.php</code></pre>
<p>Here's the <a href="https://github.com/gnugat/mastering-symfony2">repository where you can find the actual code</a>.</p>
<p>In this one we'll use real database persistence using
<a href="http://www.doctrine-project.org/projects/orm.html">Doctrine ORM</a>, a third party
bundle, the command line console and a mocking library.</p>
<p><strong>Note</strong>: Symfony2 isn't coupled to any ORM or database library. We could use
anything else like <a href="http://php.net/manual/en/book.pdo.php">PDO</a>,
<a href="http://propelorm.org/">Propel ORM</a>, <a href="http://www.pomm-project.org/">POMM</a>, or
anything you want!</p>
<h2 id="installing-doctrinebundle">Installing DoctrineBundle<a href="#installing-doctrinebundle" class="anchor">#</a></h2>
<p>Just like Symfony, Doctrine is composed of many libraries which can be used
separately. The two main ones are:</p>
<ul><li>the DataBase Abstraction Layer (DBAL), provides a unique API for many database
vendors (MySQL, PostgreSQL, Oracle, etc)</li>
<li>the Object Relation Mapping (ORM), provides an object oriented way to depict
the data (which are usually relational)</li>
</ul><p>DoctrineBundle registers the library's services into our Dependency Injection
Container. It can be installed quickly:</p>
<pre><code>composer require 'doctrine/doctrine-bundle:~1.2'</code></pre>
<p>The bundle doesn't force you to use the ORM (you can simply use the DBAL), so we
need to explicitly install it:</p>
<pre><code>composer require 'doctrine/orm:~2.2,&gt;=2.2.3'</code></pre>
<p>The bundle has to be registered in our application:</p>
<pre><code>&lt;?php
// File: app/AppKernel.php

use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Config\Loader\LoaderInterface;

class AppKernel extends Kernel
{
    public function registerBundles()
    {
        return array(
            new Symfony\Bundle\FrameworkBundle\FrameworkBundle(),
            new Fortune\ApplicationBundle\FortuneApplicationBundle(),
            new Doctrine\Bundle\DoctrineBundle\DoctrineBundle(),
        );
    }

    public function registerContainerConfiguration(LoaderInterface $loader)
    {
        $loader-&gt;load(__DIR__.'/config/config_'.$this-&gt;getEnvironment().'.yml');
    }
}</code></pre>
<p>Its services depend on some configuration parameters, which we will add:</p>
<pre><code># File: app/config/config.yml
imports:
    - { resource: parameters.yml }
    - { resource: doctrine.yml }

framework:
    secret: %secret%
    router:
        resource: %kernel.root_dir%/config/routing.yml</code></pre>
<p>Next we create the actual configuration:</p>
<pre><code># File: app/config/doctrine.yml
doctrine:
    dbal:
        driver: pdo_mysql
        host: 127.0.0.1
        port: ~
        dbname: %database_name%
        user: %database_user%
        password: %database_password%
        charset: UTF8

    orm:
        auto_generate_proxy_classes: %kernel.debug%
        auto_mapping: true</code></pre>
<p><strong>Note</strong>: the <code>~</code> value is equivalent to <code>null</code> in PHP.</p>
<p>The values surrounded by <code>%</code> will be replaced by parameters coming from the DIC.
For example, <code>kernel.debug</code> is set by the FrameworkBundle. We'll set the values
of the database ones in the following file:</p>
<pre><code># File: app/config/parameters.yml
parameters:
    secret: hazuZRqYGdRrL8ATdB8kAqBZ

    database_name: fortune
    database_user: root
    database_password: ~</code></pre>
<p>For security reason, this file is not commited. You can update the distributed
file though, so your team will know that they need to set a value:</p>
<pre><code># File: app/config/parameters.yml.dist
parameters:
    secret: ChangeMePlease

    database_name: fortune
    database_user: root
    database_password: ~</code></pre>
<h2 id="configuring-the-schema">Configuring the schema<a href="#configuring-the-schema" class="anchor">#</a></h2>
<p>The first thing we need is to define the schema (tables with their fields), so
we'll create this directory:</p>
<pre><code>mkdir src/Fortune/ApplicationBundle/Resources/config/doctrine</code></pre>
<p>And then the configuration file for the <code>Quote</code> entity:</p>
<pre><code># src/Fortune/ApplicationBundle/Resources/config/doctrine/Quote.orm.yml
Fortune\ApplicationBundle\Entity\Quote:
    type: entity
    repositoryClass: Fortune\ApplicationBundle\Entity\QuoteGateway
    table: quote
    id:
        id:
            type: integer
            generator:
                strategy: AUTO
    fields:
        content:
            type: text
        createdAt:
            type: datetime
            column: created_at</code></pre>
<p><strong>Note</strong>: Doctrine uses the word "Repository" with a different meaning than the
Repository design pattern (the one with gateway and factory). In our case it
corresponds to the gateway.</p>
<p>As you can see, we've added a <code>createdAt</code> attribute to our entity. Let's update
its code:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Entity/Quote.php

namespace Fortune\ApplicationBundle\Entity;

class Quote
{
    private $id;
    private $content;
    private $createdAt;

    public function __construct($id, $content)
    {
        $this-&gt;id = $id;
        $this-&gt;content = $content;
        $this-&gt;createdAt = new \DateTime();
    }

    public static function fromContent($content)
    {
        return new Quote(null, $content);
    }

    public function getId()
    {
        return $this-&gt;id;
    }

    public function getContent()
    {
        return $this-&gt;content;
    }

    public function getCreatedAt()
    {
        return $this-&gt;createdAt;
    }
}</code></pre>
<p><strong>Note</strong>: We've added <a href="http://verraes.net/2014/06/named-constructors-in-php/">a named constructor</a>
which will prove usefull with the gateway.</p>
<h2 id="creating-the-console">Creating the console<a href="#creating-the-console" class="anchor">#</a></h2>
<p>Symfony2 provides a powerful <a href="http://symfony.com/doc/current/components/console/introduction.html">Console Component</a>
allowing you to create command line utilities. It can be used standalone, or
in the full stack framework thanks to the FrameworkBundle. To create the
console, we just need to create the following file:</p>
<pre><code>#!/usr/bin/env php
&lt;?php
// File: app/console

set_time_limit(0);

require_once __DIR__.'/../vendor/autoload.php';
require_once __DIR__.'/AppKernel.php';

use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;

$input = new ArgvInput();
$kernel = new AppKernel('dev', true);
$application = new Application($kernel);
$application-&gt;run($input);</code></pre>
<p>The object <code>ArgvInput</code> contains the input given by the user (command name,
arguments and options). Bundles can register commands in the application by
fetching them from their <code>Command</code> directory.</p>
<p>We can now create the database and schema easily:</p>
<pre><code>php app/console doctrine:database:create
php app/console doctrine:schema:create</code></pre>
<p><strong>Note</strong>: Those are useful when developing the application, but shouldn't be used in
production.</p>
<p><strong>Note</strong>: If you want to learn more about the Symfony2 Console Component,
<a href="../../../2014/04/09/sf2-console-component-by-example.html">you can read this article</a>.</p>
<h2 id="adapting-the-gateway">Adapting the Gateway<a href="#adapting-the-gateway" class="anchor">#</a></h2>
<p>Until now, our <code>QuoteGateway</code> was saving and retrieving the quotes from a file.
We'll update it to be a Doctrine Repository:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Entity/QuoteGateway.php

namespace Fortune\ApplicationBundle\Entity;

use Doctrine\ORM\EntityRepository;

class QuoteGateway extends EntityRepository
{
    public function insert($content)
    {
        $entityManager = $this-&gt;getEntityManager();

        $quote = Quote::fromContent($content);
        $entityManager-&gt;persist($quote);
        $entityManager-&gt;flush();

        return $quote;
    }
}</code></pre>
<p>The <code>EntityManager</code> object does the actual persistence and will set the quote's
ID. The <code>EntityRepository</code> already has a <code>findAll</code> method, so we can remove it.</p>
<p>The last thing we need is to update the DIC's configuration:</p>
<pre><code>&lt;?xml version="1.0" ?&gt;
&lt;!-- File: src/Fortune/ApplicationBundle/Resources/config/services.xml --&gt;

&lt;container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd"&gt;
    &lt;services&gt;
        &lt;service id="fortune_application.quote_factory"
            class="Fortune\ApplicationBundle\Entity\QuoteFactory"
        &gt;
        &lt;/service&gt;
        &lt;service id="fortune_application.quote_gateway"
            class="Fortune\ApplicationBundle\Entity\QuoteGateway"
            factory-service="doctrine"
            factory-method="getRepository"&gt;
            &lt;argument&gt;FortuneApplicationBundle:Quote&lt;/argument&gt;
        &lt;/service&gt;
        &lt;service id="fortune_application.quote_repository"
            class="Fortune\ApplicationBundle\Entity\QuoteRepository"
        &gt;
            &lt;argument type="service" id="fortune_application.quote_gateway" /&gt;
            &lt;argument type="service" id="fortune_application.quote_factory" /&gt;
        &lt;/service&gt;
    &lt;/services&gt;
&lt;/container&gt;</code></pre>
<p>The <code>doctrine</code> service manages the Doctrine Repositories. To manually get a
repository you'd need to do somethig like
<code>$container-&gt;get('doctrine')-&gt;getRepository('FortuneApplicationBundle:QuoteGateway')</code>,
the <code>factory-service</code> and <code>factory-method</code> attributes allow us to simply call
container-&gt;get('fortune_application.quote_gateway')`.</p>
<h2 id="mocking-the-database">Mocking the database<a href="#mocking-the-database" class="anchor">#</a></h2>
<p>Database operations can be slow however we want our tests to run as fast as
possible: <a href="http://blog.8thlight.com/uncle-bob/2014/05/10/WhenToMock.html">this is a good opportunity to use a test double</a>.</p>
<p>PHPUnit comes with its own mocking library, but we'll use a less verbose and
more one: <a href="https://github.com/phpspec/prophecy">Prophecy</a>. First we install
the PHPUnit integration of Prophecy:</p>
<pre><code>composer require --dev 'phpspec/prophecy-phpunit:~1.0'</code></pre>
<p>Then we update our test:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Tests/Entity/QuoteRepositoryTest.php

namespace Fortune\ApplicationBundle\Tests\Entity;

use Fortune\ApplicationBundle\Entity\Quote;
use Fortune\ApplicationBundle\Entity\QuoteFactory;
use Fortune\ApplicationBundle\Entity\QuoteGateway;
use Fortune\ApplicationBundle\Entity\QuoteRepository;
use Prophecy\PhpUnit\ProphecyTestCase;

class QuoteRepositoryTest extends ProphecyTestCase
{
    const ID = 42;
    const CONTENT = '&lt;KnightOfNi&gt; Ni!';

    private $gateway;
    private $repository;

    public function setUp()
    {
        parent::setUp();
        $gatewayClassname = 'Fortune\ApplicationBundle\Entity\QuoteGateway';
        $this-&gt;gateway = $this-&gt;prophesize($gatewayClassname);
        $factory = new QuoteFactory();
        $this-&gt;repository = new QuoteRepository($this-&gt;gateway-&gt;reveal(), $factory);
    }

    public function testItPersistsTheQuote()
    {
        $quote = new Quote(self::ID, self::CONTENT);
        $this-&gt;gateway-&gt;insert(self::CONTENT)-&gt;willReturn($quote);
        $this-&gt;repository-&gt;insert(self::CONTENT);

        $this-&gt;gateway-&gt;findAll()-&gt;willReturn(array($quote));
        $quotes = $this-&gt;repository-&gt;findAll();
        $foundQuote = $quotes['quotes'][self::ID];

        $this-&gt;assertSame(self::CONTENT, $foundQuote['content']);
    }
}</code></pre>
<p>We created a mock of <code>QuoteGateway</code> which returns a quote we created beforehand.</p>
<p>Our changes are finished, let's run the tests:</p>
<pre><code>./vendor/bin/phpunit -c app</code></pre>
<p>No regression detected! We can commit our work:</p>
<pre><code>git add -A
git ci -m 'Added doctrine'</code></pre>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Doctrine allows us to persist the data, its bundle integrates it smoothly into
our application and provides us with handy command line tools.</p>
<p>You can have a look at <a href="http://docs.doctrine-project.org/projects/doctrine-migrations/en/latest/reference/introduction.html">Doctrine Migration</a>,
a standalone library allowing you to deploy database changes, it even has
<a href="http://symfony.com/doc/current/bundles/DoctrineMigrationsBundle/index.html">a bundle</a>.</p>
<p>In the next article, we'll talk about how to extend the framework using events.</p>
<h3 id="next-articles">Next articles<a href="#next-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/09/03/master-sf2-part-5-events.html">5: Events</a></li>
<li><a href="../../../2014/09/10/master-sf2-part-6-annotations.html">6: Annotations</a></li>
<li><a href="../../../2014/10/08/master-sf2-conclusion.html">Conclusion</a></li>
</ul><h3 id="previous-articles">Previous articles<a href="#previous-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/08/05/master-sf2-part-1-bootstraping.html">1: Bootstraping</a></li>
<li><a href="../../../2014/08/13/master-sf2-part-2-tdd.html">2: TDD</a></li>
<li><a href="../../../2014/08/22/master-sf2-part-3-services.html">3: Services</a></li>
</ul>]]></content>
    </entry>
        <entry>
        <title>Master Symfony2 - part 3: Services</title>
                <id>http://gnugat.github.io/2014/08/22/master-sf2-part-3-services.html</id>
                <updated>2014-08-22T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/08/22/master-sf2-part-3-services.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>This is the third article of the series on mastering the
<a href="http://symfony.com/">Symfony2</a> framework. Have a look at the two first ones:</p>
<ul><li><a href="../../../2014/08/05/master-sf2-part-1-bootstraping.html">1: Bootstraping</a></li>
<li><a href="../../../2014/08/13/master-sf2-part-2-tdd.html">2: TDD</a></li>
</ul><p>In the previous articles we created an API allowing us to submit new quotes:</p>
<pre><code>.
&#9500;&#9472;&#9472; app
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; AppKernel.php
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; cache
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; .gitkeep
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config_prod.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config_test.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; parameters.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; parameters.yml.dist
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; routing.yml
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; logs
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; .gitkeep
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; phpunit.xml.dist
&#9500;&#9472;&#9472; composer.json
&#9500;&#9472;&#9472; composer.lock
&#9500;&#9472;&#9472; src
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; Fortune
&#9474;&nbsp;&nbsp;     &#9492;&#9472;&#9472; ApplicationBundle
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; Controller
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; QuoteController.php
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; FortuneApplicationBundle.php
&#9474;&nbsp;&nbsp;         &#9492;&#9472;&#9472; Tests
&#9474;&nbsp;&nbsp;             &#9492;&#9472;&#9472; Controller
&#9474;&nbsp;&nbsp;                 &#9492;&#9472;&#9472; QuoteControllerTest.php
&#9492;&#9472;&#9472; web
    &#9492;&#9472;&#9472; app.php</code></pre>
<p>Here's the <a href="https://github.com/gnugat/mastering-symfony2">repository where you can find the actual code</a>.</p>
<p>In this one we'll list the existing quotes and learn about entities, services,
the repository design pattern and dependency injection.</p>
<h2 id="defining-the-second-user-story">Defining the second User Story<a href="#defining-the-second-user-story" class="anchor">#</a></h2>
<p>By the time we finished to implement the first User Story, Nostradamus (our
customer and product owner) wrote the second one:</p>
<pre><code>As a User
I want to be able to read the available quotes
In order to find interesting ones</code></pre>
<p>Currently we don't persist our quotes, but now we will need to. However I'd like
to dedicate a separate article to database persistence, so we will save our
quotes in a file and concentrate on services.</p>
<h2 id="the-quote-entity">The quote entity<a href="#the-quote-entity" class="anchor">#</a></h2>
<p>Until now we wrote our code in the controller and it was ok, as there wasn't
much code. But now our application will grow, so we need to put the code
elsewhere: in the services.</p>
<p>Basically a service is just a class which does one thing (and does it well).
They are stateless, which means that calling a method many times with the same
parameter should always return the same value.</p>
<p>They manipulate entities which are classes representing the data. Those don't
have any behavior. Let's create the <code>Entity</code> directory:</p>
<pre><code>mkdir src/Fortune/ApplicationBundle/Entity</code></pre>
<p>And now we'll write the <code>Quote</code> entity:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Entity/Quote.php

namespace Fortune\ApplicationBundle\Entity;

class Quote
{
    private $id;
    private $content;

    public function __construct($id, $content)
    {
        $this-&gt;id = $id;
        $this-&gt;content = $content;
    }

    public function getId()
    {
        return $this-&gt;id;
    }

    public function getContent()
    {
        return $this-&gt;content;
    }
}</code></pre>
<p>There's no need to write a unit test for it: it doesn't contain any logic. The
tests of its services (which manipulate it) will be enough.</p>
<h2 id="the-repository-service">The repository service<a href="#the-repository-service" class="anchor">#</a></h2>
<p>We'll create a persistence service which will follow the
<a href="http://code.tutsplus.com/tutorials/the-repository-design-pattern--net-35804">Repository design pattern</a>:
the repository calls a gateway to retreive some raw data and transforms it using
a factory.</p>
<p>Before creating it, we will write a unit test which will help us to specify how
it should work. Here's its directory:</p>
<pre><code>mkdir src/Fortune/ApplicationBundle/Tests/Entity</code></pre>
<p>And its code:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Tests/Entity/QuoteRepositoryTest.php

namespace Fortune\ApplicationBundle\Tests\Entity;

use Fortune\ApplicationBundle\Entity\QuoteFactory;
use Fortune\ApplicationBundle\Entity\QuoteGateway;
use Fortune\ApplicationBundle\Entity\QuoteRepository;

class QuoteRepositoryTest extends \PHPUnit_Framework_TestCase
{
    const CONTENT = '&lt;KnightOfNi&gt; Ni!';

    private $repository;

    public function setUp()
    {
        $filename = '/tmp/fortune_database_test.txt';
        $gateway = new QuoteGateway($filename);
        $factory = new QuoteFactory();
        $this-&gt;repository = new QuoteRepository($gateway, $factory);
    }

    public function testItPersistsTheQuote()
    {
        $quote = $this-&gt;repository-&gt;insert(self::CONTENT);
        $id = $quote['quote']['id'];
        $quotes = $this-&gt;repository-&gt;findAll();
        $foundQuote = $quotes['quotes'][$id];

        $this-&gt;assertSame(self::CONTENT, $foundQuote['content']);
    }
}</code></pre>
<p>Now we can create the class which should make the test pass:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Entity/QuoteRepository.php

namespace Fortune\ApplicationBundle\Entity;

class QuoteRepository
{
    private $gateway;
    private $factory;

    public function __construct(QuoteGateway $gateway, QuoteFactory $factory)
    {
        $this-&gt;gateway = $gateway;
        $this-&gt;factory = $factory;
    }

    public function insert($content)
    {
        $quote = $this-&gt;gateway-&gt;insert($content);

        return $this-&gt;factory-&gt;makeOne($quote);
    }

    public function findAll()
    {
        $quotes = $this-&gt;gateway-&gt;findAll();

        return $this-&gt;factory-&gt;makeAll($quotes);
    }
}</code></pre>
<p>See what we've done in the constructor? That's dependency injection (passing
arguments on which the class relies).</p>
<p><strong>Note</strong>: for more information about the Dependency Injection,
<a href="../../../2014/01/22/ioc-di-and-service-locator.html">you can read this article</a>.</p>
<h3 id="the-gateway-service">The gateway service<a href="#the-gateway-service" class="anchor">#</a></h3>
<p>The gateway is the class where the actual persistence is done:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Entity/QuoteGateway.php

namespace Fortune\ApplicationBundle\Entity;

class QuoteGateway
{
    private $filename;

    public function __construct($filename)
    {
        $this-&gt;filename = $filename;
    }

    public function insert($content)
    {
        $content = trim($content);
        $line = $content."\n";
        file_put_contents($this-&gt;filename, $line, FILE_APPEND);
        $lines = file($this-&gt;filename);
        $lineNumber = count($lines) - 1;

        return new Quote($lineNumber, $content);
    }

    public function findAll()
    {
        $contents = file($this-&gt;filename);
        foreach ($contents as $id =&gt; $content) {
            $quotes[$id] = new Quote($id, trim($content));
        }

        return $quotes;
    }
}</code></pre>
<p>Wait a minute, we didn't write any test for this class! Well, that's because
<code>QuoteRepositoryTest</code> already covers it.</p>
<h2 id="the-factory-service">The factory service<a href="#the-factory-service" class="anchor">#</a></h2>
<p>The factroy converts the object returned by the gateway to something usable by
the controller (a JSONable array):</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Entity/QuoteFactory.php

namespace Fortune\ApplicationBundle\Entity;

class QuoteFactory
{
    public function makeOne(Quote $rawQuote)
    {
        return array('quote' =&gt; $this-&gt;make($rawQuote));
    }

    public function makeAll(array $rawQuotes)
    {
        foreach ($rawQuotes as $rawQuote) {
            $quotes['quotes'][$rawQuote-&gt;getId()] = $this-&gt;make($rawQuote);
        }

        return $quotes;
    }

    private function make(Quote $rawQuote)
    {
        return array(
            'id' =&gt; $rawQuote-&gt;getId(),
            'content' =&gt; $rawQuote-&gt;getContent(),
        );
    }
}</code></pre>
<p>No unit test for this factory: the one for the repository already covers it.
Now that the code is written, we can check that the test pass:</p>
<pre><code>./vendor/bin/phpunit -c app</code></pre>
<h2 id="using-the-service-in-the-controller">Using the service in the controller<a href="#using-the-service-in-the-controller" class="anchor">#</a></h2>
<p>The controller responsibility is to retrieve the parameters from the request,
inject them in a service and then use its return value to create a response.
We won't construct directly the <code>QuoteRepository</code> service in the controller:
Symfony2 comes with a <a href="http://symfony.com/doc/current/components/dependency_injection/introduction.html">Dependency Injection Container</a> (DIC).
In a nutshell when you ask the container a service, it will construct it for
you.</p>
<p>The first thing we need is to prepare the bundle by creating the following
directories:</p>
<pre><code>mkdir src/Fortune/ApplicationBundle/DependencyInjection
mkdir -p src/Fortune/ApplicationBundle/Resources/config</code></pre>
<p>Then we need to create a class which will load the bundle's services into the
DIC:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/DependencyInjection/FortuneApplicationExtension.php

namespace Fortune\ApplicationBundle\DependencyInjection;

use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\Config\FileLocator;
use Symfony\Component\HttpKernel\DependencyInjection\Extension;
use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;

class FortuneApplicationExtension extends Extension
{
    public function load(array $configs, ContainerBuilder $container)
    {
        $fileLocator = new FileLocator(__DIR__.'/../Resources/config');
        $loader = new XmlFileLoader($container, $fileLocator);

        $loader-&gt;load('services.xml');
    }
}</code></pre>
<p>As you can see, we told the extension to look for a configuration file. Here it
is:</p>
<pre><code>&lt;?xml version="1.0" ?&gt;
&lt;!-- File: src/Fortune/ApplicationBundle/Resources/config/services.xml --&gt;

&lt;container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd"&gt;
    &lt;services&gt;
        &lt;service id="fortune_application.quote_factory"
            class="Fortune\ApplicationBundle\Entity\QuoteFactory"
        &gt;
        &lt;/service&gt;
        &lt;service id="fortune_application.quote_gateway"
            class="Fortune\ApplicationBundle\Entity\QuoteGateway"
        &gt;
            &lt;argument&gt;/tmp/fortune_database.txt&lt;/argument&gt;
        &lt;/service&gt;
        &lt;service id="fortune_application.quote_repository"
            class="Fortune\ApplicationBundle\Entity\QuoteRepository"
        &gt;
            &lt;argument type="service" id="fortune_application.quote_gateway" /&gt;
            &lt;argument type="service" id="fortune_application.quote_factory" /&gt;
        &lt;/service&gt;
    &lt;/services&gt;
&lt;/container&gt;</code></pre>
<p>Now <code>QuoteRepository</code> is available in the controller:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Controller/QuoteController.php

namespace Fortune\ApplicationBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;

class QuoteController extends Controller
{
    public function submitAction(Request $request)
    {
        $postedContent = $request-&gt;getContent();
        $postedValues = json_decode($postedContent, true);
        if (empty($postedValues['content'])) {
            $answer = array('message' =&gt; 'Missing required parameter: content');

            return new JsonResponse($answer, Response::HTTP_UNPROCESSABLE_ENTITY);
        }
        $quoteRepository = $this-&gt;container-&gt;get('fortune_application.quote_repository');
        $quote = $quoteRepository-&gt;insert($postedValues['content']);

        return new JsonResponse($quote, Response::HTTP_CREATED);
    }
}</code></pre>
<p>We can now make sure that everything is fine by running the tests:</p>
<pre><code>./vendor/bin/phpunit -c app</code></pre>
<p><strong>Note</strong>: for more information about Symfony2 Dependency Injection Component
<a href="../../../2014/01/29/sf2-di-component-by-example.html">you can read this article</a>.</p>
<h2 id="listing-quotes">Listing quotes<a href="#listing-quotes" class="anchor">#</a></h2>
<p>It's now time to fulfill the second user story, starting with a functional test:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Tests/Controller/QuoteControllerTest.php

namespace Fortune\ApplicationBundle\Tests\Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\Response;

class QuoteControllerTest extends WebTestCase
{
    private function post($uri, array $data)
    {
        $headers = array('CONTENT_TYPE' =&gt; 'application/json');
        $content = json_encode($data);
        $client = static::createClient();
        $client-&gt;request('POST', $uri, array(), array(), $headers, $content);

        return $client-&gt;getResponse();
    }

    private function get($uri)
    {
        $headers = array('CONTENT_TYPE' =&gt; 'application/json');
        $client = static::createClient();
        $client-&gt;request('GET', $uri, array(), array(), $headers);

        return $client-&gt;getResponse();
    }

    public function testSubmitNewQuote()
    {
        $response = $this-&gt;post('/api/quotes', array('content' =&gt; '&lt;KnightOfNi&gt; Ni!'));

        $this-&gt;assertSame(Response::HTTP_CREATED, $response-&gt;getStatusCode());
    }

    public function testSubmitEmptyQuote()
    {
        $response = $this-&gt;post('/api/quotes', array('content' =&gt; ''));

        $this-&gt;assertSame(Response::HTTP_UNPROCESSABLE_ENTITY, $response-&gt;getStatusCode());
    }

    public function testSubmitNoQuote()
    {
        $response = $this-&gt;post('/api/quotes', array());

        $this-&gt;assertSame(Response::HTTP_UNPROCESSABLE_ENTITY, $response-&gt;getStatusCode());
    }

    public function testListingAllQuotes()
    {
        $response = $this-&gt;get('/api/quotes');

        $this-&gt;assertSame(Response::HTTP_OK, $response-&gt;getStatusCode());
    }
}</code></pre>
<p>The next step is to update the configuration:</p>
<pre><code># File: app/config/routing.yml
submit_quote:
    path: /api/quotes
    methods:
        - POST
    defaults:
        _controller: FortuneApplicationBundle:Quote:submit

list_quotes:
    path: /api/quotes
    methods:
        - GET
    defaults:
        _controller: FortuneApplicationBundle:Quote:list</code></pre>
<p>Then we write the action:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Controller/QuoteController.php

namespace Fortune\ApplicationBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;

class QuoteController extends Controller
{
    public function submitAction(Request $request)
    {
        $quoteRepository = $this-&gt;container-&gt;get('fortune_application.quote_repository');
        $postedContent = $request-&gt;getContent();
        $postedValues = json_decode($postedContent, true);

        if (empty($postedValues['content'])) {
            $answer = array('message' =&gt; 'Missing required parameter: content');

            return new JsonResponse($answer, Response::HTTP_UNPROCESSABLE_ENTITY);
        }
        $quote = $quoteRepository-&gt;insert($postedValues['content']);

        return new JsonResponse($quote, Response::HTTP_CREATED);
    }

    public function listAction(Request $request)
    {
        $quoteRepository = $this-&gt;container-&gt;get('fortune_application.quote_repository');
        $quotes = $quoteRepository-&gt;findAll();

        return new JsonResponse($quotes, Response::HTTP_OK);
    }
}</code></pre>
<p>And finally we run the tests:</p>
<pre><code>./vendor/bin/phpunit -c app</code></pre>
<p>Everything is fine, we can commit:</p>
<pre><code>git add -A
git ci -m 'Added listing of quotes'</code></pre>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Services is where the logic should be. Those manipulate entities, which carry
the data. We used the repository design pattern which is very handy for APIs:
it calls a gateway which retrieves raw data and then convert it using a factory,
so the controller only needs to comunicate with the repository. Finally, we saw
that "Dependency Injection" is just a fancy term for "passing arguments".</p>
<p>In the next article, we'll learn use database persistence, using
<a href="http://www.doctrine-project.org/projects/orm.html">Doctrine2 ORM</a>.</p>
<h3 id="next-articles">Next articles<a href="#next-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/08/27/master-sf2-part-4-doctrine.html">4: Doctrine</a></li>
<li><a href="../../../2014/09/03/master-sf2-part-5-events.html">5: Events</a></li>
<li><a href="../../../2014/09/10/master-sf2-part-6-annotations.html">6: Annotations</a></li>
<li><a href="../../../2014/10/08/master-sf2-conclusion.html">Conclusion</a></li>
</ul><h3 id="previous-articles">Previous articles<a href="#previous-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/08/05/master-sf2-part-1-bootstraping.html">1: Bootstraping</a></li>
<li><a href="../../../2014/08/13/master-sf2-part-2-tdd.html">2: TDD</a></li>
</ul>]]></content>
    </entry>
        <entry>
        <title>Master Symfony2 - part 2: Test Driven Development</title>
                <id>http://gnugat.github.io/2014/08/13/master-sf2-part-2-tdd.html</id>
                <updated>2014-08-13T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/08/13/master-sf2-part-2-tdd.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>This is the second article of the series on mastering the
<a href="http://symfony.com/">Symfony2</a> framework. Have a look at the first one:
<a href="../../../2014/08/05/master-sf2-part-1-bootstraping.html">Bootstraping</a>.</p>
<p>In the first article we bootstraped our project with the following files:</p>
<pre><code>.
&#9500;&#9472;&#9472; app
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; AppKernel.php
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; cache
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; .gitkeep
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config_prod.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config_test.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; parameters.yml.dist
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; routing.yml
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; logs
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; .gitkeep
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; phpunit.xml.dist
&#9500;&#9472;&#9472; composer.json
&#9500;&#9472;&#9472; composer.lock
&#9500;&#9472;&#9472; src
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; Fortune
&#9474;&nbsp;&nbsp;     &#9492;&#9472;&#9472; ApplicationBundle
&#9474;&nbsp;&nbsp;         &#9492;&#9472;&#9472; FortuneApplicationBundle.php
&#9492;&#9472;&#9472; web
    &#9492;&#9472;&#9472; app.php</code></pre>
<p>Here's the <a href="https://github.com/gnugat/mastering-symfony2">repository where you can find the actual code</a>.</p>
<p>In this one we'll implement the first User Story, by writing tests first.</p>
<p><strong>Note</strong>: writing tests before writing any code is part of the
<a href="../../../2014/02/19/test-driven-development.html">Test Driven Development (TDD) methodology</a>.</p>
<h2 id="defining-the-user-story">Defining the User Story<a href="#defining-the-user-story" class="anchor">#</a></h2>
<p>With the help of our Scrum Master, our Product Owner (Nostradamus) managed to
write the following user story:</p>
<pre><code>As a User
I want to be able to submit a new quote
In order to make it available</code></pre>
<h2 id="writing-the-test">Writing the test<a href="#writing-the-test" class="anchor">#</a></h2>
<p>Our first reflex will be to write a functional test. First create the directory:</p>
<pre><code>mkdir -p src/Fortune/ApplicationBundle/Tests/Controller</code></pre>
<p>Then the test class:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Tests/Controller/QuoteControllerTest.php

namespace Fortune\ApplicationBundle\Tests\Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\Response;

class QuoteControllerTest extends WebTestCase
{
    private function post($uri, array $data)
    {
        $headers = array('CONTENT_TYPE' =&gt; 'application/json');
        $content = json_encode($data);
        $client = static::createClient();
        $client-&gt;request('POST', $uri, array(), array(), $headers, $content);

        return $client-&gt;getResponse();
    }

    public function testSubmitNewQuote()
    {
        $response = $this-&gt;post('/api/quotes', array('content' =&gt; '&lt;KnightOfNi&gt; Ni!'));

        $this-&gt;assertSame(Response::HTTP_CREATED, $response-&gt;getStatusCode());
    }
}</code></pre>
<h2 id="configuring-the-route">Configuring the route<a href="#configuring-the-route" class="anchor">#</a></h2>
<p>Now we need to link the <code>/quotes</code> URL to a controller, so let's edit the
configuration:</p>
<pre><code># File: app/config/routing.yml
submit_quote:
    path: /api/quotes
    methods:
        - POST
    defaults:
        _controller: FortuneApplicationBundle:Quote:submit</code></pre>
<h2 id="creating-the-controller">Creating the controller<a href="#creating-the-controller" class="anchor">#</a></h2>
<p>There wasn't any controllers until now, so we create the directory:</p>
<pre><code>mkdir src/Fortune/ApplicationBundle/Controller</code></pre>
<p>And finally the controller class:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Controller/QuoteController.php

namespace Fortune\ApplicationBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;

class QuoteController extends Controller
{
    public function submitAction(Request $request)
    {
        $postedContent = $request-&gt;getContent();
        $postedValues = json_decode($postedContent, true);

        $answer['quote']['content'] = $postedValues['content'];

        return new JsonResponse($answer, Response::HTTP_CREATED);
    }
}</code></pre>
<p>Now let's run our tests:</p>
<pre><code>./vendor/bin/phpunit -c app</code></pre>
<p><a href="https://www.youtube.com/watch?v=lFeLDc2CzOs">All green</a>! This makes us
confident enough to commit our work:</p>
<pre><code>git add -A
git commit -m 'Created submission of quotes'</code></pre>
<h2 id="testing-bad-cases">Testing bad cases<a href="#testing-bad-cases" class="anchor">#</a></h2>
<p>The submitted content shouldn't be empty. Let's add a test for the bad cases:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Tests/Controller/QuoteControllerTest.php

namespace Fortune\ApplicationBundle\Tests\Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\Response;

class QuoteControllerTest extends WebTestCase
{
    private function post($uri, array $data)
    {
        $headers = array('CONTENT_TYPE' =&gt; 'application/json');
        $content = json_encode($data);
        $client = static::createClient();
        $client-&gt;request('POST', $uri, array(), array(), $headers, $content);

        return $client-&gt;getResponse();
    }

    public function testSubmitNewQuote()
    {
        $response = $this-&gt;post('/api/quotes', array('content' =&gt; '&lt;KnightOfNi&gt; Ni!'));

        $this-&gt;assertSame(Response::HTTP_CREATED, $response-&gt;getStatusCode());
    }

    public function testSubmitEmptyQuote()
    {
        $response = $this-&gt;post('/api/quotes', array('content' =&gt; ''));

        $this-&gt;assertSame(Response::HTTP_UNPROCESSABLE_ENTITY, $response-&gt;getStatusCode());
    }

    public function testSubmitNoQuote()
    {
        $response = $this-&gt;post('/api/quotes', array());

        $this-&gt;assertSame(Response::HTTP_UNPROCESSABLE_ENTITY, $response-&gt;getStatusCode());
    }
}</code></pre>
<h2 id="checking-bad-cases">Checking bad cases<a href="#checking-bad-cases" class="anchor">#</a></h2>
<p>Now let's fix the new tests:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Controller/QuoteController.php

namespace Fortune\ApplicationBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;

class QuoteController extends Controller
{
    public function submitAction(Request $request)
    {
        $postedContent = $request-&gt;getContent();
        $postedValues = json_decode($postedContent, true);

        if (empty($postedValues['content'])) {
            $answer = array('message' =&gt; 'Missing required parameter: content');

            return new JsonResponse($answer, Response::HTTP_UNPROCESSABLE_ENTITY);
        }
        $answer['quote']['content'] = $postedValues['content'];

        return new JsonResponse($answer, Response::HTTP_CREATED);
    }
}</code></pre>
<p>Finally run the tests:</p>
<pre><code>./vendor/bin/phpunit -c app</code></pre>
<p>All green! Let's call it a day and commit our work:</p>
<pre><code>git add -A
git commit -m 'Managed submission of empty/no quotes'</code></pre>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>For those who didn't practice a lot with Symfony2, this article should have
demonstrated how quick and simple it is to implement the first User Story
(test and code alike).</p>
<p>In the next article, we'll learn how to work with services.</p>
<h3 id="next-articles">Next articles<a href="#next-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/08/22/master-sf2-part-3-services.html">3: Services</a></li>
<li><a href="../../../2014/08/27/master-sf2-part-4-doctrine.html">4: Doctrine</a></li>
<li><a href="../../../2014/09/03/master-sf2-part-5-events.html">5: Events</a></li>
<li><a href="../../../2014/09/10/master-sf2-part-6-annotations.html">6: Annotations</a></li>
<li><a href="../../../2014/10/08/master-sf2-conclusion.html">Conclusion</a></li>
</ul><h3 id="previous-articles">Previous articles<a href="#previous-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/08/05/master-sf2-part-1-bootstraping.html">1: Bootstraping</a></li>
</ul>]]></content>
    </entry>
        <entry>
        <title>Master Symfony2 - part 1: Bootstraping</title>
                <id>http://gnugat.github.io/2014/08/05/master-sf2-part-1-bootstraping.html</id>
                <updated>2014-08-05T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/08/05/master-sf2-part-1-bootstraping.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>You know the basics of the <a href="http://symfony.com/">Symfony2</a> framework
(<a href="https://getcomposer.org/">Composer</a>, empty application, bundle, controller and
functional test with <a href="http://phpunit.de/">PHPUnit</a>) and you want to learn more
about how to extend it (and understanding what you're doing)?</p>
<p>Then this series of articles is for you :) .</p>
<p>If you don't feel confident about the prerequisites, have a look at
<a href="../../../2014/06/18/learn-sf2-composer-part-1.html">the Learn Symfony2 series</a>.
Don't worry, we'll start with a bit of practicing before starting to learn
anything new.</p>
<p>In the first article of this series, we'll discover our cutomer's needs and
we'll bootstrap our application.</p>
<h2 id="our-use-case-creating-a-fortune-application">Our use case: creating a Fortune application<a href="#our-use-case-creating-a-fortune-application" class="anchor">#</a></h2>
<p>In order to have real world examples, we'll need a use case. The Knight of Ni
were pretty satisfied with our previous work, and they recommended us to
Nostradamus!</p>
<p>Nostradamus is a fortune teller and wants to jump on the internet bandwagon. He
wants us to create a
<a href="http://en.wikipedia.org/wiki/Fortune_%28Unix%29">fortune application</a>
where users can submit quotes.</p>
<p>Our first task will be to create an empty application so we can start working.
We could use the <a href="http://symfony.com/distributions">Symfony Standard Edition</a>,
but in order to understand what really happens behind the scene we'll use an
emptier distribution.</p>
<h2 id="installing-symfony2-emptier-edition">Installing Symfony2 Emptier Edition<a href="#installing-symfony2-emptier-edition" class="anchor">#</a></h2>
<p>First make sure to have the last version of <a href="https://getcomposer.org/">Composer</a>
installed:</p>
<pre><code>curl -sS https://getcomposer.org/installer | php
sudo mv composer.phar /usr/local/bin/composer</code></pre>
<p>Then ask Composer to create the boilerplate of our application, using the
<a href="https://github.com/gnugat/sf2-emptier">Symfony2 Emptier Edition</a>:</p>
<pre><code>composer create-project 'gnugat/sf2-emptier' fortune '0.1.*'
cd fortune</code></pre>
<p>This distribution is similar to the empty application we created in the
<a href="../../../2014/06/25/learn-sf2-empty-app-part-2.html">learn Symfony2 series</a>.
It contains the following files:</p>
<pre><code>.
&#9500;&#9472;&#9472; app
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; AppKernel.php
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; cache
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; .gitkeep
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config_prod.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config_test.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; parameters.yml.dist
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; routing.yml
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; logs
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; .gitkeep
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; phpunit.xml.dist
&#9500;&#9472;&#9472; composer.json
&#9500;&#9472;&#9472; LICENSE
&#9500;&#9472;&#9472; README.md
&#9492;&#9472;&#9472; web
    &#9492;&#9472;&#9472; app.php</code></pre>
<p>Remove the documentation files:</p>
<pre><code>rm README.md LICENSE</code></pre>
<p>Change the <code>composer.json</code> information:</p>
<pre><code>{
    "name": "nostradamus/fortune",
    "license": "proprietary",
    "type": "project",
    "description": "A collection of quotes",
    "autoload": {
        "psr-4": { "": "src/" }
    },
    "require": {
        "php": "&gt;=5.3.17",

        "symfony/symfony": "~2.4"
    },
    "require-dev": {
        "phpunit/phpunit": "~4.1"
    }
}</code></pre>
<p>Next you'll have to configure the project specific parameters:</p>
<pre><code>cp app/config/parameters.yml.dist app/config/parameters.yml</code></pre>
<p>Don't forget to edit <code>app/config/parameters.yml</code> and change the value of the
secret parameter:</p>
<pre><code>parameters:
    secret: hazuZRqYGdRrL8ATdB8kAqBZ</code></pre>
<p><strong>Tip</strong>: Use <a href="https://www.random.org/passwords/?num=1&amp;len=24&amp;format=html&amp;rnd=new">random.org</a>
to generate your secret token.</p>
<p><strong>Note</strong>: For security reason, this parameter file is ignored by git. It means
that this file should be created on each installation.</p>
<p>Let's commit our hard work:</p>
<pre><code>git init
git add -A
git add -f app/logs/.gitkeep app/cache/.gitkeep
git commit -m 'Created a Symfony2 Emptier application'</code></pre>
<h2 id="creating-the-application-bundle">Creating the Application Bundle<a href="#creating-the-application-bundle" class="anchor">#</a></h2>
<p>We will also need an Application bundle. First we create the directories:</p>
<pre><code>mkdir -p src/Fortune/ApplicationBundle</code></pre>
<p>Then the Bundle class:</p>
<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/FortuneApplicationBundle.php

namespace Fortune\ApplicationBundle;

use Symfony\Component\HttpKernel\Bundle\Bundle;

class FortuneApplicationBundle extends Bundle
{
}</code></pre>
<p>And finally register it in the application's kernel:</p>
<pre><code>&lt;?php
// File: app/AppKernel.php

use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Config\Loader\LoaderInterface;

class AppKernel extends Kernel
{
    public function registerBundles()
    {
        return array(
            new Symfony\Bundle\FrameworkBundle\FrameworkBundle(),
            new Fortune\ApplicationBundle\FortuneApplicationBundle(), // &lt;-- Here!
        );
    }

    public function registerContainerConfiguration(LoaderInterface $loader)
    {
        $loader-&gt;load(__DIR__.'/config/config_'.$this-&gt;getEnvironment().'.yml');
    }
}</code></pre>
<p>We're now ready to get started with our real concern, so let's commit our work:</p>
<pre><code>git add -A
git commit -m 'Created ApplicationBundle'</code></pre>
<h3 id="apache-configuration">Apache configuration<a href="#apache-configuration" class="anchor">#</a></h3>
<p>In order for your website to be browsed, you'll need to configure your web
server. This configuration is well explained
<a href="http://symfony.com/doc/current/cookbook/configuration/web_server_configuration.html">in the documentation</a>,
so here's a dump of an apache vhost:</p>
<pre><code>&lt;VirtualHost *:80&gt;
    ServerName fortune.local

    DocumentRoot /home/loic.chardonnet/Projects/gnugat/fortune/web

    ErrorLog "/home/loic.chardonnet/Projects/gnugat/fortune/app/logs/apache_errors.log"
    CustomLog "/home/loic.chardonnet/Projects/gnugat/fortune/app/logs/apache_accesses.log" common

    &lt;Directory /home/loic.chardonnet/Projects/gnugat/fortune/web&gt;
        Options Indexes FollowSymLinks MultiViews
        AllowOverride None
        Order allow,deny
        allow from all
        &lt;IfModule mod_rewrite.c&gt;
            RewriteEngine On
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteRule ^(.*)$ /app.php [QSA,L]
        &lt;/IfModule&gt;
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</code></pre>
<p>If you run into some permission problem (like writing in <code>cache</code> and <code>logs</code>),
you might consider to change <code>APACHE_RUN_USER</code> and <code>APACHE_RUN_GROUP</code>
environment variables present in <code>/etc/apache2/envvars</code> to your own user and
group.</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Using Composer's <code>create-project</code> command with a Symfony2 Distribution is the
quickest way to bootstrap a project.</p>
<p>In the next article, we will start to work on our first User Story.</p>
<h3 id="next-articles">Next articles<a href="#next-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/08/13/master-sf2-part-2-tdd.html">2: TDD</a></li>
<li><a href="../../../2014/08/22/master-sf2-part-3-services.html">3: Services</a></li>
<li><a href="../../../2014/08/27/master-sf2-part-4-doctrine.html">4: Doctrine</a></li>
<li><a href="../../../2014/09/03/master-sf2-part-5-events.html">5: Events</a></li>
<li><a href="../../../2014/09/10/master-sf2-part-6-annotations.html">6: Annotations</a></li>
<li><a href="../../../2014/10/08/master-sf2-conclusion.html">Conclusion</a></li>
</ul>]]></content>
    </entry>
        <entry>
        <title>Learn Symfony2 - Conclusion</title>
                <id>http://gnugat.github.io/2014/07/23/learn-sf2-conclusion.html</id>
                <updated>2014-07-23T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/07/23/learn-sf2-conclusion.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>This is the conclusion of the series on learning
<a href="http://symfony.com/">the Symfony2 framework</a>.
Have a look at the five first ones:</p>
<ol><li><a href="../../../2014/06/18/learn-sf2-composer-part-1.html">Composer</a></li>
<li><a href="../../../2014/06/25/learn-sf2-empty-app-part-2.html">Empty application</a></li>
<li><a href="../../../2014/07/02/learn-sf2-bundles-part-3.html">Bundles</a></li>
<li><a href="../../../2014/07/12/learn-sf2-controllers-part-4.html">Controllers</a></li>
<li><a href="../../../2014/07/20/learn-sf2-tests-part-5.html">Tests</a></li>
</ol><p>In the previous articles we created a tested application for the Knight of Ni
with the following files:</p>
<pre><code>.
&#9500;&#9472;&#9472; app
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; AppKernel.php
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; cache
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; .gitkeep
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config_test.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; routing.yml
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; logs
&#9474;&nbsp;&nbsp; &#9474;   &#9492;&#9472;&#9472; .gitkeep
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; phpunit.xml.dist
&#9500;&#9472;&#9472; composer.json
&#9500;&#9472;&#9472; composer.lock
&#9500;&#9472;&#9472; src
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; Knight
&#9474;&nbsp;&nbsp;     &#9492;&#9472;&#9472; ApplicationBundle
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; Controller
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; ApiController.php
&#9474;           &#9500;&#9472;&#9472; KnightApplicationBundle.php
&#9474;           &#9492;&#9472;&#9472; Tests
&#9474;               &#9492;&#9472;&#9472; Controller
&#9474;                   &#9492;&#9472;&#9472; ApiControllerTest.php
&#9500;&#9472;&#9472; .gitignore
&#9492;&#9472;&#9472; web
    &#9492;&#9472;&#9472; app.php</code></pre>
<p>Running <code>composer install</code> should create a <code>vendor</code> directory, which we ignored
with git.</p>
<p>Here's the <a href="https://github.com/gnugat/learning-symfony2/tree/5-tests">repository where you can find the actual code</a>.</p>
<p>This article will be like a cheat sheet of what we saw in the previous ones.</p>
<h2 id="composer">Composer<a href="#composer" class="anchor">#</a></h2>
<p><a href="https://getcomposer.org/">Composer</a> will help you install and update third
party libraries.</p>
<p>Download it once for all and install it in your global binaries:</p>
<pre><code>curl -sS https://getcomposer.org/installer | php
sudo mv ./composer.phar /usr/local/bin/composer</code></pre>
<p>It should then be executable like this: <code>composer</code>.</p>
<ul><li>install a third party library: <code>composer require [--dev] &lt;vendor/name:version&gt;</code></li>
<li>download the project's third party libraries: <code>composer install</code></li>
<li>update the project's third party libraries: <code>composer update</code></li>
</ul><p>The available third party libraries can be found on
<a href="https://packagist.org/">Packagist</a>.</p>
<p>Here's an explanation of <a href="https://igor.io/2013/01/07/composer-versioning.html">Composer version constraints by Igor</a>.</p>
<p>In these articles, we create a project from scratch, but the recommended way of
starting a Symfony2 application is to use the Composer bootstrap command:
<code>composer create-project &lt;vendor/name&gt; &lt;path-to-install&gt;</code></p>
<p>You could use the <a href="https://github.com/symfony/symfony-standard">Symfony Standard Edition</a>
(<code>symfony/framework-standard-edition</code>), or any other distribution.</p>
<p>I'd advise you to use an empty boilerplate with the
<a href="https://github.com/gnugat/symfony-empty">Symfony Empty Edition</a>:</p>
<pre><code>composer create-project gnugat/symfony-framework-empty-edition &lt;path-to-install&gt;</code></pre>
<p><em>Tip</em>: For the production server, use this command to install the project's
dependencies (the third party libraries):</p>
<pre><code>composer install --no-dev --optimize</code></pre>
<h2 id="bundles">Bundles<a href="#bundles" class="anchor">#</a></h2>
<p>They integrate your code with the framework. More specifically, they configure
the Kernel's dependency injection container.</p>
<p><em>Note</em>: To learn more about Dependency Injection, have a look at the following
articles:</p>
<ul><li><a href="../../../2014/01/22/ioc-di-and-service-locator.html">Inversion of Control, Dependency Injection, Dependency Injection Container and Service Locator</a></li>
<li><a href="../../../2014/01/29/sf2-di-component-by-example.html">Symfony2 Dependency Injection component, by example</a></li>
</ul><p>The only bundle you'll need to create is the <code>ApplicationBundle</code>, where all your
code will be. Here's how to create a bundle:</p>
<ol><li>create its directory: <code>mkdir -p src/&lt;Vendor&gt;/&lt;Name&gt;Bundle</code></li>
<li>create its class: <code>$EDITOR src/&lt;Vendor&gt;/&lt;Name&gt;Bundle/&lt;Vendor&gt;&lt;Name&gt;Bundle.php</code></li>
<li>register it in the kernel: <code>$EDITOR app/AppKernel.php</code></li>
</ol><p>A Bundle class looks like this:</p>
<pre><code>&lt;?php
// File: src/Knight/ApplicationBundle/KnightApplicationBundle.php

namespace Knight\ApplicationBundle;

use Symfony\Component\HttpKernel\Bundle\Bundle;

class KnightApplicationBundle extends Bundle
{
}</code></pre>
<h2 id="application">Application<a href="#application" class="anchor">#</a></h2>
<p>In your application, there's only a few files related to the Symfony2 framework.
Here's the list of the ones you'll usually edit.</p>
<h3 id="the-application-s-kernel">The application's kernel<a href="#the-application-s-kernel" class="anchor">#</a></h3>
<p>The <code>app/AppKernel.php</code> file is where the bundles are registered and where the
configuration is loaded. You'll only need to edit it when you install a new
bundle.</p>
<p>Here's how we would proceed: first install the bundle via Composer:</p>
<pre><code>composer require [--dev] &lt;vendor/name:version&gt;</code></pre>
<p>Then register it in the application's kernel:</p>
<pre><code>&lt;?php
// File: app/AppKernel.php

use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Config\Loader\LoaderInterface;

class AppKernel extends Kernel
{
    public function registerBundles()
    {
        $bundles = array(
            new Symfony\Bundle\FrameworkBundle\FrameworkBundle(),
            new Symfony\Bundle\SecurityBundle\SecurityBundle(),
            new Symfony\Bundle\TwigBundle\TwigBundle(),
            new Symfony\Bundle\MonologBundle\MonologBundle(),
            new Symfony\Bundle\AsseticBundle\AsseticBundle(),
            new Doctrine\Bundle\DoctrineBundle\DoctrineBundle(),
            new Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle(),

            // Add your bundles here!
        );

        if (in_array($this-&gt;getEnvironment(), array('dev', 'test'))) {
            $bundles[] = new Symfony\Bundle\WebProfilerBundle\WebProfilerBundle();
            $bundles[] = new Sensio\Bundle\DistributionBundle\SensioDistributionBundle();
            $bundles[] = new Sensio\Bundle\GeneratorBundle\SensioGeneratorBundle();

            // Or here, if you want it to only be available in dev or test environment
        }

        return $bundles;
    }

    public function registerContainerConfiguration(LoaderInterface $loader)
    {
        $loader-&gt;load(__DIR__.'/config/config_'.$this-&gt;getEnvironment().'.yml');
    }
}</code></pre>
<h3 id="the-routing-configuration">The routing configuration<a href="#the-routing-configuration" class="anchor">#</a></h3>
<p>The <code>app/config/routing.yml</code> file is where you will link a controller's action
to an URL. Here's an example:</p>
<pre><code># File: app/config/routing.yml
ni:
    path: /api/ni
    methods:
        - POST
    defaults:
        _controller: KnightApplicationBundle:Api:ni

question_to_cross_the_bridge:
    path: /api/question/{number}
    methods:
        - GET
    defaults:
        _controller: KnightApplicationBundle:Api:question</code></pre>
<p>As you can see, you can tell the routing to use placeholders, which will be then
available in the controller via the Request object:</p>
<pre><code>$request-&gt;query-&gt;get('number'); // query is an instance of ParameterBag</code></pre>
<h3 id="controllers-your-entry-point">Controllers, your entry point<a href="#controllers-your-entry-point" class="anchor">#</a></h3>
<p>Each route is associated to a controller's action.</p>
<p>A controller is a class located in <code>src/&lt;Vendor&gt;/ApplicationBundle/Controller</code>,
suffixed with <code>Controller</code>.</p>
<p>An action is a controller's public method, suffixed with <code>Action</code>, which takes
a <code>Request $request</code> parameter and must return an instance of the <code>Response</code>
object:</p>
<pre><code>&lt;?php
// File: src/Knight/ApplicationBundle/Controller/ApiController.php

namespace Knight\ApplicationBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;

class ApiController extends Controller
{
    public function niAction(Request $request)
    {
        $postedContent = $request-&gt;getContent();
        $postedValues = json_decode($postedContent, true);

        $answer = array('answer' =&gt; 'Ecky-ecky-ecky-ecky-pikang-zoop-boing-goodem-zoo-owli-zhiv');
        $statusCode = Response::HTTP_OK;
        if (!isset($postedValues['offering']) || 'shrubbery' !== $postedValues['offering']) {
            $answer['answer'] = 'Ni';
            $statusCode = Response::HTTP_UNPROCESSABLE_ENTITY;
        }

        return new JsonResponse($answer, $statusCode);
    }
}</code></pre>
<p><em>Note</em>: you can create sub-directories in <code>src/&lt;Vendor&gt;/ApplicationBundle/Controller</code>,
allowing you to categorize your controllers. In the routing, this would look
like this: <code>KnightApplicationBundle:Subdirectory\Controller:action</code>.</p>
<h3 id="functional-tests">Functional tests<a href="#functional-tests" class="anchor">#</a></h3>
<p>Of course you can use any test framework with a Symfony2 project. PHPUnit is one
of them, and a popular one, so we'll use it for our examples.</p>
<p>Functional tests mirror the controllers and check if the status code is
successful. If you're building an API, you can check more precisely the status
code:</p>
<pre><code>&lt;?php
// File: src/Knight/ApplicationBundle/Tests/Controller/ApiControllerTest.php

namespace Knight\ApplicationBundle\Tests\Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\Response;

class ApiControllerTest extends WebTestCase
{
    private function post($uri, array $data)
    {
        $content = json_encode($data);
        $client = static::createClient();
        $client-&gt;request('POST', $uri, array(), array(), array(), $content);

        return $client-&gt;getResponse();
    }

    public function testOfferingTheRightThing()
    {
        $response = $this-&gt;post('/api/ni', array('offering' =&gt; 'shrubbery'));

        $this-&gt;assertSame(Response::HTTP_OK , $response-&gt;getStatusCode());
    }

    public function testOfferingTheWrongThing()
    {
        $response = $this-&gt;post('/api/ni', array('offering' =&gt; 'hareng'));

        $this-&gt;assertSame(Response::HTTP_UNPROCESSABLE_ENTITY , $response-&gt;getStatusCode());
    }
}</code></pre>
<p>The <code>WebTestCase</code> class is provided by the framework: it creates an application
(just like we do in <code>web/app.php</code>), so you can send requests and test the
response.</p>
<h3 id="where-to-put-your-own-code">Where to put your own code<a href="#where-to-put-your-own-code" class="anchor">#</a></h3>
<p>You can put your code anywhere in <code>src/&lt;Vendor&gt;/ApplicationBundle</code>.</p>
<p>Who said you needed to decouple your code from Symfony2? You can already write
decoupled code!</p>
<p>A convention is to create directories named after the type of objects it holds.
For example the <code>Controller</code> contains controller classes (which are suffixed
with <code>Controller</code>). You don't have to follow it though (except for controllers
and commands): use your best judgement!</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Symfony2 gets out of your way, the only class from the framework we need to use
is the controller, the request and the response.</p>
<p>The workflow is really simple:</p>
<ol><li>Symfony2 converts the HTTP request into a <code>Request</code> object</li>
<li>the routing allows to execute a controller related to the current URL</li>
<li>the controller receives the <code>Request</code> object as a parameter and must return a
<code>Response</code> object</li>
<li>Symfony2 converts the <code>Response</code> object into the HTTP response</li>
</ol><h3 id="what-should-we-do-now">What should we do now?<a href="#what-should-we-do-now" class="anchor">#</a></h3>
<p>Practice.</p>
<p>We now know the strict minimum about Symfony2, and the only way to learn more is
to practice, encounter new use cases, find answers in the
<a href="http://symfony.com/doc/current/index.html">documentation</a> and ask questions on
<a href="http://stackoverflow.com/questions/tagged/symfony2">StackOverflow</a> (if they
haven't been already asked).</p>
<p>If you really want to master Symfony2, then stay tuned: I'll start writing a new
series of articles!</p>
<h3 id="previous-articles">Previous articles<a href="#previous-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/06/18/learn-sf2-composer-part-1.html">1: Composer</a></li>
<li><a href="../../../2014/06/25/learn-sf2-empty-app-part-2.html">2: Empty application</a></li>
<li><a href="../../../2014/07/02/learn-sf2-bundles-part-3.html">3: Bundles</a></li>
<li><a href="../../../2014/07/12/learn-sf2-controllers-part-4.html">4: Controllers</a></li>
<li><a href="../../../2014/07/20/learn-sf2-tests-part-5.html">5: Tests</a></li>
</ul>]]></content>
    </entry>
        <entry>
        <title>Learn Symfony2 - part 5: Tests</title>
                <id>http://gnugat.github.io/2014/07/20/learn-sf2-tests-part-5.html</id>
                <updated>2014-07-20T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/07/20/learn-sf2-tests-part-5.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>This is the fifth article of the series on learning
<a href="http://symfony.com/">the Symfony2 framework</a>.
Have a look at the four first ones:</p>
<ol><li><a href="../../../2014/06/18/learn-sf2-composer-part-1.html">Composer</a></li>
<li><a href="../../../2014/06/25/learn-sf2-empty-app-part-2.html">Empty application</a></li>
<li><a href="../../../2014/07/02/learn-sf2-bundles-part-3.html">Bundles</a></li>
<li><a href="../../../2014/07/12/learn-sf2-controllers-part-4.html">Controllers</a></li>
</ol><p>In the previous articles we created an application for the Knight of Ni with the
following files:</p>
<pre><code>.
&#9500;&#9472;&#9472; app
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; AppKernel.php
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; cache
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; .gitkeep
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config.yml
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; routing.yml
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; logs
&#9474;&nbsp;&nbsp;     &#9492;&#9472;&#9472; .gitkeep
&#9500;&#9472;&#9472; composer.json
&#9500;&#9472;&#9472; composer.lock
&#9500;&#9472;&#9472; src
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; Knight
&#9474;&nbsp;&nbsp;     &#9492;&#9472;&#9472; ApplicationBundle
&#9474;&nbsp;&nbsp;         &#9500;&#9472;&#9472; Controller
&#9474;&nbsp;&nbsp;         &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; ApiController.php
&#9474;&nbsp;&nbsp;         &#9492;&#9472;&#9472; KnightApplicationBundle.php
&#9500;&#9472;&#9472; .gitignore
&#9492;&#9472;&#9472; web
    &#9492;&#9472;&#9472; app.php</code></pre>
<p>Running <code>composer install</code> should create a <code>vendor</code> directory, which we ignored
with git.</p>
<p>Here's the <a href="https://github.com/gnugat/learning-symfony2/tree/4-controllers">repository where you can find the actual code</a>.</p>
<p>In this article, we'll create functional tests using PHPUnit.</p>
<h2 id="installing-phpunit">Installing PHPUnit<a href="#installing-phpunit" class="anchor">#</a></h2>
<p><a href="http://phpunit.de/">PHPUnit</a> is a popular test framework.
Its name is deceptive: you can write any kind of test with it (unit, functional,
end to end, anything).</p>
<p>Let's install it in our project:</p>
<pre><code>composer require --dev "phpunit/phpunit:~4.1"</code></pre>
<p>The <code>--dev</code> options will prevent Composer from installing PHPUnit when running
<code>composer install --no-dev</code>: this is use in production (download is costly).</p>
<p>We will need to create a configuration file to tell PHPUnit to execute the tests
found in <code>src/Knight/ApplicationBundle/Tests</code>, and to use Composer as an
autoloader:</p>
<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- File: app/phpunit.xml.dist --&gt;

&lt;!-- http://phpunit.de/manual/current/en/appendixes.configuration.html --&gt;
&lt;phpunit
    backupGlobals="false"
    colors="true"
    syntaxCheck="false"
    bootstrap="../vendor/autoload.php"&gt;

    &lt;testsuites&gt;
        &lt;testsuite name="Functional Test Suite"&gt;
            &lt;directory&gt;../src/Knight/ApplicationBundle/Tests&lt;/directory&gt;
        &lt;/testsuite&gt;
    &lt;/testsuites&gt;

&lt;/phpunit&gt;</code></pre>
<p><em>Note</em>: <a href="http://symfony.com/doc/current/cookbook/bundles/best_practices.html#directory-structure">By convention</a>
you should put your tests in <code>src/Knight/ApplicationBundle/Tests</code>. It's not hard
coded though, but if you want people to find things where they expect them to be
you better follow them ;) .</p>
<p>This file is suffixed with <code>.dist</code> because we intend to allow developer to
override the configuration by creating a <code>app/phpunit.xml</code> file. Only the
distribution file should be commited, though:</p>
<pre><code>echo '/app/phpunit.xml' &gt;&gt; .gitignore
git add -A
git commit -m 'Installed PHPUnit'</code></pre>
<h2 id="environments">Environments<a href="#environments" class="anchor">#</a></h2>
<p>For our functional tests, we will be using the <code>WebTestCase</code> class: it
instanciates our <code>AppKernel</code> with the <code>test</code> environment. It also uses a
<code>test.client</code> service, which is disabled by default.</p>
<p>In order to enable this service, we must change the configuration:</p>
<pre><code># File: app/config/config.yml
framework:
    secret: "Three can keep a secret, if two of them are dead."
    router:
        resource: %kernel.root_dir%/config/routing.yml

    # test: ~</code></pre>
<p>Sometimes, you don't want your configuration to be the same for your tests and
your production server. That's what environments are for. Let's put this test
specific configuration in a different file:</p>
<pre><code># File: app/config/config_test.yml
imports:
    - { resource: config.yml }

framework:
    test: ~</code></pre>
<p><em>Note</em>: the <code>imports</code> parameter allows you to include other configuration files.
You can then overwrite the included parameters, or add new ones.</p>
<p>We should also change the <code>registerContainerConfiguration</code> method of the
<code>AppKernel</code> class in order to load the test configuration, depending on the
environment:</p>
<pre><code>&lt;?php
// File: app/AppKernel.php

use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Config\Loader\LoaderInterface;

class AppKernel extends Kernel
{
    public function registerBundles()
    {
        return array(
            new Symfony\Bundle\FrameworkBundle\FrameworkBundle(),
            new Knight\ApplicationBundle\KnightApplicationBundle(),
        );
    }

    public function registerContainerConfiguration(LoaderInterface $loader)
    {
        $file = 'config';
        if ('test' === $this-&gt;getEnvironment()) {
            $file .= '_test';
        }
        $loader-&gt;load(__DIR__."/config/$file.yml");
    }
}</code></pre>
<p>Let's commit our work:</p>
<pre><code>git add -A
git commit -m 'Added test configuration'</code></pre>
<h2 id="functional-tests">Functional tests<a href="#functional-tests" class="anchor">#</a></h2>
<p>Our test must check that the application behaves as expected. We won't be
checking that it actually fulfills our business expectations. This means that
checking the HTTP status code is entirely sufficient.</p>
<p>Let's create the directory:</p>
<pre><code>mkdir -p src/Knight/ApplicationBundle/Tests/Controller</code></pre>
<p><em>Note</em>: Again, <a href="http://symfony.com/doc/current/book/testing.html#unit-tests">by convention</a>,
your test directory structure must mirror the one found in the bundle.</p>
<p>And then our first functional test:</p>
<pre><code>&lt;?php
// File: src/Knight/ApplicationBundle/Tests/Controller/ApiControllerTest.php

namespace Knight/ApplicationBundle/Tests/Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class ApiControllerTest extends WebTestCase
{
    public function testOfferingTheRightThing()
    {
        $method = 'POST';
        $uri = '/api/ni';
        $parameters = array();
        $files = array();
        $server = array();
        $content = json_encode(array(
            'offering' =&gt; 'shrubbery',
        ));

        $client = static::createClient();
        $client-&gt;request($method, $uri, $parameters, $files, $server, $content);
        $response = $client-&gt;getResponse();

        $this-&gt;assertTrue($response-&gt;isSuccessful());
    }
}</code></pre>
<p>To make sure the test pass, run the following command:</p>
<pre><code>./vendor/bin/phpunit -c app</code></pre>
<p>Composer has installed a binary in <code>vendor/bin</code>, and the <code>-c</code> option allows you
to tell PHPUnit where the configuration is (in <code>./app</code>).</p>
<p>This looks a bit long because of the content parameter... We can improve this
with helper methods:</p>
<pre><code>&lt;?php
// File: src/Knight/ApplicationBundle/Tests/Controller/ApiControllerTest.php

namespace Knight/ApplicationBundle/Tests/Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class ApiControllerTest extends WebTestCase
{
    private function post($uri, array $data)
    {
        $content = json_encode($data);
        $client = static::createClient();
        $client-&gt;request('POST', $uri, array(), array(), array(), $content);

        return $client-&gt;getResponse();
    }

    public function testOfferingTheRightThing()
    {
        $response = $this-&gt;post('/api/ni', array('offering' =&gt; 'shrubbery'));

        $this-&gt;assertTrue($response-&gt;isSuccessful());
    }
}</code></pre>
<p>Make sure the test still pass:</p>
<pre><code>./vendor/bin/phpunit -c app</code></pre>
<p>The Response's <code>isSuccessful</code> method only checks that the status code is 200ish.</p>
<p>Here's a test for failure cases:</p>
<pre><code>&lt;?php
// File: src/Knight/ApplicationBundle/Tests/Controller/ApiControllerTest.php

namespace Knight/ApplicationBundle/Tests/Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class ApiControllerTest extends WebTestCase
{
    private function post($uri, array $data)
    {
        $content = json_encode($data);
        $client = static::createClient();
        $client-&gt;request('POST', $uri, array(), array(), array(), $content);

        return $client-&gt;getResponse();
    }

    public function testOfferingTheRightThing()
    {
        $response = $this-&gt;post('/api/ni', array('offering' =&gt; 'shrubbery'));

        $this-&gt;assertTrue($response-&gt;isSuccessful());
    }

    public function testOfferingTheWrongThing()
    {
        $response = $this-&gt;post('/api/ni', array('offering' =&gt; 'hareng'));

        $this-&gt;assertFalse($response-&gt;isSuccessful());
    }
}</code></pre>
<p>Run the tests:</p>
<pre><code>./vendor/bin/phpunit -c app</code></pre>
<p><em>Note</em>: At this point running the tests should become a habit. Make sure to run
them whenever you finish a change, and to run them before commiting anything.</p>
<h2 id="rest-api-functional-tests">Rest API functional tests<a href="#rest-api-functional-tests" class="anchor">#</a></h2>
<p>In my humble opinion, checking if the status code is 200ish and not checking the
response content is entirely sufficient for functional tests.</p>
<p>When creating REST API, it can prove useful to test more precisely the status
code. Our application is a REST API, so let's do this:</p>
<pre><code>&lt;?php
// File: src/Knight/ApplicationBundle/Tests/Controller/ApiControllerTest.php

namespace Knight/ApplicationBundle/Tests/Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\Response;

class ApiControllerTest extends WebTestCase
{
    private function post($uri, array $data)
    {
        $content = json_encode($data);
        $client = static::createClient();
        $client-&gt;request('POST', $uri, array(), array(), array(), $content);

        return $client-&gt;getResponse();
    }

    public function testOfferingTheRightThing()
    {
        $response = $this-&gt;post('/api/ni', array('offering' =&gt; 'shrubbery'));

        $this-&gt;assertSame(Response::HTTP_OK , $response-&gt;getStatusCode());
    }

    public function testOfferingTheWrongThing()
    {
        $response = $this-&gt;post('/api/ni', array('offering' =&gt; 'hareng'));

        $this-&gt;assertSame(Response::HTTP_UNPROCESSABLE_ENTITY , $response-&gt;getStatusCode());
    }
}</code></pre>
<p>Run the tests:</p>
<pre><code>./vendor/bin/phpunit -c app</code></pre>
<p>All green! That's comforting enough for us to commit our work and call it a day!</p>
<pre><code>git add -A
git commit -m 'Added tests'</code></pre>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Running <code>./vendor/bin/phpunit -c app</code> is less cumbersome than having to run
manually HTTPie (like in the previous article)!</p>
<p>Writing functional tests is easy and quick, the only thing you need to do is
check if the HTTP response's status code is successful (and for REST API you
need to check the precise HTTP response's status code).</p>
<p>The next article will be the conclusion of this series, I hope you enjoyed it!</p>
<h3 id="next-articles">Next articles<a href="#next-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/07/23/learn-sf2-conclusion.html">Conclusion</a></li>
</ul><h3 id="previous-articles">Previous articles<a href="#previous-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/06/18/learn-sf2-composer-part-1.html">1: Composer</a></li>
<li><a href="../../../2014/06/25/learn-sf2-empty-app-part-2.html">2: Empty application</a></li>
<li><a href="../../../2014/07/02/learn-sf2-bundles-part-3.html">3: Bundles</a></li>
<li><a href="../../../2014/07/12/learn-sf2-controllers-part-4.html">4: Controllers</a></li>
</ul>]]></content>
    </entry>
        <entry>
        <title>Learn Symfony2 - part 4: Controllers</title>
                <id>http://gnugat.github.io/2014/07/12/learn-sf2-controllers-part-4.html</id>
                <updated>2014-07-12T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/07/12/learn-sf2-controllers-part-4.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>This is the fourth article of the series on learning
<a href="http://symfony.com/">the Symfony2 framework</a>.
Have a look at the three first ones:</p>
<ol><li><a href="../../../2014/06/18/learn-sf2-composer-part-1.html">Composer</a></li>
<li><a href="../../../2014/06/25/learn-sf2-empty-app-part-2.html">Empty application</a></li>
<li><a href="../../../2014/07/02/learn-sf2-bundles-part-3.html">Bundles</a></li>
</ol><p>In the previous articles we created a one-bundled empty application with the
following files:</p>
<pre><code>.
&#9500;&#9472;&#9472; app
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; AppKernel.php
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; cache
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; .gitkeep
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; config.yml
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; logs
&#9474;&nbsp;&nbsp;     &#9492;&#9472;&#9472; .gitkeep
&#9500;&#9472;&#9472; composer.json
&#9500;&#9472;&#9472; composer.lock
&#9500;&#9472;&#9472; src
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; Knight
&#9474;&nbsp;&nbsp;     &#9492;&#9472;&#9472; ApplicationBundle
&#9474;&nbsp;&nbsp;         &#9492;&#9472;&#9472; KnightApplicationBundle.php
&#9500;&#9472;&#9472; .gitignore
&#9492;&#9472;&#9472; web
    &#9492;&#9472;&#9472; app.php</code></pre>
<p>Running <code>composer install</code> should create a <code>vendor</code> directory, which we ignored
with git.</p>
<p>Here's the <a href="https://github.com/gnugat/learning-symfony2/releases/tag/3-bundles">repository where you can find the actual code</a>.</p>
<p>In this article, we'll learn more about the routing and the controllers.</p>
<h2 id="discovering-routing-and-controller">Discovering routing and controller<a href="#discovering-routing-and-controller" class="anchor">#</a></h2>
<p>In order to get familiar with the routing and controllers, we will create a
route which returns nothing. The first thing to do is to configure the router:</p>
<pre><code># File: app/config/app.yml
framework:
    secret: "Three can keep a secret, if two of them are dead."
    router:
        resource: %kernel.root_dir%/config/routing.yml</code></pre>
<p>We can now write our routes in a separate file:</p>
<pre><code># File: app/config/routing.yml
what_john_snow_knows:
    path: /api/ygritte
    methods:
        - GET
    defaults:
        _controller: KnightApplicationBundle:Api:ygritte</code></pre>
<p>As you can see, a route has:</p>
<ul><li>a name (<code>what_john_snow_knows</code>)</li>
<li>a path (<code>/api/ygritte</code>)</li>
<li>one or many HTTP verbs (<code>GET</code>)</li>
<li>a controller <code>Knight\ApplicationBundle\Controller\ApiController::ygritteAction()</code></li>
</ul><p><em>Note</em>: the <code>_controller</code> parameter is a shortcut composed of three parts, which
are the name of the bundle, then the unprefixed controller name and finally the
unprefixed method name.</p>
<p>Now we need to create the following directory:</p>
<pre><code>mkdir src/Knight/ApplicationBundle/Controller</code></pre>
<p>And to create the controller class:</p>
<pre><code>&lt;?php
// File: src/Knight/ApplicationBundle/Controller/ApiController.php

namespace Knight\ApplicationBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class ApiController extends Controller
{
    public function ygritteAction(Request $request)
    {
        return new Response('', Response::HTTP_NO_CONTENT);
    }
}</code></pre>
<p>To test it, I'd advise you to use a HTTP client. Let's install
<a href="http://httpie.org">HTTPie, the CLI HTTP client</a>:</p>
<pre><code>sudo apt-get install python-pip
sudo pip install --upgrade httpie</code></pre>
<p>We can now test our webservice:</p>
<pre><code>http GET knight.local/api/ygritte</code></pre>
<p>The first line should be <code>HTTP/1.1 204 No Content</code>.</p>
<h2 id="posting-data">Posting data<a href="#posting-data" class="anchor">#</a></h2>
<p>Our scrum master and product owner managed to write a user story for us:</p>
<pre><code>As a Knight of Ni
I want a webservice which says "ni"
In order to get a shrubbery</code></pre>
<p>This means we're going to need the following route:</p>
<pre><code># File: app/config/routing.yml
ni:
    path: /api/ni
    methods:
        - POST
    defaults:
        _controller: KnightApplicationBundle:Api:ni</code></pre>
<p>Our controller will retrieve the posted value (named <code>offering</code>), check if it
is a <code>shrubbery</code> and send back a response containing either <code>Ni</code> (on error) or
<code>Ecky-ecky-ecky-ecky-pikang-zoop-boing-goodem-zoo-owli-zhiv</code> (on success):</p>
<pre><code>&lt;?php
// File: src/Knight/ApplicationBundle/Controller/ApiController.php

namespace Knight\ApplicationBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;

class ApiController extends Controller
{
    public function niAction(Request $request)
    {
        $postedContent = $request-&gt;getContent();
        $postedValues = json_decode($postedContent, true);

        $answer = array('answer' =&gt; 'Ecky-ecky-ecky-ecky-pikang-zoop-boing-goodem-zoo-owli-zhiv');
        $statusCode = Response::HTTP_OK;
        if (!isset($postedValues['offering']) || 'shrubbery' !== $postedValues['offering']) {
            $answer['answer'] = 'Ni';
            $statusCode = Response::HTTP_UNPROCESSABLE_ENTITY;
        }

        return new JsonResponse($answer, $statusCode);
    }
}</code></pre>
<p>The <code>JsonResponse</code> class will convert the array into JSON and set the proper
HTTP headers.</p>
<p>If we try to submit something fishy like this:</p>
<pre><code>http POST knight.local/api/ni offering=hareng</code></pre>
<p>Then we should have a response similar to:</p>
<pre><code>HTTP/1.1 422 Unprocessable Entity
Cache-Control: no-cache
Content-Type: application/json
Date: Thu, 10 Jul 2014 15:23:00 GMT
Server: Apache
Transfer-Encoding: chunked

{
    "answer": "Ni"
}</code></pre>
<p>And when we submit the correct offering:</p>
<pre><code>http POST knight.local/api/ni offering=shrubbery</code></pre>
<p>Then we should have something similar to:</p>
<pre><code>HTTP/1.1 200 OK
Cache-Control: no-cache
Content-Type: application/json
Date: Thu, 10 Jul 2014 21:42:00 GMT
Server: Apache
Transfer-Encoding: chunked

{
    "answer": "Ecky-ecky-ecky-ecky-pikang-zoop-boing-goodem-zoo-owli-zhiv"
}</code></pre>
<h2 id="request-s-api">Request's API<a href="#request-s-api" class="anchor">#</a></h2>
<p>Here's part of the Request's API:</p>
<pre><code>&lt;?php

namespace Symfony\Component\HttpFoundation;

class Request
{
    public $request; // Request body parameters ($_POST)
    public $query; // Query string parameters ($_GET)
    public $files; // Uploaded files ($_FILES)
    public $cookies; // $_COOKIE
    public $headers; // Taken from $_SERVER

    public static function createFromGlobals():
    public static function create(
        $uri,
        $method = 'GET',
        $parameters = array(),
        $cookies = array(),
        $files = array(),
        $server = array(),
        $content = null
    );

    public function getContent($asResource = false);
}</code></pre>
<p>We used <code>createFromGlobals</code> in our front controller (<code>web/app.php</code>), it does
excalty what it says: it initializes the Request from the PHP superglobals
(<code>$_POST</code>, <code>$_GET</code>, etc).</p>
<p>The <code>create</code> method is really handful in tests as we won't need to override the
values in PHP's superglobals.</p>
<p>The attributes here listed are all instances of
<code>Symfony\Component\HttpFoundation\ParameterBag</code>, which is like an object
oriented array with <code>set</code>, <code>has</code> and <code>get</code> methods (amongst others).</p>
<p>When you submit a form, your browser automatically sets the HTTP request's
header <code>Content-Type</code> to <code>application/x-www-form-urlencoded</code>, and the form
values are sent in the request's content like this:</p>
<pre><code>offering=hareng</code></pre>
<p>PHP understands this and will put the values in the <code>$_POST</code> superglobal. This
mean you could retrieve it like this:</p>
<pre><code>$request-&gt;request-&gt;get('offering');</code></pre>
<p>However, when we submit something in JSON with the <code>Content-Type</code> set to
<code>application/json</code>, PHP doesn't populate <code>$_POST</code>. You need to retrieve the raw
data with <code>getContent</code> and to convert it using <code>json_decode</code>, as we did in our
controller.</p>
<h2 id="response-s-api">Response's API<a href="#response-s-api" class="anchor">#</a></h2>
<p>Here's a part of the Response's API:</p>
<pre><code>&lt;?php

namespace Symfony\Component\HttpFoundation;

class Response
{
    const HTTP_OK = 200;
    const HTTP_CREATED = 201;
    const HTTP_NO_CONTENT = 204;
    const HTTP_UNAUTHORIZED = 401;
    const HTTP_FORBIDDEN = 403;
    const HTTP_NOT_FOUND = 404;
    const HTTP_UNPROCESSABLE_ENTITY = 422; // RFC4918

    public $headers; // @var Symfony\Component\HttpFoundation\ResponseHeaderBag

    public function __construct($content = '', $status = 200, $headers = array())

    public function getContent();
    public function getStatusCode();

    public function isSuccessful();
}</code></pre>
<p>There's a lot of HTTP status code constants, so I've selected only those I'd use
the most.</p>
<p>You can set and get the Response's headers via a public property which is also
a <code>ParameterBag</code>.</p>
<p>The constructor allows you to set the content, status code and headers.</p>
<p>The three other methods are mostly used in tests. There's a lot of <code>is</code> methods
to check the type of the request, but usually you'll just want to make sure the
response is successful.</p>
<p>You can find other types of responses:</p>
<ul><li><code>JsonResponse</code>: sets the <code>Content-Type</code> and converts the content into JSON</li>
<li><code>BinaryFileResponse</code>: sets headers and attaches a file to the response</li>
<li><code>RedirectResponse</code>: sets the target location for a redirection</li>
<li><code>StreamedResponse</code>: useful for streaming large files</li>
</ul><h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Symfony2 is an HTTP framework which primary's public API are the controllers:
those receive a Request as parameter and return a Response. All you have to do
is to create a controller, write some configuration in order to link
it to an URL and you're done!</p>
<p>Do not forget to commit your work:</p>
<pre><code>git add -A
git commit -m 'Created Ni route and controller'</code></pre>
<p>The next article should be about tests: stay tuned!</p>
<h3 id="next-articles">Next articles<a href="#next-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/07/20/learn-sf2-tests-part-5.html">5: Tests</a></li>
<li><a href="../../../2014/07/23/learn-sf2-conclusion.html">Conclusion</a></li>
</ul><h3 id="previous-articles">Previous articles<a href="#previous-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/06/18/learn-sf2-composer-part-1.html">1: Composer</a></li>
<li><a href="../../../2014/06/25/learn-sf2-empty-app-part-2.html">2: Empty application</a></li>
<li><a href="../../../2014/07/02/learn-sf2-bundles-part-3.html">3: Bundles</a></li>
</ul>]]></content>
    </entry>
        <entry>
        <title>Learn Symfony2 - part 3: Bundles</title>
                <id>http://gnugat.github.io/2014/07/02/learn-sf2-bundles-part-3.html</id>
                <updated>2014-07-02T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/07/02/learn-sf2-bundles-part-3.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>This is the third article of the series on learning
<a href="http://symfony.com/">the Symfony2 framework</a>.
Have a look at the two first ones:</p>
<ul><li><a href="../../../2014/06/18/learn-sf2-composer-part-1.html">1: Composer</a></li>
<li><a href="../../../2014/06/25/learn-sf2-empty-app-part-2.html">2: Empty application</a></li>
</ul><p>In the previous articles we began to create an empty application with the
following files:</p>
<pre><code>.
&#9500;&#9472;&#9472; app
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; AppKernel.php
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; cache
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; .gitkeep
&#9474;&nbsp;&nbsp; &#9500;&#9472;&#9472; config
&#9474;&nbsp;&nbsp; &#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; config.yml
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; logs
&#9474;&nbsp;&nbsp;     &#9492;&#9472;&#9472; .gitkeep
&#9500;&#9472;&#9472; composer.json
&#9500;&#9472;&#9472; composer.lock
&#9500;&#9472;&#9472; .gitignore
&#9492;&#9472;&#9472; web
    &#9492;&#9472;&#9472; app.php</code></pre>
<p>Running <code>composer install</code> should create a <code>vendor</code> directory, which we ignored
with git.</p>
<p>Here's the <a href="https://github.com/gnugat/learning-symfony2/releases/tag/2-empty-application">repository where you can find the actual code</a>.</p>
<p>We'll now see what a bundle is.</p>
<h2 id="creating-the-application-bundle">Creating the application bundle<a href="#creating-the-application-bundle" class="anchor">#</a></h2>
<p>We'll need some use case in order for our code snippets to make sense. So here
it is: the Knights Who Say 'Ni', demand a webservice! It shall say 'ni' if the
user do not appease it. To do so, the user should post a shrubbery!</p>
<p>Let's create our application bundle, in order to have a place where we can put
our code. To do so we need to create the directory:</p>
<pre><code>mkdir -p src/Knight/ApplicationBundle</code></pre>
<p>Then the class extending <code>Symfony\Component\HttpKernel\Bundle\Bundle</code>:</p>
<pre><code>&lt;?php
// File: src/Knight/ApplicationBundle/KnightApplicationBundle.php

namespace Knight\ApplicationBundle;

use Symfony\Component\HttpKernel\Bundle\Bundle;

class KnightApplicationBundle extends Bundle
{
}</code></pre>
<p>Finally we register the bundle into our application:</p>
<pre><code>&lt;?php
// File: app/AppKernel.php

use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Config\Loader\LoaderInterface;

class AppKernel extends Kernel
{
    public function registerBundles()
    {
        return array(
            new Symfony\Bundle\FrameworkBundle\FrameworkBundle(),
            new Knight\ApplicationBundle\KnightApplicationBundle(), // &lt;-- Here!
        );
    }

    public function registerContainerConfiguration(LoaderInterface $loader)
    {
        $loader-&gt;load(__DIR__.'/config/config.yml');
    }
}</code></pre>
<p>Let's commit our work:</p>
<pre><code>git add -A
git commit -m 'Created Application bundle'</code></pre>
<h2 id="bundles-allow-you-to-extend-the-application-s-dic">Bundles allow you to extend the application's DIC<a href="#bundles-allow-you-to-extend-the-application-s-dic" class="anchor">#</a></h2>
<p>The <code>KnightApplicationBundle</code> class extends the following one:</p>
<pre><code>&lt;?php

namespace Symfony\Component\HttpKernel\Bundle;

use Symfony\Component\DependencyInjection\ContainerAware;
use Symfony\Component\Console\Application;

abstract class Bundle extends ContainerAware implements BundleInterface
{
    public function getContainerExtension();
    public function registerCommands(Application $application);
}</code></pre>
<p><em>Note</em>: Only the part we're interested in is shown here.</p>
<p>Those two methods make the bundle capable of autodiscovering its commands and
its Dependency Injection Container's (DIC) extension, if the following directory
directory structure is used:</p>
<pre><code>.
&#9500;&#9472;&#9472; Command
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; *Command.php
&#9500;&#9472;&#9472; DependencyInjection
&#9474;&nbsp;&nbsp; &#9492;&#9472;&#9472; KnightApplicationExtension.php
&#9492;&#9472;&#9472; KnightApplicationBundle.php</code></pre>
<p><em>Note</em>: the only file required in a bundle is the <code>KnightApplicationBundle.php</code>
one.</p>
<p>The name of a bundle (in our example <code>KnightApplication</code>) is composed of:</p>
<ul><li>the vendor name (here our customer's name: <code>Knight</code>)</li>
<li>the actual bundle name (<code>Application</code>)</li>
</ul><p>For your own sake, choose a small one-word name for you vendor name and for your
bundle name (there's no hard rules but that's my advice).</p>
<p>The <code>KnightApplicationExtension</code> class allows you to manipulate the DIC (more
often you'll load a configuration file which can be located in
<code>Resources/config/services.xml</code>).</p>
<p>And that's precisely the purpose of bundles: registering services in the
application's DIC.</p>
<h3 id="side-note-about-dic-and-services">Side note about DIC and services<a href="#side-note-about-dic-and-services" class="anchor">#</a></h3>
<p>Services and Dependency Injection isn't in the scope of this series. However if
you want to discover what it is all about, have a look at these two articles:</p>
<ul><li><a href="../../../2014/01/22/ioc-di-and-service-locator.html">Inversion of Control, Dependency Injection, Dependency Injection Container and Service Locator</a></li>
<li><a href="../../../2014/01/29/sf2-di-component-by-example.html">Symfony2 Dependency Injection component, by example</a></li>
</ul><p><em>Note</em>: this is a kindly reminder about the nature of Symfony2 Components. Those
are third party libraries which can be used on their own outside of the
framework.</p>
<h3 id="side-note-about-commands">Side note about commands<a href="#side-note-about-commands" class="anchor">#</a></h3>
<p>The Symfony2 Console Component allows you to create CLI applications. This
application can have one or many commands. To learn more about them, have a look
at this article:</p>
<ul><li><a href="../../../2014/04/09/sf2-console-component-by-example.html">Symfony2 Console component, by example</a></li>
</ul><p><em>Note</em>: commands aren't in the scope of this article, but they're worth
mentioning.</p>
<h2 id="two-kinds-of-bundles">Two kinds of bundles<a href="#two-kinds-of-bundles" class="anchor">#</a></h2>
<p>There's two kinds of bundle:</p>
<ul><li>third party application integration ones (reusable, shared between
applications)</li>
<li>application's ones (non reusable and dedicated to your business model)</li>
</ul><p>Let's take the <a href="https://github.com/KnpLabs/snappy">KnpLabs snappy library</a>: it
allows you to generate a PDF from a HTML page and can be used in any
applications (non-symfony ones, and even framework-less ones).</p>
<p>The class allowing this generation is
<code>Knp\Bundle\SnappyBundle\Snappy\LoggableGenerator</code>: its construction is a bit
tiresome. To fix this, we can define its construction inside the DIC and
fortunately there's already a bundle doing it for us:
<a href="https://github.com/KnpLabs/KnpSnappyBundle">KnpSnappyBundle</a>.</p>
<p>That's a good example of the first kind of bundles.</p>
<p>Now about the second kind: in our Symfony2 application, we'll need to integrate
our own code to it, one day or another. We could go the long and painful way
(writing a lot of boilerplate code and configurations), or we could use a bundle
to do automatically the job for us!</p>
<p>Sometimes, we'll find applications which have many bundles in order to
categorize them into modules. This isn't necessary and it's a bit tiresome if
you ask me: we can simply create folders in a unique bundle to categorize our
modules.</p>
<p>The creation of many bundles necessitates some extra manual steps. It also makes
little sense as a bundle is supposed to be a decoupled unit: if we create a
UserBundle, FrontendBundle, BlogBundle and ForumBundle, we'll find ourselves
with bundles depending on one another, often with cyclic dependencies and we'll
waste time wondering where to put new classes (which can rely on 3 bundles).</p>
<p>My advice: create a single bundle for your application. If later on you find
that inside it you created a set of classes which makes sense in other projects
(Symfony2 and non-Symfon2 ones alike), then maybe you can extract them to
create a third party library. And then you might create a bundle to integrate
it inside Symfony2 applications.</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Bundles are a way to extend the Dependency Injection Container: they're the glue
layer between your code and Symfony2 applications.</p>
<p>They follow conventions which aren't hard coded (you can override anything),
allowing them to autodiscover some convenient classes.</p>
<p>Thanks for reading, in the next article, we'll create controllers!</p>
<h3 id="next-articles">Next articles<a href="#next-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/07/12/learn-sf2-controllers-part-4.html">4: Controllers</a></li>
<li><a href="../../../2014/07/20/learn-sf2-tests-part-5.html">5: Tests</a></li>
<li><a href="../../../2014/07/23/learn-sf2-conclusion.html">Conclusion</a></li>
</ul><h3 id="previous-articles">Previous articles<a href="#previous-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/06/18/learn-sf2-composer-part-1.html">1: Composer</a></li>
<li><a href="../../../2014/06/25/learn-sf2-empty-app-part-2.html">2: Empty application</a></li>
</ul><h3 id="resources">Resources<a href="#resources" class="anchor">#</a></h3>
<p>Here's a good article about how reusable bundles should be created:</p>
<ul><li><a href="http://elnur.pro/use-only-infrastructural-bundles-in-symfony/">Use only infrastructural bundles in Symfony2, by Elnur Abdurrakhimov</a></li>
</ul><p>You don't like the conventions and you're ready to write a lot of boilerplate
code and configuration? Here you go (I'd not advise you to do so, though):</p>
<ul><li><a href="http://stackoverflow.com/questions/9999433/should-everything-really-be-a-bundle-in-symfony-2-x/10001019#10001019">Should everything really be a bundle in Symfony2?</a></li>
<li><a href="http://danielribeiro.org/blog/yes-you-can-have-low-coupling-in-a-symfony-standard-edition-application/">Yes, you can have low coupling in a Symfony2 application</a></li>
<li><a href="http://elnur.pro/symfony-without-bundles/">Symfony2 without bundles, by Elnur Abdurrakhimov, by Daniel Ribeiro</a></li>
<li><a href="http://php-and-symfony.matthiasnoback.nl/2013/10/symfony2-some-things-i-dont-like-about-bundles/">Symfony2 some things I dont like about bundles, by Matthias Noback</a></li>
<li><a href="http://php-and-symfony.matthiasnoback.nl/2013/10/symfony2-console-commands-as-services-why/">Symfony2 console commands as services why, by Matthias Noback</a></li>
<li><a href="http://www.slideshare.net/matthiasnoback/high-quality-symfony-bundles-tutorial-dutch-php-conference-2014">Naked bundles, slides by Matthias Noback</a></li>
</ul><p>I'm only putting these links because I like how they explain how Symfony2 works
behind the hood, but I wouldn't apply them in a real world application as it
makes too much fuss to no avail (that's my humble opinion anyway).</p>]]></content>
    </entry>
        <entry>
        <title>Learn Symfony2 - part 2: Empty application</title>
                <id>http://gnugat.github.io/2014/06/25/learn-sf2-empty-app-part-2.html</id>
                <updated>2014-06-25T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/06/25/learn-sf2-empty-app-part-2.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>This is the second article of the series on learning
<a href="http://symfony.com/">the Symfony2 framework</a>.
Have a look at the first one: <a href="../../../2014/06/18/learn-sf2-composer-part-1.html">Composer</a>.</p>
<p>In the first article we began to create an empty project with the following
files:</p>
<pre><code>.
&#9500;&#9472;&#9472; composer.json
&#9500;&#9472;&#9472; composer.lock
&#9492;&#9472;&#9472; .gitignore</code></pre>
<p>Running <code>composer install</code> should create a <code>vendor</code> directory, which we ignored
in git.</p>
<p>Here's the <a href="https://github.com/gnugat/learning-symfony2/tree/1-composer">repository where you can find the actual code</a>.</p>
<p>We'll now see how to create an empty Symfony2 application.</p>
<h2 id="the-front-controller">The front controller<a href="#the-front-controller" class="anchor">#</a></h2>
<p>First things first, we will create an index file which will act as a front
controller: it will be the only entry point of our application and will decide
which page to display.</p>
<p>Create its directory:</p>
<pre><code>mkdir web</code></pre>
<p>Then the file:</p>
<pre><code>&lt;?php
// File: web/app.php

use Symfony\Component\HttpFoundation\Request;

require_once __DIR__.'/../vendor/autoload.php';
require_once __DIR__.'/../app/AppKernel.php';

$kernel = new AppKernel('prod', false);
$request = Request::createFromGlobals();
$response = $kernel-&gt;handle($request);
$response-&gt;send();
$kernel-&gt;terminate($request, $response);</code></pre>
<p>First it includes Composer's autoloader: it will require every files needed.</p>
<p>Then we create an instance of our Kernel with the production environment and
the debug utilities disabled. This class acts like a web server: it takes a
HTTP request as input and returns a HTTP response as output.</p>
<p><code>Request::createFromGlobals()</code> creates a representation of the HTTP request.
It is filled from PHP's variable super globals (<code>$_GET</code>, <code>$_POST</code>, etc).</p>
<p>The kernel then handles the request. To keep explanations short, let's simply
say that it will find the controller associated to the requested URL. It is the
controller's responsibility to return a representation of the HTTP response (see
<code>Symfony\Component\HttpFoundation\Response</code>).</p>
<p>The <code>$response-&gt;send()</code> method will simply call the PHP <code>header</code> function and
print a string representing the response's body (usually HTML, JSON or anything
you want).</p>
<p>Finally the <code>$kernel-&gt;terminate()</code> method will call any tasks which registered
to the <code>kernel.terminate</code> event. This alows you to return a response as fast as
possible and then execute some actions like sending emails.</p>
<p><em>Note</em>: events aren't in the scope of this article, but they're worth
mentioning.</p>
<h2 id="creating-the-application-s-kernel">Creating the application's kernel<a href="#creating-the-application-s-kernel" class="anchor">#</a></h2>
<p><a href="http://symfony.com/doc/current/components/http_kernel/introduction.html">The HttpKernel component</a>
provides you with a <code>Kernel</code> class, which we will extend.</p>
<p>Create the following directory:</p>
<pre><code>mkdir app</code></pre>
<p>And then the kernel file:</p>
<pre><code>&lt;?php
// File: app/AppKernel.php

use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Config\Loader\LoaderInterface;

class AppKernel extends Kernel
{
    public function registerBundles()
    {
        return array(
            new Symfony\Bundle\FrameworkBundle\FrameworkBundle(),
        );
    }

    public function registerContainerConfiguration(LoaderInterface $loader)
    {
        $loader-&gt;load(__DIR__.'/config/config.yml');
    }
}</code></pre>
<p>This class will load the project's configuration. This is also where you
register the project's bundles. We'll talk more about bundles in the next
article, for now the only thing you need to know is that they're like plugins.</p>
<p>The Kernel has the responsibility to look at every registered bundle to retrieve
their configuration.</p>
<p>The <code>FrameworkBundle</code> defines some services and allows you to choose what to
enable via configuration.</p>
<p><em>Note</em>: Services are objects which do one thing and do it well. They provide
exactly what they're called: a service. We'll learn more about them in one of
the next article.</p>
<p>We need to put some configuration in order to be able to make it work properly.</p>
<p>Create its directory:</p>
<pre><code>mkdir app/config</code></pre>
<p>And the the YAML file:</p>
<pre><code># File: app/config/config.yml
framework:
    secret: "Three can keep a secret, if two of them are dead."</code></pre>
<p>The <code>secret</code> parameter is used as a seed to generate random strings (for e.g.
CSRF tokens).</p>
<p>Now that we have our application structure, let's commit it:</p>
<pre><code>git add -A
git commit -m 'Created application structure'</code></pre>
<h3 id="logs-and-cache">Logs and cache<a href="#logs-and-cache" class="anchor">#</a></h3>
<p>You'll also need to create <code>logs</code> and <code>cache</code> directories:</p>
<pre><code>mkdir app/{cache,logs}
touch app/{cache,logs}/.gitkeep</code></pre>
<p>Git doesn't allow to commit empty directory, hence the <code>.gitkeep</code> files.</p>
<p>Because files in these directories are temporaries, we'll ignore them:</p>
<pre><code>echo '/app/cache/*' &gt;&gt; .gitignore
echo '/app/logs/*' &gt;&gt; .gitignore
git add -A
git add -f app/cache/.gitkeep
git add -f app/logs/.gitkeep
git commit -m 'Created temporary directories'</code></pre>
<h3 id="apache-configuration">Apache configuration<a href="#apache-configuration" class="anchor">#</a></h3>
<p>In order for your website to be browsed, you'll need to configure your web
server. This configuration is well explained
<a href="http://symfony.com/doc/current/cookbook/configuration/web_server_configuration.html">in the documentation</a>,
so here's a dump of an apache vhost:</p>
<pre><code>&lt;VirtualHost *:80&gt;
    ServerName knight.local

    DocumentRoot /home/loic.chardonnet/Projects/gnugat/knight/web

    ErrorLog "/home/loic.chardonnet/Projects/gnugat/knight/app/logs/apache_errors.log"
    CustomLog "/home/loic.chardonnet/Projects/gnugat/knight/app/logs/apache_accesses.log" common

    &lt;Directory /home/loic.chardonnet/Projects/gnugat/knight/web&gt;
        Options Indexes FollowSymLinks MultiViews
        AllowOverride None
        Order allow,deny
        allow from all
        &lt;IfModule mod_rewrite.c&gt;
            RewriteEngine On
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteRule ^(.*)$ /app.php [QSA,L]
        &lt;/IfModule&gt;
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</code></pre>
<p>If you run into some permission problem (like writing in <code>cache</code> and <code>logs</code>),
you might consider to change <code>APACHE_RUN_USER</code> and <code>APACHE_RUN_GROUP</code>
environment variables present in <code>/etc/apache2/envvars</code> to your own user and
group.</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>A Symfony2 application follows this pattern: a front controller associate an URL
to a controller which takes a HTTP request and returns a HTTP response.</p>
<p>The next article will be all about bundles, so stay tuned :) .</p>
<h3 id="next-articles">Next articles<a href="#next-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/07/02/learn-sf2-bundles-part-3.html">3: Bundles</a></li>
<li><a href="../../../2014/07/12/learn-sf2-controllers-part-4.html">4: Controllers</a></li>
<li><a href="../../../2014/07/20/learn-sf2-tests-part-5.html">5: Tests</a></li>
<li><a href="../../../2014/07/23/learn-sf2-conclusion.html">Conclusion</a></li>
</ul><h3 id="previous-articles">Previous articles<a href="#previous-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/06/18/learn-sf2-composer-part-1.html">1: Composer</a></li>
</ul>]]></content>
    </entry>
        <entry>
        <title>Learn Symfony2 - part 1: Composer</title>
                <id>http://gnugat.github.io/2014/06/18/learn-sf2-composer-part-1.html</id>
                <updated>2014-06-18T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/06/18/learn-sf2-composer-part-1.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>You don't know anything about the <a href="http://symfony.com/">Symfony2</a> framework,
and you'd like a quick guide to learn how to use it, and how it works?</p>
<p>Then this article is for you :) .</p>
<p>Don't get me wrong: one day or another you'll have to read the
<a href="http://symfony.com/doc/current/index.html">documentation</a>, and you'll have to
practice a lot in order to master it. But for now this guide should be a good
start for you.</p>
<p>In the first article of this series, you'll learn about
<a href="https://getcomposer.org/">Composer</a>, which helps you with third party library
installation and updates.</p>
<h2 id="creating-the-project">Creating the project<a href="#creating-the-project" class="anchor">#</a></h2>
<p>In order to understand how Symfony2 works, we won't use the
<a href="http://symfony.com/distributions">Symfony Standard Edition</a>, but rather start
from scratch with the bare minimum.</p>
<p>Let's create our project:</p>
<pre><code>mkdir knight
cd knight
git init</code></pre>
<h2 id="getting-composer">Getting Composer<a href="#getting-composer" class="anchor">#</a></h2>
<p>When developing a project the last thing you want is to waste your time
re-inventing the wheel, so you install third party libraries. Those libraries
have their own life cycle: they might release some bug fixes and new features
after you installed them, so you'll need to update them sometimes.</p>
<p><a href="https://getcomposer.org/">Composer</a> makes these things so easy you'll never
have to worry again about versions. First download it:</p>
<pre><code>curl -sS https://getcomposer.org/installer | php
sudo mv composer.phar /usr/local/bin/composer</code></pre>
<p>And we're done! If only every project were so easy to install... :)</p>
<h2 id="installing-and-updating-symfony2">Installing and updating Symfony2<a href="#installing-and-updating-symfony2" class="anchor">#</a></h2>
<p>Actually, Symfony2 is only a name regrouping many libraries which can be used
individually (you can even use them in other frameworks, CMS or projects like
<a href="http://symfony.com/projects/drupal">Drupal</a>,
<a href="http://symfony.com/projects/phpbb">phpBB</a>,
<a href="http://symfony.com/projects/laravel">Laravel</a>,
<a href="http://symfony.com/projects/ezpublish">eZ Publish</a>,
<a href="http://symfony.com/projects/orocrm">OroCRM</a> and
<a href="http://symfony.com/projects/piwik">Piwik</a> did).</p>
<p><em>Note</em>: Symfony2 libraries are called <code>components</code>.</p>
<p>Composer was made to install libraries, so let's use it:</p>
<pre><code>composer require 'symfony/symfony:~2.5' # install every single libraries in sf2</code></pre>
<p>This command will do the following steps:</p>
<ol><li>create a <code>composer.json</code> configuration file if it doesn't already exist</li>
<li>add <code>symfony/symfony: ~2.5</code> in it (useful for further <code>composer install</code>)</li>
<li>actually download symfony inside the <code>vendor/symfony/symfony</code> directory</li>
<li>create a <code>composer.lock</code> file</li>
</ol><p>Later on, to update those dependencies you'll just have to run
<code>composer update</code>.</p>
<p><em>Note</em>: a library on which you depend upon is called a <code>dependency</code>.</p>
<p>This will look in the <code>composer.lock</code> file to know which version has been
installed (e.g. 2.5.0) and then checks if there's any new version available.
For more information about how Composer handles versions, see
<a href="https://igor.io/2013/01/07/composer-versioning.html">Igor's article</a>.</p>
<p>This means that you can totally ignore the <code>vendor</code> directory:</p>
<pre><code>echo '/vendor/*' &gt;&gt; .gitignore</code></pre>
<p>If your team wants to install your project, they'll just have to clone your
repository and then run <code>composer install</code> which runs into the following steps:</p>
<ol><li>read the <code>composer.json</code> file to see the list of dependencies</li>
<li>read the <code>composer.lock</code> file to check the version installed by the commiter</li>
<li>download the dependencies with the version specified in the lock (even if new
ones are available)</li>
</ol><p>If a dependency is listed in <code>composer.json</code> but not in <code>composer.lock</code>,
Composer will download the last matching version and add it to the lock.</p>
<p>This means that everyone will have the same version installed! If you allow only
one person to run <code>composer update</code> you can guarantee this.</p>
<h2 id="autloading">Autloading<a href="#autloading" class="anchor">#</a></h2>
<p>Because Composer knows where each classes of the installed libraries are, it
provides a nice feature:
<a href="http://www.php.net/manual/en/language.oop5.autoload.php">autoloading</a>.</p>
<p>Simply put, each time a class is called, Composer will automatically include the
file where it's declared.</p>
<p>Your own code too can benefit from it. We just need to edit the <code>composer.json</code>
file:</p>
<pre><code>{
    "require": {
        "symfony/symfony": "~2.5"
    },
    "autoload": {
        "psr-4": {
            "": "src/"
        }
    }
}</code></pre>
<p>And run the following command to take the changes into account:</p>
<pre><code>composer update</code></pre>
<p>This tells Composer that we're going to follow the
<a href="http://www.php-fig.org/psr/psr-4/">PSR-4</a> standard and that we're going to put
our sources in the <code>src</code> directory.</p>
<p><em>Note</em>: PSR 4 requires you to:</p>
<ul><li>create one class per file</li>
<li>give the same name to your file and your class</li>
<li>use the path of the class for the namespace</li>
</ul><p>For example: the file <code>src/Knight/ApplicationBundle/KnightApplicationBundle.php</code>
contains a class named <code>KnightApplicationBundle</code> located in the namespace
<code>Knight\ApplicationBundle</code>.</p>
<p>Don't worry too much about it for now.</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>And that's everything you need to know about Composer for now. Let's commit our
work:</p>
<pre><code>git add -A
git commit -m 'Installed Symfony2'</code></pre>
<p>I hope this could help you, stay tuned for the next articles!</p>
<h3 id="next-articles">Next articles<a href="#next-articles" class="anchor">#</a></h3>
<ul><li><a href="../../../2014/06/25/learn-sf2-empty-app-part-2.html">2: Empty application</a></li>
<li><a href="../../../2014/07/02/learn-sf2-bundles-part-3.html">3: Bundles</a></li>
<li><a href="../../../2014/07/12/learn-sf2-controllers-part-4.html">4: Controllers</a></li>
<li><a href="../../../2014/07/20/learn-sf2-tests-part-5.html">5: Tests</a></li>
<li><a href="../../../2014/07/23/learn-sf2-conclusion.html">Conclusion</a></li>
</ul>]]></content>
    </entry>
        <entry>
        <title>PHP Tokenizer</title>
                <id>http://gnugat.github.io/2014/06/04/php-tokenizer.html</id>
                <updated>2014-06-04T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/06/04/php-tokenizer.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>The <a href="http://www.php.net/manual/en/book.tokenizer.php">PHP Tokenizer documentation</a>
looks a bit empty, and you have to try it out by yourself to understand how it
works.</p>
<p>While I don't mind the "learn by practice" approach (that's actually my
favorite way of learning), it's inconvenient as you might have to re-discover
things when using it again two month later.</p>
<p>To fix this, I'll try to provide a small reference guide in this article.</p>
<h2 id="php-tokens">PHP tokens<a href="#php-tokens" class="anchor">#</a></h2>
<p>A token is just a unique identifier allowing you to define what you're
manipulating: PHP keywords, function names, whitespace and comments are all be
represented as tokens.</p>
<p>If you want to programmatically read a PHP file, analyze its source code and
possibly manipulate it and save the changes, then tokens will make your life
easier.</p>
<p>Here's some actual examples of what tokens are used for:</p>
<ul><li>analyzing PHP code to detect coding standard violations:
<a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer</a></li>
<li>programmatic edition of PHP: <a href="https://github.com/nikic/PHP-Parser">PHP Parser</a></li>
<li>live backport of PHP features (e.g. 5.6 to 5.2):
<a href="https://github.com/igorw/galapagos#galapagos">Galapagos</a></li>
</ul><h2 id="basic-api">Basic API<a href="#basic-api" class="anchor">#</a></h2>
<p>Tokenizer provides you with <code>token_get_all($source)</code> which takes a string
containing PHP source code and makes an array of tokens and informations out of
it.</p>
<p>Here's an example:</p>
<pre><code class="language-php">&lt;?php
$code =&lt;&lt;&lt;'EOF'
&lt;?php

/**
 * @param string $content
 */
function strlen($content)
{
    for ($length = 0; isset($content[$length]); $length++);

    return $length;
}
EOF;

$tokens = token_get_all($code);</code></pre>
<p>Should produce:</p>
<pre><code>$tokens = array(
    // Either a string or an array with 3 elements:
    // 0: code, 1: value, 2: line number

    // Line 1
    array(T_OPEN_TAG, "&lt;?php\n", 1),
    // Line 2
    array(T_WHITESPACE, "\n", 2),
    // Lines 3, 4 and 5
    array(T_DOC_COMMENT, "/**\n * @param string $content\n */", 3), // On many lines
    array(T_WHITESPACE, "\n", 5),
    // Line 6
    array(T_FUNCTION, "function", 6),
    array(T_WHITESPACE, " ", 6), // Empty lines and spaces are the same: whitespace
    array(T_STRING, "strlen", 6),
    "(", // yep, no token nor line number...
    array(T_VARIABLE, "$content", 6),
    ")",
    array(T_WHITESPACE, "\n", 6),
    "{",
    // Line 7
    array(T_WHITESPACE, "\n", 7),
    // Line 8
    array(T_FOR, "for", 8),
    array(T_WHITESPACE, " ", 8),
    "(",
    array(T_VARIABLE, "$length", 8),
    array(T_WHITESPACE, " ", 8),
    "=",
    array(T_WHITESPACE, " ", 8),
    array(T_NUM, "0", 8),
    ";",
    array(T_WHITESPACE, " ", 8),
    array(T_ISSET, "isset", 8),
    "(",
    array(T_VARIABLE, "$content", 8),
    "[",
    array(T_VARIABLE, "$length", 8),
    "]",
    ")",
    ";",
    array(T_WHITESPACE, " ", 8),
    array(T_VARIABLE, "$length", 8),
    array(T_INC, "++", 8),
    ")",
    ";",
    array(T_WHITESPACE, "\n\n", 8), // Double new line in one token
    // Line 10
    array(T_RETURN, "return", 10),
    array(T_WHITESPACE, " ", 10),
    array(T_VARIABLE, "$length", 10),
    ";",
    array(T_WHITESPACE, "\n", 10),
    "}",
);</code></pre>
<p>As you can see some things might seem odd, but once you know it you can start
manipulating the tokens. You should rely only on constants because their value
might vary between versions (e.g. <code>T_OPEN_TAG</code> is <code>376</code> in 5.6 and <code>374</code> in
5.5).</p>
<p>If you want to display a readable representation of the token's constant values,
use <code>token_name($token)</code>.</p>
<h2 id="further-resources">Further resources<a href="#further-resources" class="anchor">#</a></h2>
<p>Here's some resources you might find interresting:</p>
<ul><li><a href="http://www.php.net/manual/en/book.tokenizer.php">Tokenizer documentation</a></li>
<li><a href="http://www.php.net/manual/en/function.token-name.php">token_name documentation</a></li>
<li><a href="http://www.php.net/manual/en/function.token-get-all.php">token_get_all documentation</a></li>
<li><a href="http://www.php.net/manual/en/tokens.php">list of PHP tokens</a></li>
<li><a href="https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y">PHP grammar rules</a></li>
<li><a href="http://stackoverflow.com/a/2751170/3437428">How to get the entire function from a file? on Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/questions/5832412/compiling-an-ast-back-to-source-code">Compiling an AST back to source code, on Stack Overflow</a></li>
<li><a href="https://github.com/nikic/PHP-Parser">PHP Parser</a></li>
<li><a href="https://github.com/igorw/galapagos#galapagos">Galapagos</a></li>
<li><a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer</a></li>
<li><a href="https://github.com/gnugat/redaktilo">Redaktilo</a></li>
<li><a href="http://www.tig12.net/spip/Working-with-PHP-tokens.html">working with PHP tokens by Thierry Graff</a></li>
</ul>]]></content>
    </entry>
        <entry>
        <title>Redaktilo v0.7</title>
                <id>http://gnugat.github.io/2014/05/27/redaktilo-0-7.html</id>
                <updated>2014-05-27T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/05/27/redaktilo-0-7.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><a href="#conclusion">TL;DR: jump to the conclusion</a>.</p>
<p>Since the announcement of <a href="https://github.com/gnugat/redaktilo">Redaktilo</a> on
this blog, this silly library has jumped from 164 lines of code in v0.3 to 571
in v0.7.</p>
<p>In this article:</p>
<ol><li>we'll quickly oversee <a href="#changes-done">the changes done</a></li>
<li>then we'll have some insight on <a href="#upcoming-changes">the upcoming changes</a></li>
<li>finally I'll list <a href="#remaining-unresolved-questions">the remaining unresolved questions</a></li>
</ol><h2 id="changes-done">Changes done<a href="#changes-done" class="anchor">#</a></h2>
<p>Thanks to <a href="https://github.com/gnugat/redaktilo/commits?author=WouterJ">WouterJ</a>
you can now:</p>
<ul><li>remove the current line: <code>$editor-&gt;remove($file);</code></li>
<li>replace the current line: <code>$editor-&gt;changeTo($file, $replacement);</code></li>
<li>replace all occurences: <code>$editor-&gt;replaceWith($file, $regex, $callback);</code></li>
<li>check line presence: <code>$editor-&gt;has($file, $pattern);</code></li>
</ul><p>I've updated to documentation to make the library easier to learn with:</p>
<ul><li>a <a href="https://github.com/gnugat/redaktilo/blob/master/doc/01-tutorial.md">tutorial</a></li>
<li>a <a href="https://github.com/gnugat/redaktilo/blob/master/doc/03-reference.md">code reference</a></li>
</ul><p><strong>Redaktilo</strong> has been created to fulfill actual needs. To make sure it keeps
this promise, I've added executable
<a href="https://github.com/gnugat/redaktilo/tree/master/tests/example">examples using PHPUnit tests</a>.</p>
<p>The major changes have been massive refactorings to allow the library to be
extended:</p>
<ul><li><a href="https://github.com/gnugat/redaktilo/tree/master/src/Gnugat/Redaktilo/Search">you can add search strategies</a></li>
<li><a href="https://github.com/gnugat/redaktilo/tree/master/src/Gnugat/Redaktilo/Converter">you can convert the file's content</a></li>
</ul><p>As highlited by <a href="https://twitter.com/clemherreman/status/466497340824911872">Cl&eacute;ment Herreman</a>,
those refactorings have introduced a more complex construction schema.
To make things easier, a
<a href="https://github.com/gnugat/redaktilo/blob/master/src/Gnugat/Redaktilo/DependencyInjection/StaticContainer.php">static Dependency Injection Container</a>
has been created.</p>
<h2 id="upcoming-changes">Upcoming changes<a href="#upcoming-changes" class="anchor">#</a></h2>
<p><a href="http://www.sublimetext.com/">Sublime Text's go to anything</a> feature is
really awesome, which is why I'd like to implement something similar:</p>
<ul><li>go to the previous/next line (<code>array_search</code>)</li>
<li>go to x lines above/under</li>
<li>go to the previous/next substring match (<code>strpos</code>)</li>
<li>go to the previous/next regex match (<code>preg_grep</code>)</li>
<li>go to the previous/next PHP class/method/function (<code>token_get_all</code>)</li>
</ul><p>The two first ones are already available, so the other one still have to be
implemented (the last one might be done by
<a href="https://github.com/gnugat/redaktilo/issues/6#issuecomment-44005931">Loick Piera</a>).</p>
<p>The methods allowing this throw exception when nothing is found. Adding a
relative check (<code>hasBefore</code> and <code>hasAfter</code>) might make things easier.</p>
<p>Moving relatively isn't always sufficient. To go to an absolute line number
you have to use directly <code>File</code>, maybe it would be nicer to add a new method
to <code>Editor</code> (<code>jumpToFirst</code>).</p>
<p>Finally, the editor should allow insertion, replacement and removal in any
locations, not just on the current line.</p>
<p>Once these features added, more refactoring should take place: since the
creation of <strong>Redaktilo</strong>, <a href="https://github.com/jfsimon">Jean-Fran&ccedil;ois Simon</a>
advised me to use the command and memento patterns, which would allow the
undo/redo feature.
While I now think that <code>Command</code> is indeed more suitable than <code>ReplaceStrategy</code>
for insertion, replacement and removal, I'm not sure the versioning feature
is actually needed... For now.</p>
<p>And that should bring us near an alpha version :) .</p>
<p>A lot of renaming should happen at this stage:</p>
<ul><li><code>changeTo</code> to <code>replace</code></li>
<li><code>replaceWith</code> to <code>replaceAll</code></li>
<li><code>NotSupportedException</code> to <code>NotFoundEsception</code></li>
</ul><p>And perhaps some other methods or class names.</p>
<p>Once the heavy renaming done, beta versions can begin, with a main focus on
making every thing safer (argument checking, exception handling).</p>
<h2 id="remaining-unresolved-questions">Remaining unresolved questions<a href="#remaining-unresolved-questions" class="anchor">#</a></h2>
<p>I'm still not fully sure of what Redaktilo v1.0 will look like. Mainly because
I still haven't anwsered this by question (which have been in my mind since the
begining):</p>
<p>Should <strong>Redaktilo</strong> handle different kinds of files?</p>
<p>Sometimes I think it should, which is why the project has seen:</p>
<ul><li><a href="https://github.com/gnugat/redaktilo/tree/v0.1.0/src/Gnugat/Redaktilo/Editor">Editor interface</a></li>
<li><a href="https://github.com/gnugat/redaktilo/tree/v0.1.0/src/Gnugat/Redaktilo/File">File interface</a></li>
<li><a href="https://github.com/gnugat/redaktilo/tree/v0.6.1/src/Gnugat/Redaktilo">a premature ReplaceEngine/ReploaceStrategy</a></li>
<li><a href="https://github.com/gnugat/redaktilo/tree/v0.7.0/src/Gnugat/Redaktilo/Converter">ContentConverter interface</a></li>
</ul><p>The motives behind this is the JSON use case: you can currently edit JSON
files, but it's tedious.</p>
<p>Let's take the <code>composer.json</code> example. What if you need to
<a href="https://getcomposer.org/doc/articles/scripts.md">add a script</a> when:</p>
<ul><li>there's no <code>scripts</code> section yet?</li>
<li>there's no subsection in <code>script</code> yet?</li>
<li>there's already a script, but not in an array</li>
<li>there's already some scripts</li>
</ul><p>Another example would be the addition of a new element in an array: you
currently have to manually a trailing comma to the previous entry...</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p><strong>Redaktilo</strong> fulfills 98% of my use cases (inserting new lines in a YAML
configuration file, editing PHP files and replacing bits in a documentation
file) and is now extensible.</p>
<p>Some search strategies will be added to make it similar to the
<a href="http://www.sublimetext.com/">Sublime Text's go to anything</a>, and some
refactoring are still necessary before an alpha version.</p>
<p>There's still some unresolved questions (JSON edition is the 2% use case left),
but I'm sure they'll be answered during the development.</p>
<p>In the end <code>Editor</code> should have the following methods (no guaranty on the
names):</p>
<ul><li>filesystem operations: open/save</li>
<li>checking line presence: has/hasBefore/hasAfter</li>
<li>content navigation: jumpTo/jumpUpTo/jumpDownTo</li>
<li>content manipulation: insert/remove/replace (on the current line or at the
given location)</li>
<li>global manipulation: replaceAll</li>
</ul><p>I'd like to thank the early contributors:</p>
<ul><li><a href="https://github.com/jfsimon">Jean-Fran&ccedil;ois Simon</a></li>
<li><a href="https://github.com/gnugat/redaktilo/commits?author=WouterJ">WouterJ</a></li>
<li><a href="https://github.com/gnugat/redaktilo/commit/7c8da2d94e1d659318e9bb1745c8cc19435cb3af#commitcomment-6279956">Cl&eacute;ment Debiaune</a></li>
<li><a href="https://twitter.com/clemherreman/status/466497340824911872">Cl&eacute;ment Herreman</a></li>
<li><a href="https://github.com/gnugat/redaktilo/issues/6#issuecomment-44005931">Loick Piera</a></li>
</ul><p>Any help is appreciated, whether it's some code review, typo fixing or
code/documentation contribution. But the biggest help you could give me:
provide me with some feedback on Redaktilo's usage :) .</p>
<p>If you have any questions, remarks, please feel free to
<a href="https://github.com/gnugat/redaktilo/issues?state=open">open an issue</a> and
start a discussion here.</p>]]></content>
    </entry>
        <entry>
        <title>Facade design pattern, by example</title>
                <id>http://gnugat.github.io/2014/05/21/facade-design-pattern-by-example.html</id>
                <updated>2014-05-21T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/05/21/facade-design-pattern-by-example.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><a href="#conclusion">TL;DR: jump to the conclusion</a>.</p>
<p>Sometimes, you just want to hide low level complexity behind a unique interface
which communicates a high level policy. The Facade design pattern is all about
this.</p>
<p>In this article, we'll see a real world example with
<a href="https://github.com/gnugat/redaktilo">Redaktilo</a>.</p>
<h2 id="low-level-file-manipulation">Low level file manipulation<a href="#low-level-file-manipulation" class="anchor">#</a></h2>
<p><strong>Redaktilo</strong> provides an object oriented way to manipulate files. For example
you can open existing ones, or create new ones:</p>
<pre><code class="language-php">&lt;?php
require_once __DIR__.'/vendor/autoload.php';

use Gnugat\Redaktilo\DependencyInjection\StaticContainer;

$filesystem = StaticContainer::makeFilesystem();

$filename = '/tmp/monthy.py';
if ($filesystem-&gt;exists($filename)) {
    $file = $filesystem-&gt;open('/tmp/existing.txt');
} else {
    $file = $filesystem-&gt;create('/tmp/new.txt');
}

// ...</code></pre>
<p>The main interest in this library lies in manipulations you can do, for example
jumping to a line and adding a new one under it:</p>
<pre><code class="language-php">&lt;?php
// ...

$lineSearchStrategy = StaticContainer::makeLineSearchStrategy();
$lineReplaceStrategy = StaticContainer::makeLineReplaceStrategy();

$lineNumber = $lineSearchStrategy-&gt;findNext('if Knight.saysNi():');
$lineReplaceStrategy-&gt;insertAt($file, $lineNumber, '    print "Ni!"');

// ...</code></pre>
<p>Finally, you need to actually save the changes (they were only done in memory
until now) :</p>
<pre><code class="language-php">// ...

$filesystem-&gt;write($file);</code></pre>
<h2 id="a-higher-level-api">A higher level API?<a href="#a-higher-level-api" class="anchor">#</a></h2>
<p>The Filesystem and Search/Replace strategies are low level APIs and require a
lot of boilerplate code to do every day tasks.</p>
<p>What if we provided a unique interface in front of those services? One that
would be in a higher level, say a text editor metaphor for instance?</p>
<pre><code class="language-php">&lt;?php
require_once __DIR__.'/vendor/autoload.php';

use Gnugat\Redaktilo\DependencyInjection\StaticContainer;

$editor = StaticContainer::makeEditor();

$filename = '/tmp/monthy.py';
$file = $editor-&gt;open($filename, true); // Force file creation.

$editor-&gt;jumpDownTo($file, 'if Knight.saysNi():');
$editor-&gt;addAfter($file, '    print "Ni!"');

$editor-&gt;save($file);</code></pre>
<p>You don't need to take care of every service creation, and now you only have to
learn a small set of methods. The text editor metaphor also provides you with a
neat way to easily remember these methods!</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Facades hide low level implementation by providing a unique high level API.</p>
<p>Here's another blog post about this pattern, by
<a href="http://mikeebert.tumblr.com/post/25342991856/design-pattern-facade-pattern">Mike Ebert</a>.</p>
<p>I hope you found this article interesting, if you have any questions or
feedback please feel free to do so on <a href="https://twitter.com/epiloic">Twitter</a>.</p>]]></content>
    </entry>
        <entry>
        <title>Open/Closed principle, by example</title>
                <id>http://gnugat.github.io/2014/05/14/open-closed-principle-by-example.html</id>
                <updated>2014-05-14T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/05/14/open-closed-principle-by-example.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><a href="#conclusion">TL;DR: jump to the conclusion</a>.</p>
<p>This week I've read two articles, which just have been published, on the
Open/Closed principle:</p>
<ul><li>one by <a href="http://blog.8thlight.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html">Uncle Bob</a></li>
<li>another one by <a href="http://verraes.net/2014/05/final-classes-in-php/">Mathias Verraes</a></li>
</ul><p>I'd like to add my small contribution to their explanation by providing a real
world example: <a href="https://github.com/gnugat/redaktilo">Redaktilo</a>.</p>
<h2 id="problem-statement">Problem statement<a href="#problem-statement" class="anchor">#</a></h2>
<p>Let's say you have the following file:</p>
<pre><code>Egg
Sausage
Bacon
Spam</code></pre>
<p>Redaktilo provides an <code>Editor</code> class which allows you to jump to the line you
want, provided that you know exactly its content:</p>
<pre><code class="language-php">$editor-&gt;has($file, 'Bacon'); // true!
$editor-&gt;jumpDownTo($file, 'Bacon'); // Current line: Bacon
$editor-&gt;jumpUpTo($file, 'Sausage'); // Current line: Sausage</code></pre>
<p>But what if you want to jump two lines under <code>Sausage</code>? You'd have to create
a new method:</p>
<pre><code class="language-php">$editor-&gt;moveDown($file, 2); // Current line: Spam</code></pre>
<p>You have extended <code>Editor</code> by modifying it.</p>
<h2 id="complying-to-the-open-closed-principle">Complying to the Open/Closed principle<a href="#complying-to-the-open-closed-principle" class="anchor">#</a></h2>
<p>Having to fork a library to extend it doesn't feel natural. What does the
Open/Closed principle say?</p>
<blockquote>
<p>Software entities (classes, modules, functions, etc.) should be open for
extension, but closed for modification.</p>
</blockquote>
<p>Our <code>Editor</code> class is open to extension, but also to modification.</p>
<p>To fix this, we can transfer the responsibility of finding a pattern in the file
to a <code>SearchStrategy</code>:</p>
<pre><code class="language-php">&lt;?php

namespace Gnugat\Redaktilo\Search;

use Gnugat\Redaktilo\File;

interface SearchStrategy
{
    public function has(File $file, $pattern);

    public function findNext(File $file, $pattern);
    public function findPrevious(File $file, $pattern);

    public function supports($pattern);
}
</code></pre>
<p>Here's some implementation ideas:</p>
<ul><li><code>LineSearchStrategy</code>: looking for the exact line in the file</li>
<li><code>LineNumberSearchStrategy</code>: jumping to a line relatively to the current one</li>
<li><code>RegexpSearchStrategy</code>: looking for a pattern in the file using regular expressions</li>
<li><code>PhpTokenSearchStrategy</code>: parsing PHP tokens</li>
</ul><p>The <code>supports</code> method tells you that <code>LineSearchStrategy</code> needs <code>$pattern</code> to be
a string, but that <code>RegexpSearchStrategy</code> needs an <code>Expression</code> value object.</p>
<p>The responsibility to find a <code>SearchStrategy</code> which supports the given pattern
should be delegated to <code>SearchEngine</code>:</p>
<pre><code class="language-php">&lt;?php

namespace Gnugat\Redaktilo\Search;

class SearchEngine
{
    private $searchStrategies = array();

    public function registerStrategy(SearchStrategy $searchStrategy)
    {
        $this-&gt;searchStrategies[] = $searchStrategy;
    }

    public function resolve($pattern)
    {
        foreach ($this-&gt;searchStrategies as $searchStrategy) {
            if ($searchStrategy-&gt;supports($pattern)) {
                return $searchStrategy;
            }
        }

        throw new PatternNotSupportedException($pattern);
    }
}</code></pre>
<p>You no longer need to fork Redaktilo to add new search related behavior, you can
now just create a new implementation of <code>SearchStrategy</code>, register it into
<code>SearchEngine</code> and then inject it into the <code>Editor</code>:</p>
<pre><code class="language-php">use Gnugat\Redaktilo\Editor;
use Gnugat\Redaktilo\Filesystem;
use Gnugat\Redaktilo\Search\SearchEngine;
use Gnugat\Redaktilo\Search\LineNumberSearchStrategy;
use Gnugat\Redaktilo\Search\LineSearchStrategy;
use Symfony\Component\Filesystem\Filesystem as SymfonyFilesystem;

$searchEngine = new SearchEngine();

$lineSearchStrategy = new LineSearchStrategy();
$searchEngine-&gt;registerStrategy($lineSearchStrategy);

$lineNumberSearchStrategy = new LineNumberSearchStrategy();
$searchEngine-&gt;registerStrategy($lineNumberSearchStrategy);

$symfonyFilesystem = new SymfonyFilesystem();
$filesystem = new Filesystem($symfonyFilesystem);
$editor = new Editor($filesystem, $searchEngine);</code></pre>
<p>We just made Redaktilo open to extension (still) and closed to modifications,
hooray!</p>
<h2 id="editor-s-diff">Editor's diff<a href="#editor-s-diff" class="anchor">#</a></h2>
<p>Here's what <code>Editor</code> looked like after adding <code>moveDown</code>:</p>
<pre><code class="language-php">&lt;?php

namespace Gnugat\Redaktilo;

class Editor
{
    public function jumpDownTo(File $file, $pattern)
    {
        $lines = $file-&gt;readlines();
        $filename = $file-&gt;getFilename();
        $currentLineNumber = $file-&gt;getCurrentLineNumber() + 1;
        $length = count($lines);
        while ($currentLineNumber &lt; $length) {
            if ($lines[$currentLineNumber] === $pattern) {
                $file-&gt;setCurrentLineNumber($currentLineNumber);

                return;
            }
            $currentLineNumber++;
        }

        throw new \Exception("Couldn't find line $pattern in $filename");
    }

    public function jumpUpTo(File $file, $pattern)
    {
        $lines = $file-&gt;readlines();
        $filename = $file-&gt;getFilename();
        $currentLineNumber = $file-&gt;getCurrentLineNumber() - 1;
        while (0 &lt;= $currentLineNumber) {
            if ($lines[$currentLineNumber] === $pattern) {
                $file-&gt;setCurrentLineNumber($currentLineNumber);

                return;
            }
            $currentLineNumber--;
        }

        throw new \Exception("Couldn't find line $pattern in $filename");
    }

    public function moveUp(File $file, $lines = 1)
    {
        $newLineNumber = $file-&gt;getCurrentLineNumber() - $lines;

        if ($newLineNumber &lt; 0) {
            $newLineNumber = 0;
        }

        $file-&gt;setCurrentLineNumber($newLineNumber);
    }

    public function has(File $file, $pattern)
    {
        return $file-&gt;hasLine($pattern);
    }
}</code></pre>
<p>And now, here's what it looks like:</p>
<pre><code class="language-php">&lt;?php

namespace Gnugat\Redaktilo;

use Gnugat\Redaktilo\Search\SearchEngine;

class Editor
{
    private $searchEngine;

    public function __construct(SearchEngine $searchEngine)
    {
        $this-&gt;searchEngine = $searchEngine;
    }

    public function jumpDownTo(File $file, $pattern)
    {
        $searchStrategy = $this-&gt;searchEngine-&gt;resolve($pattern);
        $foundLineNumber = $searchStrategy-&gt;findNext($file, $pattern);

        $file-&gt;setCurrentLineNumber($foundLineNumber);
    }

    public function jumpUpTo(File $file, $pattern)
    {
        $searchStrategy = $this-&gt;searchEngine-&gt;resolve($pattern);
        $foundLineNumber = $searchStrategy-&gt;findPrevious($file, $pattern);

        $file-&gt;setCurrentLineNumber($foundLineNumber);
    }

    public function has(File $file, $pattern)
    {
        $searchStrategy = $this-&gt;searchEngine-&gt;resolve($pattern);

        return $searchStrategy-&gt;has($file, $pattern);
    }
}</code></pre>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>You should be able to add new features without modifying existing code.</p>
<p>I hope you found this article interesting, if you have any questions or
feedback please feel free to do so on <a href="https://twitter.com/epiloic">Twitter</a>.</p>]]></content>
    </entry>
        <entry>
        <title>Redaktilo: because your code too needs an editor</title>
                <id>http://gnugat.github.io/2014/05/09/redaktilo.html</id>
                <updated>2014-05-09T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/05/09/redaktilo.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><a href="#conclusion">TL;DR: jump to the conclusion</a>.</p>
<p>I've been working on a silly library lately:
<a href="https://github.com/gnugat/redaktilo">Redaktilo</a> (it means editor in esperanto).</p>
<p>Redaktilo has been created to fulfill actual needs. In this article we'll see
what it is all about, and why it won't stay silly for long.</p>
<h2 id="use-case-1-yaml-configuration-edition">Use case 1: YAML configuration edition<a href="#use-case-1-yaml-configuration-edition" class="anchor">#</a></h2>
<p><a href="https://github.com/Incenteev/ParameterHandler">Incenteev\ParameterHandler</a>
is a good example: it updates a YAML configuration after each update of the
dependencies using <a href="https://getcomposer.org/">Composer</a>.</p>
<p>It uses the
<a href="http://symfony.com/doc/current/components/yaml/introduction.html">Symfony2 Yaml component</a>
which converts a YAML string into a PHP array, and then converts it back.
The problem with it is that it strips empty lines, custom formatting and
comments...</p>
<p>Redaktilo only inserts a new line in the file, leaving it as it is.</p>
<h2 id="use-case-2-json-file-edition">Use case 2: JSON file edition<a href="#use-case-2-json-file-edition" class="anchor">#</a></h2>
<p>The <code>composer.json</code> file is really usefull and can be almost completly edited
using the <code>composer.phar</code> CLI application.</p>
<p>Some part still need manual edition, like the script section. To automate this
you could use <code>json_decode</code> and <code>json_encode</code>, but similarly to the previous use
case you would lose empty lines and custom formatting...</p>
<p>Redaktilo aims at solving this problem, but isn't ready yet: inserting a line
in JSON often means adding a comma at the end of the previous one.</p>
<h2 id="use-case-3-php-source-code-edition">Use case 3: PHP source code edition<a href="#use-case-3-php-source-code-edition" class="anchor">#</a></h2>
<p>To be fair this use case isn't limited to PHP source code: it can be useful for
any plain text files (text, XML, java, python, anything).</p>
<p><a href="https://github.com/gnugat/GnugatWizardBundle">GnugatWizardBundle</a> automatically
registers new bundles installed using Composer in your Symfony2 application.</p>
<p>To do so it uses
<a href="https://github.com/sensiolabs/SensioGeneratorBundle">SensioGeneratorBundle</a>'s
<a href="https://github.com/sensiolabs/SensioGeneratorBundle/blob/8b7a33aa3d22388443b6de0b0cf184122e9f60d2/Manipulator/KernelManipulator.php">KernelManipulator</a>
to insert a line in the <code>app/AppKernel.php</code>. However this class registers bundles for every
environments, and doesn't take into account bundle which depend on the kernel.</p>
<p>If you take a look at the <a href="https://github.com/sensiolabs/SensioGeneratorBundle/blob/8b7a33aa3d22388443b6de0b0cf184122e9f60d2/Manipulator/KernelManipulator.php">KernelManipulator source code</a>
you'll realise it has been a bit over engineered as it parses PHP tokens.</p>
<p>A new <code>KernelManipulator</code> could be written using Redaktilo as follow:</p>
<pre><code class="language-php">&lt;?php

namespace Sensio\Bundle\GeneratorBundle\Manipulator;

use Gnugat\Redaktilo\Editor;

class KernelManipulator extends Manipulator
{
    protected $editor;
    protected $appKernelFilename;

    public function __construct(Editor $editor, $appKernelFilename)
    {
        $this-&gt;editor = $editor;
        $this-&gt;appKernelFilename = $appKernelFilename;
    }

    public function addBundle($bundle)
    {
        $file = $this-&gt;editor-&gt;open($this-&gt;appKernelFilename);
        $newLine = sprintf('            new %s(),', $bundle);

        $this-&gt;editor-&gt;jumpDownTo('    public function registerBundles()');
        $this-&gt;editor-&gt;jumpDownTo('        $bundles = array(');
        $this-&gt;editor-&gt;jumpDownTo('        );');

        $this-&gt;editor-&gt;addBefore($file, $newLine);

        $this-&gt;editor-&gt;save($file);

        return true;
    }
}</code></pre>
<h2 id="usage">Usage<a href="#usage" class="anchor">#</a></h2>
<p>A great effort has been put to document the project, as you can see in the
<a href="https://github.com/gnugat/redaktilo/#redaktilo">README</a>.</p>
<p>Here's an overview!</p>
<p>You can install Redaktilo using <a href="https://getcomposer.org/">Composer</a>:</p>
<pre><code>composer require "gnugat/redaktilo:~0.3@dev"</code></pre>
<p>Then you need to create an instance of the <code>Editor</code> class:</p>
<pre><code class="language-php">&lt;?php
require_once __DIR__.'/vendor/autoload.php';

use Gnugat\Redaktilo\Filesystem;
use Gnugat\Redaktilo\Editor;
use Symfony\Component\Filesystem\Filesystem as SymfonyFilesystem;

$symfonyFilesystem = new SymfonyFilesystem();
$filesystem = new Filesystem($symfonyFilesystem);
$editor = new Editor($filesystem);</code></pre>
<p><code>Editor</code> is completly stateless, which means you can use the same instance
everywhere in your scripts/applications/libraries.</p>
<p>Let's now have a look at the available classes and their responsibility.</p>
<h2 id="file">File<a href="#file" class="anchor">#</a></h2>
<p>The basic idea behind Redaktilo is to provide an object oriented way to
represent files:</p>
<pre><code class="language-php">&lt;?php

namespace Gnugat\Redaktilo;

class File
{
    public function getFilename();

    public function read();
    public function write($newContent);

    // ...
}</code></pre>
<p>Once this domain model available, you can build services to manipulate it.</p>
<h2 id="filesystem">Filesystem<a href="#filesystem" class="anchor">#</a></h2>
<p>This is the first service available:</p>
<pre><code class="language-php">&lt;?php

namespace Gnugat\Redaktilo;

class Filesystem
{
    public function open($filename); // Cannot open new files
    public function create($filename); // Cannot create existing files

    public function exists($filename);

    public function write(File $file);
}</code></pre>
<p>It creates instances of <code>File</code> and write their content in the actual file.</p>
<h2 id="editor">Editor<a href="#editor" class="anchor">#</a></h2>
<p>Developers should only use the <code>Editor</code> class: it's a facade which provides the
text edition metaphor:</p>
<pre><code class="language-php">&lt;?php

namespace Gnugat\Redaktilo;

class Editor
{
    // Filesystem operations.
    public function open($filename, $force = false);
    public function save(File $file);

    // Line insertion.
    public function addBefore(File $file, $add);
    public function addAfter(File $file, $add);

    // Content navigation.
    public function jumpDownTo(File $file, $line);
    public function jumpUpTo(File $file, $line);
}</code></pre>
<p>And that's it.It told you it was a small and simple library ;) . Now let's see
what's planned for the next releases.</p>
<h2 id="version-0-4-should-bring-searchengine">Version 0.4 should bring SearchEngine<a href="#version-0-4-should-bring-searchengine" class="anchor">#</a></h2>
<p>There's still some search logic left in <code>Editor</code>.</p>
<p>To remove it, a whole system will be put in place: <code>SearchEngineCollection</code> will
be called by <code>Editor</code> and will ask its <code>SearchEngine</code>s if they support the
pattern.</p>
<p>This should allow many search strategies:</p>
<ul><li>find by line (what's currently done, an exact matching)</li>
<li>find by line number</li>
<li>find by regexp</li>
<li>find by symbol (similar to <a href="http://www.sublimetext.com/">SublimeText</a>'s <code>@</code>)</li>
</ul><p>You could then have an extending point!</p>
<h2 id="version-0-5-should-bring-contentconverter">Version 0.5 should bring ContentConverter<a href="#version-0-5-should-bring-contentconverter" class="anchor">#</a></h2>
<p>Some extra logic are also left in <code>File</code>, regarding the conversion of the
content into an array of lines.</p>
<p><code>ContentConverter</code> could take a file, and convert its content into anything:</p>
<ul><li>an array of lines</li>
<li>an array of <code>IndentedLine</code></li>
<li>PHP tokens</li>
</ul><p>This would allow new types of <code>SearchEngine</code>, and maybe the creation of
<code>ContentEditor</code> which would bear the single responsibility of inserting,
replacing or removing bits of it.</p>
<h2 id="i-need-your-humble-opinion-help">I need your humble opinion / help<a href="#i-need-your-humble-opinion-help" class="anchor">#</a></h2>
<p>I'd like to hear about more use cases: what would you do with Redaktilo? What
would you like to do with it?</p>
<p>You can <a href="https://github.com/gnugat/redaktilo/issues/new">open issues to start discussions</a>,
just make sure to provide a real life use case ;) .</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p><a href="https://github.com/gnugat/redaktilo">Redaktilo</a> provides an Object Oriented way
to manipulate files, through the editor metaphor:</p>
<ul><li>your scripts can open a file</li>
<li>they can then navigate in the file to select a line</li>
<li>next, they can insert a new line above/under the current one</li>
<li>finally they can save the changes on the filesystem</li>
</ul>]]></content>
    </entry>
        <entry>
        <title>PHP generators and coroutines</title>
                <id>http://gnugat.github.io/2014/04/30/php-generators-and-coroutines.html</id>
                <updated>2014-04-30T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/04/30/php-generators-and-coroutines.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><a href="#conclusion">TL;DR: jump to the conclusion</a>.</p>
<p>In PHP ~5.5, a function containing <code>yield</code> becomes an instance of the
<a href="http://php.net/manual/en/class.generator.php"><code>Generator</code> class</a>, which acts
like an iterator.</p>
<p>Each <code>yield</code> occurence marks a position. Calling <code>next</code> will move from the
current yield to the next one.</p>
<p>Thanks to the <code>send</code> method, the <code>Generator</code> class acts also as a corroutine:
you can send the returned value of the <code>yield</code> occurence.</p>
<p>A <code>Generator</code> function cannot return a value.</p>
<h2 id="generator-api">Generator API<a href="#generator-api" class="anchor">#</a></h2>
<pre><code class="language-php">class Generator
{
    public function current(); // The yielded value.
    public function key();

    public function valid(); // Has the iterator been closed?

    public function next(); // Resumes execution.
    public function rewind();

    public function send($value); // Sends the value to be returned by the current yield, and resumes execution.
    public function throw(Exception $e); // Replaces the current yield with `throw $e;`
}</code></pre>
<h2 id="examples">Examples<a href="#examples" class="anchor">#</a></h2>
<h3 id="simple-example">Simple example<a href="#simple-example" class="anchor">#</a></h3>
<pre><code class="language-php">function direct_generator()
{
    yield 1;
    yield 'index' =&gt; 2;
}

$generator = direct_generator();
echo $generator-&gt;current(); // outputs 1
$generator-&gt;next();
echo $generator-&gt;current(); // outputs 2
echo $generator-&gt;key(); // outputs index
</code></pre>
<h3 id="range-example">Range example<a href="#range-example" class="anchor">#</a></h3>
<p>The <code>foreach</code> loop internally calls <code>current</code>, <code>key</code>, <code>next</code> and <code>valid</code> methods:</p>
<pre><code class="language-php">function xrange($start, $end)
{
    $value = $start;
    while ($value &lt;= $end) {
        yield $value;
        $value++;
    }
}

foreach(xrange(1, 2) as $value) {
    echo $value; // outputs 1, then 2.
}</code></pre>
<h3 id="co-routine-example">Co-routine example<a href="#co-routine-example" class="anchor">#</a></h3>
<p>Calling the <code>send</code> method is like replacing the current <code>yield</code> with the given
value.</p>
<pre><code class="language-php">function holy_grail_countdown($number)
{
    while (0 &lt; $number) {
        $reset = (yield $number);
        $number = $reset ?: $number - 1;
    }
}

$c = holy_grail_countdown(5);
foreach ($c as $number) {
    echo "$number\n"; // outputs 5, then 2 and finally 1.
    if (5 === $number) {
        $c-&gt;send(3);
    }
}</code></pre>
<h2 id="links-to-use-cases">Links to use cases<a href="#links-to-use-cases" class="anchor">#</a></h2>
<p>I've first encountered generators and couritines in Python a long time ago, but
never really grasped its utility.</p>
<p>It's only recently that I've found some articles describing some usefull use
cases, so I'm just going to share them with you:</p>
<ul><li><a href="http://eli.thegreenplace.net/2009/08/29/co-routines-as-an-alternative-to-state-machines/">co-routines as an alternative to state machines</a></li>
<li><a href="http://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html">Cooperative multitasking using co-routines in PHP</a></li>
<li><a href="http://stackoverflow.com/a/1347772">Python generators and co-routines</a></li>
<li><a href="http://blog.ircmaxell.com/2012/07/what-generators-can-do-for-you.html">What generators can do for you</a></li>
<li><a href="http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html">Coroutines in C</a></li>
</ul><p>Another helpful resource would be the <a href="https://wiki.php.net/rfc/generators">PHP's RFC</a>,
which I find more explicative than the actual documentation.</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Generators allow you to pause the execution of a function and resume back to
where it stopped. Coroutines allow you to send a value while resuming back to
it!</p>
<p>If you have any comments or questions, feel free to notify me on
<a href="https://twitter.com/epiloic">Twitter</a>.</p>]]></content>
    </entry>
        <entry>
        <title>Symfony2 Sessions introduction</title>
                <id>http://gnugat.github.io/2014/04/23/sf2-sessions-introduction.html</id>
                <updated>2014-04-23T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/04/23/sf2-sessions-introduction.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><a href="#conclusion">TL;DR: jump to the conclusion</a>.</p>
<p>The <a href="http://symfony.com/doc/current/components/http_foundation/introduction.html">Symfony2 HttpFoundation component</a>
is a library which provides an Object Oriented implementation of the HTTP
protocol: it wraps PHP's variable superglobals (<code>$_POST</code>, <code>$_GET</code>, <code>$_SERVER</code>,
etc) inside objects (<code>Request</code>, <code>Response</code>, <code>Session</code>, etc).</p>
<p>The idea behind it: web applications should receive a Request and return a
Response.</p>
<p>In this article, we'll focus on the Session management which solves many issues
(for example the <a href="https://www.google.com/search?q=php+session+already+started+error">PHP session already started error</a>
nightmare).</p>
<p>This introduction will show you how to use it in a "non-symfony" project:</p>
<ol><li><a href="#basics">Basics</a></li>
<li><a href="#examples">Examples</a>
<ul><li><a href="#simple-attributes">Simple attributes</a></li>
<li><a href="#deep-attributes">Deep attributes</a></li>
</ul></li>
<li><a href="#going-further">Going further</a>
<ul><li><a href="#root-attributes">Root attributes</a></li>
<li><a href="#documentation">Documentation</a></li>
<li><a href="#troubleshooting">Troubleshooting</a></li>
</ul></li>
</ol><h2 id="basics">Basics<a href="#basics" class="anchor">#</a></h2>
<p>In almost any cases, you'll only deal with the following three methods of the
<code>Session</code> object:</p>
<pre><code>&lt;?php

namespace Symfony\Component\HttpFoundation\Session;

use Symfony\Component\HttpFoundation\Session\SessionBagInterface;

class Session implements SessionInterface, \IteratorAggregate, \Countable
{
    public function registerBag(SessionBagInterface $bag);
    public function start();
    public function getBag($name);
}</code></pre>
<p>A <code>Bag</code> is a group of attributes stored in the session. Again, in most cases
you'll only deal with the following four methods of the <code>AttributeBag</code> object:</p>
<pre><code>&lt;?php

namespace Symfony\Component\HttpFoundation\Session\Attribute;

class AttributeBag implements AttributeBagInterface, \IteratorAggregate, \Countable
{
    public function __construct($storageKey = '_sf2_attributes');
    public function setName($name);
    public function get($name, $default = null);
    public function set($name, $value);
}</code></pre>
<p>When using the sessions, you'll generally need to bootstrap things up as follows:</p>
<pre><code>&lt;?php

$session = new Session();

$myAttributeBag = new AttributeBag('my_storage_key');
$myAttributeBag-&gt;setName('some_descriptive_name');
$session-&gt;registerBag($myAttributeBag);

$session-&gt;start();</code></pre>
<p>The session <strong>MUST</strong> be started by Symfony2, and it <em>SHOULD</em> be started after
the bag registrations.</p>
<h2 id="examples">Examples<a href="#examples" class="anchor">#</a></h2>
<p>Here's some code samples to make things clear.</p>
<h3 id="simple-attributes">Simple attributes<a href="#simple-attributes" class="anchor">#</a></h3>
<p>Let's assume that our session looks like this:</p>
<pre><code>&lt;?php

$_SESSION = array(
    'user' =&gt; array(
        'first_name' =&gt; 'Arthur',
        'last_name' =&gt; 'Dent',
    ),
);</code></pre>
<p>Here's the bootstrap code we need:</p>
<pre><code>&lt;?php

$session = new Session();

$userAttributeBag = new AttributeBag('user');
$session-&gt;registerBag($userAttributeBag);

$session-&gt;start();</code></pre>
<p>The equivalent to:</p>
<pre><code>&lt;?php

$firstName = 'Ford';
if (isset($_SESSION['user']['first_name'])) {
    $firstName = $_SESSION['user']['first_name'];
}
$_SESSION['user']['last_name'] = 'Prefect';</code></pre>
<p>Would be:</p>
<pre><code>&lt;?php

$userAttributeBag = $session-&gt;getBag('user');

$firstName = $userAttributeBag-&gt;get('first_name', 'Ford');
$userAttributeBag-&gt;set('last_name', 'Prefect');</code></pre>
<h3 id="deep-attributes">Deep attributes<a href="#deep-attributes" class="anchor">#</a></h3>
<p>Now, let's assume we have a session which has deep attributes:</p>
<pre><code>&lt;?php

$_SESSION = array(
    'authentication' =&gt; array(
        'tokens' =&gt; array(
            'github' =&gt; 'A45E96F',
            'twitter' =&gt; '11AEBC980D456E4EF',
        ),
    ),
);</code></pre>
<p>Here's the bootstrap code we need:</p>
<pre><code>&lt;?php

$session = new Session();

$authenticationAttributeBag = new NamespacedAttributeBag('authentication');
$session-&gt;registerBag($authenticationAttributeBag);

$session-&gt;start();</code></pre>
<p>The equivalent to:</p>
<pre><code>&lt;?php

$_SESSION['authentication']['tokens']['github'] = 'AEB558F02C3B346';</code></pre>
<p>Would be:</p>
<pre><code>&lt;?php

$authenticationAttributeBag = $session-&gt;getBag($authenticationAttributeBag);

$authenticationAttributeBag-&gt;set('tokens/github', 'AEB558F02C3B346');</code></pre>
<h2 id="going-further">Going further<a href="#going-further" class="anchor">#</a></h2>
<p>The <code>Session</code> has been designed to contain a group of attribute bags. But when
working with legacy sessions, you might have to access attributes which are
located at the root of the session. Here's how to extend the <code>Session</code> to allow
this.</p>
<h3 id="root-attributes">Root attributes<a href="#root-attributes" class="anchor">#</a></h3>
<p>A root attribute might look like:</p>
<pre><code>&lt;?php

$_SESSION = array(
    'attribute' =&gt; 'value',
);</code></pre>
<p>You need to create your own kind of <code>Bag</code>:</p>
<pre><code>&lt;?php

namespace Acme\Session;

use Symfony\Component\HttpFoundation\Session\SessionBagInterface;

class RootAttributeBag implements SessionBagInterface
{
    private $name = 'single_attribute';

    /** @var string */
    private $storageKey;

    /** @var mixed */
    private $attribute;

    public function __construct($storageKey)
    {
        $this-&gt;storageKey = $storageKey;
    }

    /** {@inheritdoc} */
    public function getName()
    {
        return $this-&gt;name;
    }

    public function setName($name)
    {
        $this-&gt;name = $name;
    }

    /** {@inheritdoc} */
    public function initialize(array &amp;$array)
    {
        $attribute = !empty($array) ? $array[0] : null;
        $this-&gt;attribute = &amp;$attribute;
    }

    /** {@inheritdoc} */
    public function getStorageKey()
    {
        return $this-&gt;storageKey;
    }

    /** {@inheritdoc} */
    public function clear()
    {
        $this-&gt;attribute = null;
    }

    public function get()
    {
        return $this-&gt;attribute;
    }

    public function set($value)
    {
        $this-&gt;attribute = $value;
    }
}</code></pre>
<p>The <code>storage key</code> will be directly the attribute's key.</p>
<p>We also need to hack a <code>Storage</code> class which supports our <code>Bag</code>:</p>
<pre><code>&lt;?php

namespace Acme\Session;

use Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage;

class LegacySessionStorage extends NativeSessionStorage
{
    /** {@inheritdoc} */
    protected function loadSession(array &amp;$session = null)
    {
        if (null === $session) {
            $session = &amp;$_SESSION;
        }

        $bags = array_merge($this-&gt;bags, array($this-&gt;metadataBag));

        foreach ($bags as $bag) {
            $key = $bag-&gt;getStorageKey();
            // We cast $_SESSION[$key] to an array, because of the SessionBagInterface::initialize() signature
            $session[$key] = isset($session[$key]) ? (array) $session[$key] : array();
            $bag-&gt;initialize($session[$key]);
        }

        $this-&gt;started = true;
        $this-&gt;closed = false;
    }
}</code></pre>
<p>Finally, we'll need the following bootstrap code:</p>
<pre><code>&lt;?php

use Acme\Session\LegacySessionStorage;
use Acme\Session\RootAttributeBag;
use Symfony\Component\HttpFoundation\Session\Session;

$sessionStorage = new LegacySessionStorage();
$session = new Session($sessionStorage);

// before: $_SESSION['attribute']
$legacyBag = new RootAttributeBag('attribute');
$legacyBag-&gt;setName('legacy');

// after: $session-&gt;getBag('legacy')-&gt;get()
$session-&gt;registerBag($legacyBag);</code></pre>
<h3 id="documentation">Documentation<a href="#documentation" class="anchor">#</a></h3>
<p><a href="http://symfony.com/doc/current/components/http_foundation/sessions.html">The official documentation</a>
provides useful information about how the session use it.
For example it explains <a href="http://symfony.com/doc/current/components/http_foundation/sessions.html#flash-messages">how to manage flash messages</a>.</p>
<p>It also explains <a href="http://symfony.com/doc/current/components/http_foundation/session_configuration.html">how the session works behind the scene</a>
with useful tips on how to write the session in a database.</p>
<p><a href="http://symfony.com/doc/current/cookbook/session/index.html">Some cookbooks</a> are
also available.
You can find for instance one describing how to use
<a href="http://symfony.com/doc/current/cookbook/session/proxy_examples.html">session proxy</a>
which is useful if you want to encrypt the session data or to make it read
only.</p>
<h3 id="troubleshooting">Troubleshooting<a href="#troubleshooting" class="anchor">#</a></h3>
<p>The common cases of problems encountered are due to the fact that the session
was started before Symfony2 did.</p>
<p>To fix this, check in your <code>php.ini</code> that the <code>session.auto_start</code> option is set
to <code>0</code> (its default value).</p>
<p>If the session isn't auto started, it means that the application is starting the
session itself. If you cannot prevent this, use
<a href="https://github.com/symfony/HttpFoundation/blob/master/Session/Storage/PhpBridgeSessionStorage.php"><code>PhpBridgeSessionStorage</code></a>
with
<a href="https://github.com/symfony/HttpFoundation/blob/master/Session/Storage/Handler/NativeFileSessionHandler.php"><code>NativeFileSessionHandler</code></a>:</p>
<pre><code>&lt;?php

use Symfony\Component\HttpFoundation\Session\Session;
use Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler;
use Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage;

$sessionHandler = new NativeFileSessionHandler();
$sessionStorage = new PhpBridgeSessionStorage($sessionHandler);
$session = new Session($sessionStorage);</code></pre>
<p>Another trouble you can encounter: you register some bags but they're always
empty, even though the <code>$_SESSION</code> contains the targeted values.
This would be because you register your bags after starting the session: if you
can't do otherwise then simply call <code>$session-&gt;migrate()</code> after your bag
registration, this will reload the values.</p>
<p>Finally when doing AJAX request you might notice slow performances, or non
persistence of the data. This might be caused by a
<a href="http://blog.alterphp.com/2012/08/how-to-deal-with-asynchronous-request.html">session locking mechanism</a>
which can be solved like this by saving manually the session:</p>
<pre><code>&lt;?php

$session-&gt;save();
session_write_close();</code></pre>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>By wrapping <code>$_SESSION</code> and <code>session_*()</code> functions, <code>Session</code> allows you to
make your code more testable
(<a href="http://symfony.com/doc/current/components/http_foundation/session_testing.html">you can mock it</a>)
and to solve starting session issues (just make sure to be the first to start
it).</p>
<p>It's divided into <code>AttributeBag</code> which are arrays of parameters: this allows you
to organize your session by namespaces.</p>
<p>I hope you found some useful tips in this article, if you have any comments or
questions don't be shy and drop me a line on
<a href="https://twitter.com/epiloic">Twitter</a>.</p>]]></content>
    </entry>
        <entry>
        <title>Pomodoro: manage your breaks, improve your focus</title>
                <id>http://gnugat.github.io/2014/04/16/pomodoro-manage-your-breaks-improve-your-focus.html</id>
                <updated>2014-04-16T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/04/16/pomodoro-manage-your-breaks-improve-your-focus.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><a href="#conclusion">TL;DR: jump to the conclusion</a>.</p>
<p><a href="http://pomodorotechnique.com/">The Pomodoro Technique&reg;</a> helps you to manage
your time in order to become more efficient with the following schema:</p>
<ol><li>work and focus for 25 minutes</li>
<li>then have a 5 minutes break from your computer</li>
<li>repeat until you've reached 4 work &amp; 3 break sessions</li>
<li>have a 20 minutes break from your computer</li>
</ol><p>All you need is a pomodoro timer (I use
<a href="https://launchpad.net/tomate">tomate on Ubuntu</a>), and a strong will to avoid
distractions.</p>
<h2 id="benefits">Benefits<a href="#benefits" class="anchor">#</a></h2>
<p>Breaks have been proven to improve productivity and mental well-being. By taking
them regurarly, you should be fresh from monday morning to friday afternoon!</p>
<h2 id="drawbacks">Drawbacks<a href="#drawbacks" class="anchor">#</a></h2>
<p>One of the points in the pomodoro technique is to avoid any disturbance. But
when working in a team you cannot ignore your teamates for 25 minutes: what if
they're stucked and need your help?</p>
<h2 id="tips">Tips<a href="#tips" class="anchor">#</a></h2>
<p>You can use it for any type of work. Just keep in mind that breaks should
completly cut you off from your work: if you're a developer, then you should
walk away from the computer (do some physical exercise, or have a non work
related talk with your colleagues).</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Have 4 work sessions of 25 minutes, interspersed by 3 break sessions of 5
minutes. Then have a 20 minutes break, and start again!</p>
<p>This will help you to stay focused the whole day while preventing burnout.</p>
<p>I hope you found this article interesting. If you have any comments or
questions, don't be shy and drop me line on
<a href="https://twitter.com/epiloic">Twitter</a> ;) .</p>]]></content>
    </entry>
        <entry>
        <title>Symfony2 Console component, by example</title>
                <id>http://gnugat.github.io/2014/04/09/sf2-console-component-by-example.html</id>
                <updated>2014-04-09T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/04/09/sf2-console-component-by-example.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><a href="#conclusion">TL;DR: jump to the conclusion</a>.</p>
<p><a href="http://symfony.com/">Symfony2</a> is a set of libraries which help you in your
everyday tasks. You can even stack them together and create a framework with it:</p>
<ul><li><a href="https://github.com/symfony/symfony-standard">Symfony standard edition</a></li>
<li><a href="https://github.com/gnugat/symfony-empty">Symfony empty edition</a></li>
<li><a href="http://silex.sensiolabs.org/">Silex</a></li>
</ul><p>Many frameworks already use a lot of components from Symfony2:</p>
<ul><li><a href="http://laravel.com/">Laravel</a></li>
<li><a href="https://drupal.org/">Drupal</a></li>
<li><a href="http://ez.no/">eZ Publish</a></li>
<li><a href="http://phpunit.de/">PHPUnit</a></li>
<li><a href="https://www.phpbb.com/">phpBB</a></li>
<li><a href="https://getcomposer.org/">Composer</a></li>
</ul><p>In this article, we'll see the
<a href="http://symfony.com/doc/master/components/console/introduction.html">Console Component</a>,
which allows you to build Command Line Interface (CLI) applications. Symfony 2.5
will be released in may 2014, with great new features for the Console, so I'll
speak about this version here.</p>
<ul><li><a href="#introduction">Introduction</a>
<ul><li><a href="#application">Application</a></li>
<li><a href="#command">Command</a></li>
<li><a href="#input">Input</a></li>
<li><a href="#output">Output</a></li>
<li><a href="#consolelogger">ConsoleLogger</a></li>
</ul></li>
<li><a href="#standalone-example">Standalone example</a>
<ul><li><a href="#creating-the-application">Creating the application</a></li>
<li><a href="#creating-the-command">Creating the command</a></li>
<li><a href="#registering-the-command">Registering the command</a></li>
<li><a href="#using-the-filesystem-component">Using the Filesystem component</a></li>
<li><a href="#thin-controller-many-small-services">Thin controller, many small services</a></li>
<li><a href="#registering-the-services">Registering the services</a></li>
</ul></li>
</ul><h2 id="introduction">Introduction<a href="#introduction" class="anchor">#</a></h2>
<p>This component allows you to focus on one thing: creating commands. It takes
care of all the coloring output, input gathering and command containing stuff.</p>
<p>The big picture is: you have an <code>Application</code> which contains a set of
<code>Command</code>s. When ran, the <code>Application</code> will create an <code>Input</code> object which
contains <code>Option</code>s and <code>Argument</code>s provided by the user, and will feed it to
the right <code>Command</code>.</p>
<p>The code being the best documentation, we'll now see the strict minimum classes
you should know, with the methods you'll likely use.</p>
<h3 id="application">Application<a href="#application" class="anchor">#</a></h3>
<p>All you need to know about the <code>Application</code> is this:</p>
<pre><code>&lt;?php

namespace Symfony\Component\Console;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class Application
{
    public function __construct($name = 'UNKNOWN', $version = 'UNKNOWN');
    public function add(Command $command);
    public function setDefaultCommand($commandName); // New in 2.5!
    public function run(InputInterface $input = null, OutputInterface $output = null);
}</code></pre>
<p>Minimum usage:</p>
<pre><code>#!/usr/bin/env php
&lt;?php

use Symfony\Component\Console\Application;

$application = new Application();
$application-&gt;run();</code></pre>
<p>By running this script, you should be able to see a colorful output which lists
the available commands (<code>list</code> is the default command, and a <code>help</code> is also
available).</p>
<h3 id="command">Command<a href="#command" class="anchor">#</a></h3>
<p>The <code>Command</code> class is the controller of your CLI application:</p>
<pre><code>&lt;?php

namespace Symfony\Component\Console\Command;

use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

class Command
{
    protected function configure();
    protected function execute(InputInterface $input, OutputInterface $output);
    protected function interact(InputInterface $input, OutputInterface $output);

    // To be called in configure
    public function setName($name);
    public function addArgument($name, $mode = null, $description = '', $default = null);
    public function addOption($name, $shortcut = null, $mode = null, $description = '', $default = null);
    public function setDescription($description);
    public function setHelp($help);
    public function setAliases($aliases);
}</code></pre>
<p>Basically you create a class which extends <code>Command</code>. You need to implement 2
methods:</p>
<ul><li><code>configure</code>: the configuration of the command's name, arguments, options, etc</li>
<li><code>execute</code>: where you process the input, call your services and write to the
 output</li>
</ul><p>The <code>interact</code> method is called before the <code>execute</code> one: it allows you to ask
questions to the user to set more input arguments and options.</p>
<p>Here's my stand on arguments and options modes:</p>
<ul><li>an argument should always be required (<code>InputArgument::REQUIRED</code>)</li>
<li>a flag is an option without value (<code>InputOption::VALUE_NONE</code>)</li>
<li>an option should always have a required value (<code>InputOption::VALUE_REQUIRED</code>),
don't forget to provide a default one</li>
</ul><h3 id="input">Input<a href="#input" class="anchor">#</a></h3>
<p>The container of the arguments and options given by the user:</p>
<pre><code>&lt;?php

namespace Symfony\Component\Console\Input;

interface InputInterface
{
    public function getArgument($name);
    public function getOption($name);
}</code></pre>
<p>The <code>Application</code> validates a part of the input: it checks if the command
actually accepts the given arguments and options (is the value required? Does
the <code>hello:world</code> command have a <code>--yell</code> option? etc), but you still need to
validate the input against your business rules (the <code>--number</code> option should
be an integer, the <code>name</code> argument should be escaped to avoid SQL injection,
etc).</p>
<h3 id="output">Output<a href="#output" class="anchor">#</a></h3>
<p>A convenient object which allows you to write on the console output:</p>
<pre><code>&lt;?php

namespace Symfony\Component\Console\Output;

abstract class Output implements OutputInterface
{
    public function writeln($messages, $type = self::OUTPUT_NORMAL);
}</code></pre>
<p>The <code>writeln</code> method allows you to write a new line (with a newline character at
the end). If the given <code>message</code> is an array, it will print each elements on a
new line.</p>
<p>The tags allow you to color some parts:</p>
<ul><li>green text for informative messages (usage example: <code>&lt;info&gt;foo&lt;/info&gt;</code>)</li>
<li>yellow text for comments (usage example: <code>&lt;comment&gt;foo&lt;/comment&gt;</code>)</li>
<li>black text on a cyan background for questions (usage example: <code>&lt;question&gt;foo&lt;/question&gt;</code>)</li>
<li>white text on a red background for errors (usage example: <code>&lt;error&gt;foo&lt;/error&gt;</code>)</li>
</ul><h3 id="consolelogger">ConsoleLogger<a href="#consolelogger" class="anchor">#</a></h3>
<p>Another brand new class from the version 2.5:</p>
<pre><code>&lt;?php

namespace Symfony\Component\Console\Logger;

use Psr\Log\AbstractLogger;
use Symfony\Component\Console\Output\OutputInterface;

class ConsoleLogger extends AbstractLogger
{
    public function __construct(
        OutputInterface $output,
        array $verbosityLevelMap = array(),
        array $formatLevelMap = array()
    );

    public function log($level, $message, array $context = array());
}</code></pre>
<p>As you can see, it uses the <code>OutputInterface</code> provided by the <code>Application</code>.
You should inject this logger into your services, this will allow them to write
messages on the standard output of the console while keeping them decoupled from
this component (so you can use these services in a web environment).</p>
<p>Oh, and the good news is: it colors the output and decides whether or not to
print it depending on the verbosity and level of log! An error message would
always be printed in red, an informative message would be printed in green if
you pass the <code>-vv</code> option.</p>
<h2 id="standalone-example">Standalone example<a href="#standalone-example" class="anchor">#</a></h2>
<p>Just like any other component, the Console can be used as a standalone library.</p>
<p>In this example, we'll create a tool which will create a <code>LICENSE</code> file, just
like <a href="https://github.com/gnugat/fossil">fossil</a> (the <a href="../../../2014/01/15/bootstrap-markdown-files-of-your-FOSS-project.html">bootstraper of markdown files for your FOSS projetcs</a>).</p>
<h3 id="creating-the-application">Creating the application<a href="#creating-the-application" class="anchor">#</a></h3>
<p>To begin, let's install the component using <a href="https://getcomposer.org/">Composer</a>:</p>
<pre><code>$ curl -sS https://getcomposer.org/installer | php # Downloading composer
$ ./composer.phar require "symfony/console:~2.5@dev"</code></pre>
<p>Then create an empty application:</p>
<pre><code>#!/usr/bin/env php
&lt;?php
// File: fossil

require __DIR__.'/vendor/autoload.php';

use Symfony\Component\Console\Application;

$application = new Application('Fossil', '2.0.0');
$application-&gt;run();</code></pre>
<h3 id="creating-the-command">Creating the command<a href="#creating-the-command" class="anchor">#</a></h3>
<p>Our command has two arguments:</p>
<ul><li>the name for the copyright</li>
<li>the year for the copyright</li>
</ul><p>It can also take the path of the project as an option (we'll provide the
current directory as default value).</p>
<p>Let's create it:</p>
<pre><code>&lt;?php
// File: src/Gnugat/Fossil/LicenseCommand.php

namespace Gnugat\Fossil;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class LicenseCommand extends Command
{
    protected function configure()
    {
        $this-&gt;setName('license');
        $this-&gt;setDescription('Bootstraps the license file of your project');

        $this-&gt;addArgument('author', InputArgument::REQUIRED);
        $this-&gt;addArgument('year', InputArgument::REQUIRED);

        $this-&gt;addOption('path', 'p', InputOption::VALUE_REQUIRED, '', getcwd());
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
    }
}</code></pre>
<h3 id="registering-the-command">Registering the command<a href="#registering-the-command" class="anchor">#</a></h3>
<p>Our command doesn't do anything yet, but we can already register it in our
application:</p>
<pre><code>#!/usr/bin/env php
&lt;?php
// File: fossil

require __DIR__.'/vendor/autoload.php';

use Symfony\Component\Console\Application;
use Gnugat\Fossil\LicenseCommand;

$command = new LicenseCommand();

$application = new Application('Fossil', '2.0.0');
$application-&gt;add($command);
$application-&gt;run();</code></pre>
<p>In order for it to run, you'll need to register the namespace in the autoloader
by editing the <code>composer.json</code> file at the root of the project:</p>
<pre><code>{
    "require": {
        "symfony/console": "~2.5@dev"
    },
    "autoload": {
        "psr-4": { "": "src" }
    }
}</code></pre>
<p>Then you need to run <code>./composer.phar update</code> to update the configuration.</p>
<h3 id="using-the-filesystem-component">Using the Filesystem component<a href="#using-the-filesystem-component" class="anchor">#</a></h3>
<p>In <code>fossil</code>, <a href="https://github.com/gnugat/fossil/tree/master/skeletons">templates</a>
are retrieved using the
<a href="http://symfony.com/doc/current/components/finder.html">Finder component</a>, their
values are replaced using <a href="http://twig.sensiolabs.org/">Twig</a> and written using the
<a href="http://symfony.com/doc/current/components/filesystem.html">Filesystem component</a>.</p>
<p>In order to keep this article short, we'll:</p>
<ul><li>use a fictive license which requires only the copyright line</li>
<li>simply store the <code>LICENSE</code> template in the command</li>
<li>inject the values using <code>implode</code></li>
</ul><p>This means that you have to install the new component:</p>
<pre><code>$ ./composer.phar require "symfony/filesystem:~2.4"</code></pre>
<p>And then you need to fill the <code>execute</code> method:</p>
<pre><code>&lt;?php
// File: src/Gnugat/Fossil/LicenseCommand.php

namespace Gnugat\Fossil;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;

class LicenseCommand extends Command
{
    // configure method...

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $path = $input-&gt;getOption('path').'/LICENSE';
        $license = implode(' ', array(
            'Copyright (c)',
            $input-&gt;getArgument('author'),
            $input-&gt;getArgument('year'),
        ));

        $filesystem = new Filesystem();
        $filesystem-&gt;dumpFile($path, $license.PHP_EOL);

        $output-&gt;writeln(sprintf('Created the file %s', $path));
    }
}</code></pre>
<p>Now running <code>./fossil license "Lo&iuml;c Chardonnet" "2013-2014" -p="/tmp"</code> will
output the message "Created the file /tmp/LICENSE", which should be what really
happened.</p>
<h3 id="thin-controller-many-small-services">Thin controller, many small services<a href="#thin-controller-many-small-services" class="anchor">#</a></h3>
<p>I'm not a big fan of putting logic in my commands, so generally I use services
to do the actual job:</p>
<pre><code>&lt;?php
// File src/Gnugat/Fossil/DocumentationWriter.php

namespace Gnugat\Fossil;

use Symfony\Component\Filesystem\Filesystem;
use Psr\Log\LoggerInterface;

class DocumentationWriter
{
    private $filesystem;
    private $logger;

    public function __construct(Filesystem $filesystem, LoggerInterface $logger)
    {
        $this-&gt;filesystem = $filesystem;
        $this-&gt;logger = $logger;
    }

    public function write($path, $content)
    {
        $this-&gt;filesystem-&gt;dumpFile($path, $content);
        $this-&gt;logger-&gt;notice(sprintf('Created file %s', $path));
    }
}</code></pre>
<p>As you can see, the <code>DocumentationWriter</code> isn't very big. It might seem
overkill, but now it's easy to write tests which will check if the <code>LICENSE</code>
file has been created. Also, in <code>fossil</code> the class does a bit more work: it
checks if the file already exists, and takes a "force overwrite" option into
account.</p>
<p>You'll also notice that we inject a logger to notice the user of what happens.
We need to install the PSR-3 logger interface:</p>
<pre><code>$ composer require "psr/log:~1.0"</code></pre>
<p>Our command will now be much thinner, just like any controller should be (MVC
can also be applied in CLI):</p>
<pre><code>&lt;?php
// File: src/Gnugat/Fossil/LicenseCommand.php

namespace Gnugat\Fossil;

use Gnugat\Fossil\DocumentationWriter;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Logger\ConsoleLogger;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;

class LicenseCommand extends Command
{
    // configure method...

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $path = $input-&gt;getOption('path').'/LICENSE';
        $license = implode(' ', array(
            'Copyright (c)',
            $input-&gt;getArgument('author'),
            $input-&gt;getArgument('year'),
        ));

        $filesystem = new Filesystem();
        $logger = new ConsoleLogger($output);
        $documentationWriter = new DocumentationWriter($filesystem, $logger);

        $documentationWriter-&gt;write($path, $license.PHP_EOL);
    }
}</code></pre>
<p>To be fair, our command is longer. But it <strong>is</strong> thinner as it now has less
responsibilities:</p>
<ul><li>it retrieves the input</li>
<li>creates the dependencies</li>
<li>calls the services</li>
</ul><p>If you run again <code>./fossil license "Lo&iuml;c Chardonnet" "2013-2014" -p="/tmp"</code>,
you won't see anything: <code>ConsoleLogger</code> hides informative messages by default.
You need to pass the verbose option to see the message:</p>
<pre><code>$ ./fossil license -v "Lo&iuml;c Chardonnet" "2013-2014" -p="/tmp"</code></pre>
<h3 id="registering-the-services">Registering the services<a href="#registering-the-services" class="anchor">#</a></h3>
<p>The dependency creation isn't a responsibility a controller should have. We'll
delegate this to the
<a href="http://symfony.com/doc/current/components/dependency_injection/introduction.html">Dependency Injection component</a>:</p>
<pre><code>$ ./composer.phar require "symfony/dependency-injection:~2.4"</code></pre>
<p>We'll also install the
<a href="http://symfony.com/doc/current/components/config/introduction.html">Config component</a>:</p>
<pre><code>$ ./composer.phar require "symfony/config:~2.4"</code></pre>
<p>If you don't know yet this component, go read
<a href="../../../2014/01/29/sf2-di-component-by-example.html">this helpful article</a>.</p>
<p>We'll create a XML file to configure the registration of our services:</p>
<pre><code>&lt;?xml version="1.0" ?&gt;

&lt;!-- File: config/services.xml --&gt;

&lt;container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd"&gt;
    &lt;services&gt;
        &lt;service id="symfony.application"
            class="Symfony\Component\Console\Application"&gt;
            &lt;argument key="name"&gt;Fossil&lt;/argument&gt;
            &lt;argument key="version"&gt;2.0.0&lt;/argument&gt;
            &lt;call method="add"&gt;
                 &lt;argument type="service" id="fossil.license_command" /&gt;
            &lt;/call&gt;
        &lt;/service&gt;

        &lt;service id="fossil.license_command" class="Gnugat\Fossil\LicenseCommand"&gt;
            &lt;argument type="service" id="fossil.documentation_writer" /&gt;
        &lt;/service&gt;

        &lt;service id="fossil.documentation_writer" class="Gnugat\Fossil\DocumentationWriter"&gt;
            &lt;argument type="service" id="symfony.filesystem" /&gt;
            &lt;argument type="service" id="symfony.console_logger" /&gt;
        &lt;/service&gt;

        &lt;service id="symfony.filesystem" class="Symfony\Component\Filesystem\Filesystem"&gt;
        &lt;/service&gt;

        &lt;service id="symfony.console_logger" class="Symfony\Component\Console\Logger\ConsoleLogger"&gt;
            &lt;argument type="service" id="symfony.console_output" /&gt;
        &lt;/service&gt;

        &lt;service id="symfony.console_output"
            class="Symfony\Component\Console\Output\ConsoleOutput"&gt;
        &lt;/service&gt;
    &lt;/services&gt;
&lt;/container&gt;</code></pre>
<p>As you can see, I've delegated <strong>every</strong> construction to the DIC (Dependency
Injection Container), even the construction of the application. Now the command
looks like this:</p>
<pre><code>    &lt;?php
// File: src/Gnugat/Fossil/LicenseCommand.php

namespace Gnugat\Fossil;

use Gnugat\Fossil\DocumentationWriter;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class LicenseCommand extends Command
{
    private $documentationWriter;

    public function __construct(DocumentationWriter $documentationWriter)
    {
        $this-&gt;documentationWriter = $documentationWriter;

        parent::__construct();
    }

    protected function configure()
    {
        $this-&gt;setName('license');
        $this-&gt;setDescription('Bootstraps the license file of your project');

        $this-&gt;addArgument('author', InputArgument::REQUIRED);
        $this-&gt;addArgument('year', InputArgument::REQUIRED);

        $this-&gt;addOption('path', 'p', InputOption::VALUE_REQUIRED, '', getcwd());
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $path = $input-&gt;getOption('path').'/LICENSE';
        $license = implode(' ', array(
            'Copyright (c)',
            $input-&gt;getArgument('author'),
            $input-&gt;getArgument('year'),
        ));

        $this-&gt;documentationWriter-&gt;write($path, $license.PHP_EOL);
    }
}</code></pre>
<p>And the console now contains the DIC initialization:</p>
<pre><code>#!/usr/bin/env php
&lt;?php
// File: fossil

use Symfony\Component\Config\FileLocator;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;

require __DIR__.'/vendor/autoload.php';

$container = new ContainerBuilder();
$loader = new XmlFileLoader($container, new FileLocator(__DIR__.'/config'));
$loader-&gt;load('services.xml');

$output = $container-&gt;get('symfony.console_output');

$application = $container-&gt;get('symfony.application');
$application-&gt;run(null, $output);</code></pre>
<p>And voil&agrave;! You now know how to create CLI applications :) .</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>The Console component allows you to create CLI applications. The commands are a
thin layer which gathers the input and call services. Those services can then
output messages to the user using a special kind of logger.</p>
<p>Although this article was a bit long, I might have missed something here, so
if you have any feedbacks/questions, be sure to contact me on
<a href="https://twitter.com/epiloic">Twitter</a>.</p>]]></content>
    </entry>
        <entry>
        <title>Tests cheat sheet</title>
                <id>http://gnugat.github.io/2014/04/02/tests-cheat-sheet.html</id>
                <updated>2014-04-02T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/04/02/tests-cheat-sheet.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><a href="#conclusion">TL;DR: jump to the conclusion</a>.</p>
<p>This article concludes the series on Tests:</p>
<ol><li><a href="../../../2014/02/05/tests-introduction.html">Introduction</a></li>
<li><a href="../../../2014/02/12/tests-tools-overview.html">Tools overview</a></li>
<li><a href="../../../2014/02/19/test-driven-development.html">Test Driven Development</a></li>
<li><a href="../../../2014/02/26/tdd-just-do-it.html">TDD: just do it!</a></li>
<li><a href="../../../2014/03/05/spec-bdd.html">spec BDD</a></li>
<li><a href="../../../2014/03/11/phpspec-quick-tour.html">phpspec: a quick tour</a></li>
<li><a href="../../../2014/03/19/behavior-driven-development-story-bdd.html">Behavior Driven Development: story BDD</a></li>
<li><a href="../../../2014/03/26/behat-quick-tour.html">Behat: a quick tour</a></li>
<li><a href="../../../2014/04/02/tests-cheat-sheet.html">Conclusion</a></li>
</ol><p>I've tried to put as much general information and references to blogs which
could help you to go further, in each article. In this final post, I'll regroup
those references and the conclusions.</p>
<ul><li><a href="#definitions">Definitions</a></li>
<li><a href="#tools-overview">Tools overview</a></li>
<li><a href="#test-driven-development-tdd">TDD</a></li>
<li><a href="#behavior-driven-development-bdd">BDD</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul><h2 id="definitions">Definitions<a href="#definitions" class="anchor">#</a></h2>
<p>A test is a way to check if something behaves correctly. This something is
called a System Under Test (SUT) and can be:</p>
<ul><li>the User Interface (HTML, console output, etc): integration tests</li>
<li>classes, functions: unit tests</li>
<li>interractions between those classes and functions: functional tests</li>
<li>the business value: acceptance tests</li>
</ul><p>Generally, you proceed as follow:</p>
<ol><li>have a set of input (parameters, fixtures, etc)</li>
<li>put it in the SUT</li>
<li>check the output</li>
</ol><p>When doing unit tests, you'll need to isolate your SUT from its collaborators
(the dependencies, the other classes used by it). To do so, you'll need test
doubles and Dependency Injection.</p>
<h3 id="references">References<a href="#references" class="anchor">#</a></h3>
<ul><li><a href="http://martinfowler.com/articles/mocksArentStubs.html">Tests doubles explained by Martin Fowler</a></li>
<li><a href="../../../2014/01/22/ioc-di-and-service-locator.html">Dependency Injection explained</a></li>
<li><a href="http://codemanship.co.uk/parlezuml/blog/?postid=1202">Test coverage can be deceptive, by Jason Gorman</a></li>
</ul><h2 id="tools-overview">Tools overview<a href="#tools-overview" class="anchor">#</a></h2>
<p>Frameworks can help you to automate your tests. You'll generally find these
tools:</p>
<ul><li>integration tests:
<ul><li><a href="https://github.com/alexandresalome/php-webdriver">Alexandre Salome's webdriver</a> (PHP)</li>
<li><a href="https://github.com/facebook/php-webdriver">Facebook's webdriver</a> (PHP)</li>
<li><a href="https://github.com/fabpot/goutte">Goutte</a> (PHP)</li>
<li><a href="http://phantomjs.org/">PhantomJS</a></li>
</ul></li>
<li>xUnit frameworks:
<ul><li><a href="http://phpunit.de/">PHPUnit</a> (PHP)</li>
<li><a href="https://github.com/atoum/">Atoum</a> (PHP)</li>
<li><a href="http://codeception.com/">Codeception</a> (PHP)</li>
<li><a href="http://visionmedia.github.io/mocha/">Mocha</a> (js)</li>
<li><a href="http://casperjs.org/">CasperJs</a> (js)</li>
</ul></li>
<li>tests double libraries:
<ul><li><a href="https://github.com/phpspec/prophecy">Prophecy</a> (PHP)</li>
<li><a href="https://github.com/padraic/mockery">Mockery</a> (PHP)</li>
<li><a href="http://sinonjs.org/">Sinon.js</a> (js)</li>
</ul></li>
<li>assertion libraries:
<ul><li><a href="http://chaijs.com/">Chai</a> (js)</li>
</ul></li>
<li>behavior frameworks:
<ul><li><a href="http://www.phpspec.net/">phpspec</a> (PHP)</li>
<li><a href="http://behat.org/">Behat</a> (PHP)</li>
<li><a href="http://jasmine.github.io/2.0/introduction.html">jasmine</a> (js)</li>
</ul></li>
</ul><p><em>Note</em>: xUnit frameworks allows many kinds of tests (they're not limited to unit
tests).</p>
<p><em>Note</em>: WebDriver is an API for <a href="http://docs.seleniumhq.org/">Selenium</a>, a java
server which allows you to interract with a browser.</p>
<h3 id="references-2">References<a href="#references-2" class="anchor">#</a></h3>
<ul><li><a href="http://www.xprogramming.com/testfram.htm">xUnit conventions</a></li>
<li><a href="http://verraes.net/2013/09/extract-till-you-drop/">Mathias Verraes writing tests to allow him to improve the code</a></li>
</ul><h2 id="test-driven-development-tdd">Test driven development (TDD)<a href="#test-driven-development-tdd" class="anchor">#</a></h2>
<p>A process in which:</p>
<ol><li>you write the test first</li>
<li>then you write the code to make the test pass as quickly as possible (commit any sins)</li>
<li>refactor the code, clean your sins</li>
</ol><p>This allows you to naturally have a 100% test coverage, and it has the side
effect of making your code more decoupled (you need your code to be decoupled in
order to test it).</p>
<h3 id="references-3">References:<a href="#references-3" class="anchor">#</a></h3>
<ul><li><a href="http://en.wikipedia.org/wiki/Test-Driven_Development_by_Example">Kent Beck's book: Test Driven Development by Example</a></li>
<li><a href="http://vimeo.com/68375232">Ian Cooper coming back to the sources of TDD</a></li>
<li><a href="http://codemanship.co.uk/parlezuml/blog/?postid=1170">False arguments against TDD</a></li>
<li><a href="http://www.daedtech.com/what-tdd-is-and-is-not">What TDD is and is not</a></li>
<li><a href="http://blog.8thlight.com/uncle-bob/2014/03/11/when-to-think.html">Where is the design phase in TDD</a></li>
</ul><p>About writing the code as quickly as possible, commiting any sins:</p>
<ul><li><a href="http://www.joelonsoftware.com/items/2009/09/23.html">Duct tape programming</a></li>
<li><a href="http://redotheweb.com/2013/06/04/you-should-write-ugly-code.html">You should write ugly code</a></li>
<li><a href="http://verraes.net/2013/07/managed-technical-debt/">Managed technical debt</a></li>
</ul><h2 id="behavior-driven-development-bdd">Behavior Driven Development (BDD)<a href="#behavior-driven-development-bdd" class="anchor">#</a></h2>
<p>BDD is divided in two sections: spec and story. It comes from the lack of
direction in TDD and introduces the concept of business value.</p>
<ul><li>spec BDD: test methods should be sentences</li>
<li>story BDD: acceptance criteria (from user stories) should be executable</li>
</ul><p><a href="http://behat.org/">Behat</a> and <a href="http://www.phpspec.net/">phpspec</a> allows you to
automate the process by allowing you to:</p>
<ol><li>bootstrap the test</li>
<li>then you have to manually implement the test</li>
<li>bootstrap the code from the written tests</li>
<li>then you have to manually implement the code</li>
</ol><h3 id="references-4">References:<a href="#references-4" class="anchor">#</a></h3>
<ul><li><a href="http://dannorth.net/introducing-bdd/">Introductiong BDD</a></li>
<li><a href="http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/">Whose domain is it anyway?</a></li>
<li><a href="http://www.slideshare.net/lunivore/behavior-driven-development-11754474">Slides by Liz Keogh</a></li>
<li><a href="http://www.wekeroad.com/2013/08/28/how-behavioral-is-your-bdd/">Are you really doing BDD?</a></li>
<li><a href="http://ht.ly/pfNW5">Acceptance Test fail!</a></li>
</ul><h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Automated tests allow you to make sure your system isn't full of bug, and help
to detect any regressions.</p>
<p>Theres many kinds out there: you can test what the user sees, what the computer
sees and what the product owner expects.</p>
<p>I'd be really glad if this cheat sheet was of some use to you. If you have any
comments, you can contact me on <a href="https://twitter.com/epiloic">Twitter</a> :) .</p>
<h3 id="note-about-bdd-behat-and-selenium">Note about BDD, behat and selenium<a href="#note-about-bdd-behat-and-selenium" class="anchor">#</a></h3>
<p>I had <a href="https://twitter.com/epiloic/status/449280860236570625">great feedbacks</a>
about the <a href="../../../2014/03/26/behat-quick-tour.html">Behat article</a>:
which were triggered by the following statement: "if you're using Mink
or Selenium, then you're doing it wrong". Let me re-phrase that.</p>
<p>If you're using Selenium or Mink, then you're doing integration tests, not
behavior ones. Those tools are fine: the UI is what the user sees and interacts
with, so it's important to make sure it isn't broken.</p>
<p>What isn't fine is to use Behat with these tools and then to say that you're
doing BDD. Use the right tools for the job:
<a href="http://phpunit.de/manual/3.7/en/selenium.html">PHPUnit can perfectly be used with selenium</a>,
and libraries like <a href="https://github.com/alexandresalome/php-webdriver">webdriver</a>
allow you to work with selenium without using Behat.</p>
<p>One of the question raised was: "If I can't interract with the UI, how do I test
the behavior of my application?"" Well there's many ways and the answer deserves
a whole article or even a whole series! I'll just give you the douchebag (it's
the actual application name, I mean no offense!) example:</p>
<ul><li><a href="https://speakerdeck.com/igorw/silex-an-implementation-detail">the slides explaining the application</a></li>
<li><a href="https://github.com/igorw/doucheswag/">the sources</a></li>
</ul><p>Inner conclusion: make a distinction between integration (HTML, UI, etc) and
Behavior (business value, acceptance criteria from user stories) tests.
If you can't do both, then the choice is yours: which one is the most important
to you?</p>]]></content>
    </entry>
        <entry>
        <title>Behat: a quick tour</title>
                <id>http://gnugat.github.io/2014/03/26/behat-quick-tour.html</id>
                <updated>2014-03-26T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/03/26/behat-quick-tour.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><a href="#conclusion">TL;DR: jump to the conclusion</a>.</p>
<p>This article is part of a series on Tests in general and on how to practice
them:</p>
<ol><li><a href="../../../2014/02/05/tests-introduction.html">Introduction</a></li>
<li><a href="../../../2014/02/12/tests-tools-overview.html">Tools overview</a></li>
<li><a href="../../../2014/02/19/test-driven-development.html">Test Driven Development</a></li>
<li><a href="../../../2014/02/26/tdd-just-do-it.html">TDD: just do it!</a></li>
<li><a href="../../../2014/03/05/spec-bdd.html">spec BDD</a></li>
<li><a href="../../../2014/03/11/phpspec-quick-tour.html">phpspec: a quick tour</a></li>
<li><a href="../../../2014/03/19/behavior-driven-development-story-bdd.html">Behavior Driven Development: story BDD</a></li>
<li><a href="../../../2014/03/26/behat-quick-tour.html">Behat: a quick tour</a></li>
<li><a href="../../../2014/04/02/tests-cheat-sheet.html">Conclusion</a></li>
</ol><p><a href="../../../2014/03/19/behavior-driven-development-story-bdd.html">Story Behavior Driven Development (BDD)</a>
is all about making user story's acceptance criteria executable.
In this article we'll oversee <a href="http://behat.org/">Behat</a> a PHP framework which
enables you to do so.</p>
<h2 id="introduction">Introduction<a href="#introduction" class="anchor">#</a></h2>
<p>In a nutshel Behat reads your user stories and links each steps in acceptance
criteria to a function. The execution of those functions will then ascertain if
the acceptance criteria succeeded.</p>
<p>To be able to read the user story, Behat needs you to write it in a specific
format.</p>
<h2 id="user-story">User story<a href="#user-story" class="anchor">#</a></h2>
<p>By default, your user stories are located as follow: <code>/features/*.feature</code>.
They're written using the <a href="http://docs.behat.org/guides/1.gherkin.html">Gherkin language</a>,
which looks like this:</p>
<pre><code>Feature: &lt;user story title&gt;
    In order to &lt;business value to attain&gt;
    As a/an &lt;actor&gt;
    I need to &lt;requirements to meet&gt;

    Scenario: &lt;acceptance criteria title&gt;
        Given &lt;precondition&gt;
        When &lt;event&gt;
        Then &lt;outcome&gt;</code></pre>
<p>The first lines will be printed while executing the acceptance criteria. The
<code>Scenario</code> keyword starts a new criteria. The <code>Given</code>, <code>When</code> and <code>Then</code>
keywords will trigger a search for a related test method. Those are called
steps.</p>
<p>Your criteria will most likely have more than three lines. You can use <code>And</code> and
<code>But</code> keywords to link the steps:</p>
<pre><code>Feature: &lt;user story title&gt;
    In order to &lt;business value to attain&gt;
    As a/an &lt;actor&gt;
    I need to &lt;requirements to meet&gt;

    Scenario: &lt;acceptance criteria title&gt;
        Given &lt;precondition&gt;
        And &lt;another precondition&gt;
        When &lt;event&gt;
        But &lt;another event&gt;
        Then &lt;outcome&gt;
        And &lt;another outcom&gt;
        But &lt;yet another outcome&gt;</code></pre>
<p><em>Note</em>: to be fair, <code>Given</code>, <code>When</code>, <code>Then</code>, <code>But</code> and <code>And</code> keywords aren't
different to Behat: the choice is there for you, in order to make your
acceptance criteria more readable.</p>
<h2 id="context">Context<a href="#context" class="anchor">#</a></h2>
<p>The test methods should be placed in a context: <code>/features/bootstrap/FeatureContext.php</code>.
It looks like this:</p>
<pre><code>&lt;?php

use Behat\Behat\Context\BehatContext;

class FeatureContext extends BehatContext
{
    /**
     * @Given /^a sentence from an acceptance criteria$/
     */
    public function aTestMethod()
    {
        // Your test code.
    }
}</code></pre>
<p>When Behat reads your user stories, for each step it will look in your context
and check the test method's annotations (comments starting by <code>@Given</code>, <code>@When</code>
or <code>@Then</code>) to see if it matches.</p>
<p><em>Note</em>: again, <code>@Given</code>, <code>@When</code> and <code>@Then</code> don't really matter. If you write
<code>Given I am an imp</code> in your user story, and then write a test method with the
annotation <code>@When /^I am an imp$/</code>, it will match!</p>
<p>As you can see, a regexp is used for the matching, but since the version 3.0
(still in release candidate at the time I write this article) you can use plain
text with placeholders:</p>
<pre><code>/**
 * @Given I am an/a :type
 */
public function setType($type)
{
    // Your test code.
}</code></pre>
<p>This has been borrowed from <a href="https://github.com/jnicklas/turnip">Turnip</a>.</p>
<p><em>Note</em>: your test method name can be anything, it doesn't have to match the step
sentence.</p>
<h2 id="the-definition-of-success">The definition of success<a href="#the-definition-of-success" class="anchor">#</a></h2>
<p>When a test method is executed, it can have the following state:</p>
<ul><li>not found: you need to create it</li>
<li>pending: the test method exists, but isn't implemented</li>
<li>failing: the method throws an exception or raises an error</li>
<li>succeeds: the default</li>
</ul><p>To set the pending state, write the following in your method:</p>
<pre><code>throw new \Behat\Behat\Tester\Exception\Pending();</code></pre>
<p>As you can see, if you write the test method, but put nothing in it, then the
test will succeeds. The responsibility to make the success state match business
expectations is yours.</p>
<p>Behat eats its own dog food: its tests are written with itself! Which means you
can have a look at them to inspire yourself. You'll see something that isn't
written in the documentation: you can use
<a href="http://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.assertions">PHPUnit's assertion methods</a>
to make your test pass or fail.</p>
<h2 id="an-automated-flow">An automated flow<a href="#an-automated-flow" class="anchor">#</a></h2>
<p>Remember how <a href="../../../2014/03/11/phpspec-quick-tour.html">phpspec</a>
generates your code based on your specifications? Well it's the same thing with
Behat.</p>
<p>First Bootstrap your context:</p>
<pre><code>behat --init</code></pre>
<p>Write a <code>/features/&lt;user-story&gt;.feature</code> file.</p>
<p>Next run the tests. For the pending steps, behat will propose you a template
code which can be copy/pasted in your test methods:</p>
<pre><code>behat</code></pre>
<p>Then complete your test methods.</p>
<p>And finally run your tests:</p>
<pre><code>behat</code></pre>
<p>The tests should all fail. Which means now you can start writting the code to
make it pass: it's Behavior <strong>Driven</strong> Development, remember? ;)</p>
<h2 id="misconceptions">Misconceptions<a href="#misconceptions" class="anchor">#</a></h2>
<p>A lot of people hate Behat because it's slow and it needs <a href="http://docs.seleniumhq.org/">Selenium</a>
to work, which isn't easy to install (if a novice can't install it, then it's
not easy).
Oh, and they hate it because the tests written with it aren't maintenable.</p>
<p>Guess what? They're wrong. They're probably using the
<a href="http://mink.behat.org/">mink extension</a>, which enables you to write things like:</p>
<pre><code>Feature: User registration
    In order to gain access to the website
    As a user
    I need to register

    Scenario: Giving account details
        Given I fill the field "#username" with "John"
        And  I fill the field "#password" with "Doe"
        When I submit the form "ul.form-block &gt; li:last &gt; #submit"
        And I wait until the page is fully loaded
        Then I should see "You've registered successfully"</code></pre>
<p>The thing is, you're not describing the business value in this acceptance
criteria. You're describing User Interface (UI) interractions. And it's
completly different!</p>
<p>So here's my rule of thumb: don't use mink nor selenium.
In <a href="https://speakerdeck.com/igorw/silex-an-implementation-detail">Silex, an implementation detail</a>,
the advice given is: imagine you need to add a CLI which shares the same
functionnalities than the web interface. It would be a shame to have to re-write
all your acceptance tests, wouldn't it?</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Behat enables you to make your acceptance criteria executable, and automates the
process. Awsome!</p>
<p>If you're using Selenium, or the mink extension, then you're doing it wrong:
don't test the UI, test the business value.</p>
<p>Here's my workflow advice:</p>
<ol><li>write only one criteria</li>
<li>implement only one step</li>
<li>write the specification of one class used in the step implementation (using <a href="../../../2014/03/11/phpspec-quick-tour.html">phpspec</a>)</li>
<li>write the code matching the specification</li>
<li>go back to 3. until any code from the step implementation is written</li>
<li>go back to 2. until any step is written</li>
<li>go back to 1. until the user story is completely written</li>
</ol><p>I hope you enjoyed this article, be sure to
<a href="https://twitter.com/epiloic">tweet me what you think about it</a> ;) .</p>
<p>Story BDD and Behat have a steep learning curve, which makes them hard to
practice in the beginning (but totally worth it). To help you get your own way,
here's a list of references:</p>
<ul><li><a href="http://docs.behat.org/">Behat documentation</a></li>
<li><a href="https://github.com/Behat/Behat">Behat sources</a></li>
<li><a href="http://www.slideshare.net/everzet/behat-30-meetup-march">Behat version 3.0 announcement (slides)</a></li>
<li><a href="https://www.youtube.com/watch?v=xOgyKTmgYI8">Behat version 3.0 announcement (video)</a></li>
</ul><p>And of course have a look at the references <a href="../../../2014/03/19/behavior-driven-development-story-bdd.html">from my BDD article</a>.</p>]]></content>
    </entry>
        <entry>
        <title>Behavior Driven Development: story BDD</title>
                <id>http://gnugat.github.io/2014/03/19/behavior-driven-development-story-bdd.html</id>
                <updated>2014-03-19T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/03/19/behavior-driven-development-story-bdd.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><a href="#conclusion">TL;DR: jump to the conclusion</a>.</p>
<p>This article is part of a series on Tests in general and on how to practice
them:</p>
<ol><li><a href="../../../2014/02/05/tests-introduction.html">Introduction</a></li>
<li><a href="../../../2014/02/12/tests-tools-overview.html">Tools overview</a></li>
<li><a href="../../../2014/02/19/test-driven-development.html">Test Driven Development</a></li>
<li><a href="../../../2014/02/26/tdd-just-do-it.html">TDD: just do it!</a></li>
<li><a href="../../../2014/03/05/spec-bdd.html">spec BDD</a></li>
<li><a href="../../../2014/03/11/phpspec-quick-tour.html">phpspec: a quick tour</a></li>
<li><a href="../../../2014/03/19/behavior-driven-development-story-bdd.html">Behavior Driven Development: story BDD</a></li>
<li><a href="../../../2014/03/26/behat-quick-tour.html">Behat: a quick tour</a></li>
<li><a href="../../../2014/04/02/tests-cheat-sheet.html">Conclusion</a></li>
</ol><p>In this article, we'll talk about Behavior Driven Development (BDD), again.
There's no special skills required to read on, although some notions on
<a href="../../../2014/02/05/tests-introduction.html">tests</a> and
<a href="../../../2014/02/19/test-driven-development.html">Test Driven Development</a>
(TDD) would be a plus.</p>
<h2 id="from-spec-bdd-to-story-bdd">From spec BDD to story BDD<a href="#from-spec-bdd-to-story-bdd" class="anchor">#</a></h2>
<p>So TDD has 3 simple rules:</p>
<ol><li>write the test first</li>
<li>then write as quickly as possible the code to make it pass</li>
<li>finally refactor, without changing the tests (and still making them pass)</li>
</ol><p>Like many TDD oficionados, <a href="http://dannorth.net/about/">Dan North</a> felt that it
was missing some guidelines. To fix this, he created spec BDD, which adds the
following rules to TDD:</p>
<ul><li>test methods should be sentences (prefix them with <code>it_should</code> instead of <code>test</code>)</li>
<li>tests should specify the behavior of the System Under Test (SUT)</li>
</ul><p>One of his colleagues, Chris Matts, suggested to take BDD a step further: why
not making sure the business value was met? And that's how story BDD was
created.</p>
<h2 id="acceptance-tests">Acceptance tests<a href="#acceptance-tests" class="anchor">#</a></h2>
<p>If you're working with agile methodologies, you should be familiar with user
stories. Those are simple cards which describe what to do in 3 lines:</p>
<pre><code>In order to attain a business value
As an actor
I need to meet some requirements</code></pre>
<p>They've also some acceptance criteria, which follow approximately this template:</p>
<pre><code>Given a context
When an event happens
Then an outcome should occur</code></pre>
<p>If the system fulfills the acceptance test, then it behaves correctly. By making
them executable, you can test the business behavior of your system! That's what
story BDD is all about.</p>
<p>Technically, this means parsing the acceptance tests and match each line with
a chunk of code. But don't worry about implementation details, we'll see them
in the next article.</p>
<h2 id="misconceptions">Misconceptions<a href="#misconceptions" class="anchor">#</a></h2>
<p>Somehow, a surprising number of people started to think that BDD was all about
integration tests. For example in a web application, they would write:</p>
<pre><code>Given I am on "/home"
When I click on "form#name_form input[name=submit]"
And I wait until the page is fully loaded
Then the "form#name_form input[name=first_name]" form field should contain "value"</code></pre>
<p>What's wrong with it? Well:</p>
<ul><li>it's not human friendly (usage of xpath)</li>
<li>it's completely coupled to your routing (usage of URL)</li>
<li>it's entirely coupled to the web implementation (usage of web vocabulary)</li>
<li>it's thoroughly coupled to the HTML integration (again, usage of xpath)</li>
<li>it's fully coupled to the test tool (the waiting line is a hack)</li>
<li>and mostly: it doesn't describe your business need</li>
</ul><p>Here's a better approach:</p>
<pre><code>Given the opportunity to introduce myself
When I give my name
Then I should be greeted</code></pre>
<p>Yep, that's the story BDD example of "Hello World", in case you didn't recognize
it ;) .</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>If you make a user story's acceptance tests executable, then you're doing story
BDD. It helps you to make sure that your application meets your business needs.</p>
<p>Hopefully this article helped you a little. If you have any questions, rants or
praises, feel free to send them to me on <a href="https://twitter.com/epiloic">Twitter</a>.</p>
<p>Tests are hard. TDD is harder. BDD even more! Here's some good references to
help you on story BDD:</p>
<ul><li><a href="http://dannorth.net/introducing-bdd/">Introducing BDD, by Dan North</a></li>
<li><a href="http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/">Whose domain is it anyway? By Dan North</a></li>
<li><a href="http://slideshare.net/lunivore/behavior-driven-development-11754474">BDD slides by Liz Keogh</a></li>
<li><a href="http://www.wekeroad.com/2013/08/28/how-behavioral-is-your-bdd/">Are you really doing BDD? By Rob Conery</a></li>
<li><a href="http://ht.ly/pfNW5">A.T. Fail! By Robert C. Martin</a></li>
</ul>]]></content>
    </entry>
        <entry>
        <title>phpspec: a quick tour</title>
                <id>http://gnugat.github.io/2014/03/11/phpspec-quick-tour.html</id>
                <updated>2014-03-11T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/03/11/phpspec-quick-tour.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><a href="#conclusion">TL;DR: jump to the conclusion</a>.</p>
<p>This article is part of a series on Tests in general and on how to practice
them:</p>
<ol><li><a href="../../../2014/02/05/tests-introduction.html">Introduction</a></li>
<li><a href="../../../2014/02/12/tests-tools-overview.html">Tools overview</a></li>
<li><a href="../../../2014/02/19/test-driven-development.html">Test Driven Development</a></li>
<li><a href="../../../2014/02/26/tdd-just-do-it.html">TDD: just do it!</a></li>
<li><a href="../../../2014/03/05/spec-bdd.html">spec BDD</a></li>
<li><a href="../../../2014/03/11/phpspec-quick-tour.html">phpspec: a quick tour</a></li>
<li><a href="../../../2014/03/19/behavior-driven-development-story-bdd.html">Behavior Driven Development: story BDD</a></li>
<li><a href="../../../2014/03/26/behat-quick-tour.html">Behat: a quick tour</a></li>
<li><a href="../../../2014/04/02/tests-cheat-sheet.html">Conclusion</a></li>
</ol><p>The <a href="../../../2014/03/05/spec-bdd.html">last article</a> might have seemed
too abstract. Fortunately, this one will be much more concrete! We'll present
<a href="http://www.phpspec.net/">phpspec</a>, a spec BDD tool for PHP.</p>
<h2 id="introduction">Introduction<a href="#introduction" class="anchor">#</a></h2>
<p>phpspec automates the Test Driven Development (TDD) and spec BDD process by:</p>
<ul><li>allowing you to generate the specification</li>
<li>then allowing you to generate the code from it</li>
</ul><p>It also forces you to follow good practices:</p>
<ul><li>you can only test non-static public methods</li>
<li>you cannot generate a code coverage report</li>
</ul><p>It also tries to be less verbose, as you'll see in the next sections.</p>
<h2 id="installation">Installation<a href="#installation" class="anchor">#</a></h2>
<p>Simply install phpspec using <a href="https://getcomposer.org/">Composer</a>:</p>
<pre><code>composer require --dev 'phpspec/phpspec:~2.0@RC'</code></pre>
<p>At the time I write this article, phpspec is in Release Candidate, but don't
worry: I've been using it since the beta version and I've never had any trouble.</p>
<h2 id="process">Process<a href="#process" class="anchor">#</a></h2>
<p>First, bootstrap and complete the specification:</p>
<pre><code>phpspec describe 'Fully\Qualified\Classname'
$EDITOR spec/Fully/Qualified/ClassnameSpec.php</code></pre>
<p>Then bootstrap and complete the code to make the tests pass:</p>
<pre><code>phpspec run
$EDITOR src/Fully/Qualified/Classname.php
phpspec run</code></pre>
<p>Finally refactor, but keep the tests passing:</p>
<pre><code>$EDITOR src/Fully/Qualified/Classname.php
phpspec run</code></pre>
<p>I've found that Marcello Duarte, the creator of phpspec, talks really well about
it in his presentation <a href="http://www.slideshare.net/marcello.duarte/test-transform-refactor">Test, transform, refactor</a>.</p>
<p>I advise you to have a look at his slides, as they explain everything you should
now about the red, green, refactor cycle.</p>
<h2 id="a-tour-of-the-documentation">A tour of the documentation<a href="#a-tour-of-the-documentation" class="anchor">#</a></h2>
<p>Surprisingly, the documentation is complete and small:</p>
<ul><li><a href="http://www.phpspec.net/cookbook/matchers.html">here's the complete list of assertions</a></li>
<li><a href="http://www.phpspec.net/cookbook/templates.html">here's how to customize the specification and code tempaltes</a></li>
<li><a href="http://www.phpspec.net/cookbook/configuration.html">here's how to configure phpspec</a></li>
</ul><p>There's nothing missing in these docs!</p>
<h2 id="prophecy-the-test-double-framework">Prophecy, the test double framework<a href="#prophecy-the-test-double-framework" class="anchor">#</a></h2>
<p>Unlike PHPUnit, phpspec uses an external library for its test doubles:
<a href="https://github.com/phpspec/prophecy">prophecy</a> (but you can still find how to
use it in the <a href="http://www.phpspec.net/cookbook/configuration.html">documentation</a>).</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>phpspec generates specification and code boilerplates for you. It forces you to
concentrate on the class behavior rather than on the implementation and it
provides a non verbose API. Even its documentations is complete and small!</p>
<p>I hope you enjoyed this article, be sure to
<a href="https://twitter.com/epiloic">tweet me what you think about it</a> ;) .</p>]]></content>
    </entry>
        <entry>
        <title>spec BDD</title>
                <id>http://gnugat.github.io/2014/03/05/spec-bdd.html</id>
                <updated>2014-03-05T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/03/05/spec-bdd.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><a href="#conclusion">TL;DR: jump to the conclusion</a>.</p>
<p>This article is part of a series on Tests in general and on how to practice
them:</p>
<ol><li><a href="../../../2014/02/05/tests-introduction.html">Introduction</a></li>
<li><a href="../../../2014/02/12/tests-tools-overview.html">Tools overview</a></li>
<li><a href="../../../2014/02/19/test-driven-development.html">Test Driven Development</a></li>
<li><a href="../../../2014/02/26/tdd-just-do-it.html">TDD: just do it!</a></li>
<li><a href="../../../2014/03/05/spec-bdd.html">spec BDD</a></li>
<li><a href="../../../2014/03/11/phpspec-quick-tour.html">phpspec: a quick tour</a></li>
<li><a href="../../../2014/03/19/behavior-driven-development-story-bdd.html">Behavior Driven Development: story BDD</a></li>
<li><a href="../../../2014/03/26/behat-quick-tour.html">Behat: a quick tour</a></li>
<li><a href="../../../2014/04/02/tests-cheat-sheet.html">Conclusion</a></li>
</ol><p>In this article, we'll talk about Behavior Driven Development (BDD). There's no
special skills required to read on, although some notions on although some
notions on <a href="../../../2014/02/05/tests-introduction.html">tests</a> and
<a href="../../../2014/02/19/test-driven-development.html">Test Driven Development</a>
(TDD) would be a plus.</p>
<h2 id="from-tdd-to-bdd">From TDD to BDD<a href="#from-tdd-to-bdd" class="anchor">#</a></h2>
<p><a href="http://dannorth.net/about/">Dan North</a>, a fervent TDDist, felt that there was
something missing about this practice:</p>
<ul><li>you don't know where to start (which test should be written first?)</li>
<li>you don't know when to stop (should I test getters/setters?)</li>
<li>you don't know what defines a failure (compilation error? typo?)</li>
</ul><p>While being an adapt of the concept, he felt that there was missing some
important guidelines, and that his tests didn't answered the right questions.</p>
<p>Around 2006, he wrote an article called
<a href="http://dannorth.net/about/">introducing BDD</a>, in which he explained his unease
and how to fix it: instead of writing tests from a technical point of view he
decided to write them from a business point of view.</p>
<h2 id="from-unit-tests-to-specification">From unit tests to specification<a href="#from-unit-tests-to-specification" class="anchor">#</a></h2>
<p>The first step to test the behavior of a class is to write a specification.
Because xUnit frameworks were in vogue, developers had the habit of making a
parallel between their Systems Under Test (SUT) and their Test Suites:</p>
<ul><li>suffix the SUT's name with <code>Test</code> to name the Test Suite</li>
<li>prefix the SUT's method names with <code>test</code> to name the Test Suite's methods</li>
</ul><p>In the Software world, a lot of problems can be solved by giving descriptive
names. And this is what Dan North did: Test Suites became Specification. Why?
Because it forces you to say "this method should do this" instead of writting
"test method".</p>
<p>To be more precise, Dan Nort stated that "test method names should be
sentences". Which means that test method names should be
<a href="http://en.wikipedia.org/wiki/Snake_case">snake_cased</a>, as underscores give more
spaces to words (they're basically spaces).</p>
<p>And that's pretty much it!</p>
<h2 id="is-that-all">Is that all?<a href="#is-that-all" class="anchor">#</a></h2>
<p>Yes! Well, no. I mean... This is only the first part of BDD: it's called specBDD
(guess why ;) ). I'll write about the second part
(<a href="../../../2014/03/19/behavior-driven-development-story-bdd.html">story BDD</a>)
in a future article.</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>BDD is just TDD, but tests become specifications and test methods are sentences
which start with "it_should".</p>
<p>I hope you enjoyed this article. If you want to make any comment, you're welcome
to do so on <a href="https://twitter.com/epiloic">Twitter</a>.</p>
<p>To keep good habits, in the <a href="../../../2014/03/11/phpspec-quick-tour.html">next article</a>
we'll switch to the technical mode and see some <a href="http://www.phpspec.net/">phpspec</a>!</p>]]></content>
    </entry>
        <entry>
        <title>TDD: just do it!</title>
                <id>http://gnugat.github.io/2014/02/26/tdd-just-do-it.html</id>
                <updated>2014-02-26T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/02/26/tdd-just-do-it.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>This article is part of a series on Tests in general and on how to practice
them:</p>
<ol><li><a href="../../../2014/02/05/tests-introduction.html">Introduction</a></li>
<li><a href="../../../2014/02/12/tests-tools-overview.html">Tools overview</a></li>
<li><a href="../../../2014/02/19/test-driven-development.html">Test Driven Development</a></li>
<li><a href="../../../2014/02/26/tdd-just-do-it.html">TDD: just do it!</a></li>
<li><a href="../../../2014/03/05/spec-bdd.html">spec BDD</a></li>
<li><a href="../../../2014/03/11/phpspec-quick-tour.html">phpspec: a quick tour</a></li>
<li><a href="../../../2014/03/19/behavior-driven-development-story-bdd.html">Behavior Driven Development: story BDD</a></li>
<li><a href="../../../2014/03/26/behat-quick-tour.html">Behat: a quick tour</a></li>
<li><a href="../../../2014/04/02/tests-cheat-sheet.html">Conclusion</a></li>
</ol><p>The first two articles didn't require special skills whereas the last one needed
you to be a little bit used to tests. Well the next ones will require you to be
a little bit used to Test Driven Develoment (TDD), so this article is here to
make you practice them!</p>
<p>I really mean it: reading articles on TDD might feel good, but the only thing to
do to fully grasp them is to:</p>
<ol><li>start writting tests before any production code</li>
<li>then write the code to quickly make them pass (write ugly code if needed)</li>
<li>finally refactor the mess, without touching the tests</li>
</ol><p>In other word: just do it! The learning curve is steep, so dive into it as soon
as possible.</p>
<p>One of the best way to learn is to pair with someone who's used to it. If you
don't have someone to pair with, you can always read this
<a href="http://www.objectmentor.com/resources/articles/xpepisode.htm">Extreme Programming Episode by Robert C. Martin and Robert S. Koss</a>.</p>
<p>The next article will be about the next level:
<a href="../../../2014/03/05/spec-bdd.html">Behavior Driven Development</a> (BDD).</p>]]></content>
    </entry>
        <entry>
        <title>Test Driven Development</title>
                <id>http://gnugat.github.io/2014/02/19/test-driven-development.html</id>
                <updated>2014-02-19T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/02/19/test-driven-development.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>This article is part of a series on Tests in general and on how to practice
them:</p>
<ol><li><a href="../../../2014/02/05/tests-introduction.html">Introduction</a></li>
<li><a href="../../../2014/02/12/tests-tools-overview.html">Tools overview</a></li>
<li><a href="../../../2014/02/19/test-driven-development.html">Test Driven Development</a></li>
<li><a href="../../../2014/02/26/tdd-just-do-it.html">TDD: just do it!</a></li>
<li><a href="../../../2014/03/05/spec-bdd.html">spec BDD</a></li>
<li><a href="../../../2014/03/11/phpspec-quick-tour.html">phpspec: a quick tour</a></li>
<li><a href="../../../2014/03/19/behavior-driven-development-story-bdd.html">Behavior Driven Development: story BDD</a></li>
<li><a href="../../../2014/03/26/behat-quick-tour.html">Behat: a quick tour</a></li>
<li><a href="../../../2014/04/02/tests-cheat-sheet.html">Conclusion</a></li>
</ol><p>Unlike the two previous articles, this one requires some experience in testing.
While Test Driven Development (TDD) oficionados would tell you that on the
contrary this is the way to learn tests, I'd rather advise you to practice them
a little bit before hand, so you can fully grasp the interest of this principle.</p>
<p>In this article, we'll cover:</p>
<ol><li><a href="#introduction">an introduction to TDD</a></li>
<li><a href="#writing-the-test-first">why we should write tests first</a></li>
<li><a href="#writing-the-code-afterward">how to write the code afterward</a></li>
<li><a href="#refactoring-in-the-end">the importance of refactoring in the end</a></li>
</ol><p><a href="#conclusion">TL;DR: jump to the conclusion</a>.</p>
<h2 id="introduction">Introduction<a href="#introduction" class="anchor">#</a></h2>
<p>Test Driven Development (TDD) is a simple principle stating that we should:</p>
<ol><li>write the test first</li>
<li>then write the code to make it pass</li>
<li>then refactor to clean the mess</li>
</ol><p>It is also described as <code>red, green, refactor</code> to reflect the state of the tests
after being run in the end of each step. Well the last step should still be
green, but it wouldn't be self explicit if we said <code>red, green, green</code> wouldn't
it?</p>
<p>Kent Beck is considered to be the father of TDD, even though this practice must
have been used before, especially because he wrote the
<a href="http://en.wikipedia.org/wiki/Test-Driven_Development_by_Example">'bible' Test Driven Development by Example</a>
and also because he created the <a href="http://en.wikipedia.org/wiki/Extreme_Programming">eXtreme Programming methodology</a>
(which integrates TDD into its practices).</p>
<p>TDD mostly applies to <strong>unit</strong> tests, but it could be used for any kind of test.</p>
<p>Each step has a purpose, which we'll discover.</p>
<h2 id="writing-the-test-first">Writing the test first<a href="#writing-the-test-first" class="anchor">#</a></h2>
<p>So, why would we write the test before the code? The idea behind this is to
write a piece of software which will describe how to use the future code: when
writing the test, you're not bothered with implementation details and will
naturally create the API (the public methods).</p>
<p>The first consequence to this step is having a meaningful code coverage: no need
for tools to inspect which lines of code are executed when running the test in
order to make sure the code is properly tested
(<a href="http://codemanship.co.uk/parlezuml/blog/?postid=1202">those tools aren't effective anyway</a>).</p>
<p>The second one is better design: to write tests you need the code to be
decoupled. Writing tests firts forces you to make those decoupling decision
early. Decoupled code should be easier to re-use, read and maintain.</p>
<h2 id="writing-the-code-afterward">Writing the code afterward<a href="#writing-the-code-afterward" class="anchor">#</a></h2>
<p><a href="http://vimeo.com/68375232">As depicted by Ian Cooper</a>, this step is the
<a href="http://www.joelonsoftware.com/items/2009/09/23.html">duct tape progammer</a>'s
one: in order to make the freshly written test pass, every sin should be
commited. Every design, clean code and best practice concerns should be put
aside so the test passes as quickly as possible.</p>
<p>Why so much fuss about all
<a href="http://redotheweb.com/2013/06/04/you-should-write-ugly-code.html">this ugly code</a>?
The main reason is speed, to answer all criticism about how long tests take to
be written.</p>
<p>With this, the school of pragmatic programmers and scholar ones can finally be
reunited: as a matter of fact, while this step is all about the first "clan",
the refactoring step is all about the second one.</p>
<p>To illustrate the fact that sometimes the clean solution comes to mind once the
dirty has been written, here's a quote from <a href="http://eloquentjavascript.net/chapter6.html">the Eloquent Javascript book</a>:</p>
<blockquote>
<p>A student had been sitting motionless behind his computer for hours,
frowning darkly. He was trying to write a beautiful solution to a
difficult problem, but could not find the right approach. Fu-Tzu hit
him on the back of his head and shouted '<em>Type something!</em>' The student
started writing an ugly solution. After he had finished, he suddenly
understood the beautiful solution.</p>
</blockquote>
<h2 id="refactoring-in-the-end">Refactoring in the end<a href="#refactoring-in-the-end" class="anchor">#</a></h2>
<p>Now that we have sin, we have created a technical debt. The third and last step
of TDD, refactoring, is all about managing this debt.</p>
<p>The rules here is to step back a little bit, consider how we can improve the
structure of the code to make it simpler, more readable and if there's anything
which can be extracted to be reused.</p>
<p>Once this consideration is done, then we can start moving the code at the only
condition that we don't break the tests. It also means that the tests shouldn't
be modified.</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Writing first the test allows a complete and meaningful code coverage, a more
decoupled code and a more natural API (public methods).</p>
<p>Then allowing every sins to write as quickly as possible the code to make the
test pass allows to speed up development through pragmatic decisions.</p>
<p>Finally refactoring without touching the tests allows to get rid of the
technical debt created in the previous step, depending on the estimated time
left for the task.</p>
<p>Unfortunately TDD comes with a quite steep learning curve, but hey! You don't
get something for nothing!</p>
<p>I hope you enjoyed this article, if you'd like to make any comments about it
(either good or bad), please feel free to do so <a href="https://twitter.com/epiloic">on Twitter</a>.</p>
<p>There's been many criticism about TDD, and most of those are simply
misconceptions. If you're part of the sceptics,
<a href="http://codemanship.co.uk/parlezuml/blog/?postid=1170">check if your argument is listed in Jason Gorman's article</a>.</p>
<p>The next article is about <a href="../../../2014/02/26/tdd-just-do-it.html">actually doing TDD</a>.</p>]]></content>
    </entry>
        <entry>
        <title>Tests: Tools overview</title>
                <id>http://gnugat.github.io/2014/02/12/tests-tools-overview.html</id>
                <updated>2014-02-12T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/02/12/tests-tools-overview.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>This article is part of a series on Tests in general and on how to practice
them:</p>
<ol><li><a href="../../../2014/02/05/tests-introduction.html">Introduction</a></li>
<li><a href="../../../2014/02/12/tests-tools-overview.html">Tools overview</a></li>
<li><a href="../../../2014/02/19/test-driven-development.html">Test Driven Development</a></li>
<li><a href="../../../2014/02/26/tdd-just-do-it.html">TDD: just do it!</a></li>
<li><a href="../../../2014/03/05/spec-bdd.html">spec BDD</a></li>
<li><a href="../../../2014/03/11/phpspec-quick-tour.html">phpspec: a quick tour</a></li>
<li><a href="../../../2014/03/19/behavior-driven-development-story-bdd.html">Behavior Driven Development: story BDD</a></li>
<li><a href="../../../2014/03/26/behat-quick-tour.html">Behat: a quick tour</a></li>
<li><a href="../../../2014/04/02/tests-cheat-sheet.html">Conclusion</a></li>
</ol><p>This article can be read by any regular developer (no special level required),
we'll put some code on the principles we've previously seen and we'll have a
quick look on existing tools. Here's what we'll cover:</p>
<ol><li><a href="#test-frameworks">test frameworks</a></li>
<li><a href="#phpunit">PHPUnit</a></li>
<li><a href="#unit-tests">unit tests</a> with test doubles (mocks and stubs)</li>
<li><a href="#functional-tests">functional tests</a></li>
<li><a href="#user-interface-tests">user interface tests</a></li>
</ol><p><a href="#conclusion">TL;DR: jump to the conclusion</a>.</p>
<h2 id="test-frameworks">Test frameworks<a href="#test-frameworks" class="anchor">#</a></h2>
<p>In order to automate your tests (whether they're unitary, functionnal or anything
else), you'll need to use some tools. These would be libraries helping you
doing assertions, or libraries helping you creating test doubles without writing
any new classes, or even frameworks which group those libraries together.</p>
<p>Most of the test frameworks follow the
<a href="http://www.xprogramming.com/testfram.htm"><strong>xUnit</strong> convention, which have been (accidently?) created by Kent Beck</a>.
Those are composed of:</p>
<ul><li>a test runner which gather the <strong>test suites</strong>, execute their tests and then
prints the result using a <strong>test result formatter</strong></li>
<li>a test case, a class which you extend to write your tests</li>
<li>test fixtures to provide data as context for the tests</li>
<li>test suites, a bunch of tests which share commonalities (in practice this would
be the class which extends the test case and where you'll write your tests)</li>
<li>test execution: you can execute a bunch of code before every test with a
<strong>setUp</strong> method, and afterward in a <strong>tearDown</strong> function</li>
<li>test result formatter taking responsibility for outputing how test failed,
or if it should be written on the output or in a XML file</li>
<li>assertions which check if the given expected value matches the given actual
value</li>
</ul><p>Those are, among a ton of others:</p>
<ul><li><a href="http://phpunit.de/">PHPUnit</a> in PHP</li>
<li><a href="https://github.com/atoum/">Atoum</a> in PHP</li>
<li><a href="http://junit.org/">jUnit</a> in Java</li>
<li><a href="http://docs.python.org/2/library/unittest.html">unittest</a> in Python</li>
</ul><p>You could aslo find Behavior Driven Development (BDD) style test frameworks:</p>
<ul><li><a href="http://codeception.com/">Codeception</a> in PHP</li>
<li><a href="http://www.phpspec.net/">phpspec</a> alongside with <a href="http://behat.org/">Behat</a>
in PHP</li>
<li><a href="http://pivotal.github.io/jasmine/">jasmine</a> in javascript</li>
<li><a href="http://rspec.info/">RSpec</a> in ruby</li>
</ul><p>I won't talk about these, as it will be the subject of a future article
(there's so much to say about them).</p>
<p>Full stack frameworks isn't the only thing around here to help you write tests,
there also are some libraries:</p>
<ul><li><a href="http://visionmedia.github.io/mocha/">Mocha</a>, a base layer for tests,
in javascript</li>
<li><a href="http://chaijs.com/">Chai</a>, an assertion library in javascript</li>
<li><a href="http://sinonjs.org/">Sinon.js</a>, a test double library in javascript</li>
<li><a href="https://github.com/padraic/mockery">Mockery</a>, a mock framework in PHP</li>
<li><a href="https://github.com/phpspec/prophecy">Prophecy</a>, another mock framework in PHP</li>
</ul><p>Choose your weapon wisely!</p>
<h2 id="phpunit">PHPUnit<a href="#phpunit" class="anchor">#</a></h2>
<p>I mainly code in PHP, and in this language PHPUnit is the most popular test
framework. It's been there for so long (version 1.0.0 released in July 2006)
that almost any libraries and frameworks are tested with it. So it'll be our tool
for the next examples.</p>
<p>You can install it using <a href="https://getcomposer.org/">Composer</a>:</p>
<pre><code>curl -sS https://getcomposer.org/installer | php # Download composer
composer install "phpunit/phpunit:~3.7"
php vendor/bin/phpunit -h</code></pre>
<p><strong>Note</strong>: if you don't know Composer, let's just say that it makes your life easier
by downloading for you the libraries you told him to (it takes care of selecting
the good versions and can update them to get bug fixes). It also autoloads your
classes so you don't have to require them.</p>
<p>Now that you have the latest stable version, you'll need to configure it:</p>
<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- File: phpunit.xml --&gt;
&lt;phpunit
    backupGlobals="false"
    colors="true"
    syntaxCheck="false"
    bootstrap="test/bootstrap.php"
&gt;
    &lt;testsuites&gt;
        &lt;testsuite name="Fossil Test Suite"&gt;
            &lt;directory suffix="Test.php"&gt;./test/&lt;/directory&gt;
        &lt;/testsuite&gt;
    &lt;/testsuites&gt;
&lt;/phpunit&gt;</code></pre>
<p>This configuration tells PHPUnit to look (recursively) in the <code>test</code> directory
for files ending in <code>Test.php</code>. Those will be your test suites.</p>
<p>You'll need a bootstrap file in order to use composer's autoloader:</p>
<pre><code>&lt;?php

$loader = require __DIR__.'/../vendor/autoload.php';
$loader-&gt;add('Gnugat\\Fossil\\Test', __DIR__);</code></pre>
<p>And voil&agrave;! You can now write your tests in <code>test</code>.</p>
<h2 id="unit-tests">Unit tests<a href="#unit-tests" class="anchor">#</a></h2>
<p>The common understanding of unit test is a symmetry between classes and tests:
when you have a class with 2 methods, you need to have a test class for it
which will test these two methods.</p>
<p>It looks like this wasn't the real meaning of the term unit, which should have
meant making tests which can be run in any order without ruinning them, and as
many times as wanted. Fortunately a new kind of test was created to fix this
misunderstanding, so let's stick with the common one.</p>
<p>Imagine you have the following class, which creates a file if it doesn't already
exist:</p>
<pre><code>&lt;?php
// File: src/MarkdownFile/DocumentationWriter.php

namespace Gnugat\Fossil\MarkdownFile;

use Symfony\Component\Filesystem\Filesystem;

class DocumentationWriter
{
    private $filesystem;

    public function __construct(Filesystem $filesystem)
    {
        $this-&gt;filesystem = $filesystem;
    }

    public function write($absolutePathname, $content)
    {
        if (!$this-&gt;filesystem-&gt;exists($absolutePathname)) {
            $this-&gt;filesystem-&gt;dumpFile($absolutePathname, $content);
        }
    }
}</code></pre>
<p><strong>Note</strong>: once again the code samples are taken from
<a href="https://github.com/gnugat/fossil">fossil</a>, have a look at
<a href="../../../2014/01/15/bootstrap-markdown-files-of-your-FOSS-project.html">this article</a>
to discover what it is.</p>
<p>In order for it to be autoloaded, you'll need to edit your <code>composer.json</code> file:</p>
<pre><code>{
    "require": {
        "phpunit/phpunit": "~3.7"
    },
    "autoload": {
        "psr-4": {
            "Gnugat\\Fossil": "src/"
        }
    }
}</code></pre>
<p>To test it, we could run it and check if the file has been created with the
given content, but that would be testing Symfony2's <code>Filesystem</code> which
<a href="https://github.com/symfony/symfony/blob/fe86efd3f256c5bda845cf23bf8a5400ae6a295e/src/Symfony/Component/Filesystem/Tests/FilesystemTest.php">happens to be already tested</a>.</p>
<p>So what does our class adds to it? Well it calls <code>Filesystem</code> to check if the
file exists, and if not it calls again the <code>Filesystem</code> to create it. We could
check if those calls are made using stubs and mocks.</p>
<p><strong>Reminder</strong>: stubs are a substitute of an object which forces it to return
a given value. When a System Under Test (SUT, the class you're testing) has
collaborators (classes used by the SUT, also called dependencies), we can stub
them so their behavior is completly controlled.</p>
<p><strong>Reminder</strong>: mocks are a substitute of an object which checks if its methods
have been called. When a System Under Test (SUT, the class you're testing) has
collaborators (classes used by the SUT, also called dependencies), we can mock
them to monitor their use.</p>
<p>PHPUnit allows us to create stubs and mocks without having to write a class
which extends the colaborator and overwrites its methods:</p>
<pre><code>&lt;?php
// File: test/MarkdownFile/DocumentationWriterTest.php

namespace Gnugat\Fossil\Test\MarkdownFile;

use Gnugat\Fossil\MarkdownFile\DocumentationWriter;

class DocumentationWriterTest extends \PHPUnit_Framework_TestCase
{
    const FIXTURE_ABSOLUTE_PATHNAME = '/tmp/example.txt';
    const FIXTURE_CONTENT = "Hello world\n";

    public function setUp()
    {
        $this-&gt;filesystem = $this-&gt;getMock('Symfony\\Component\\Filesystem\\Filesystem');
        $this-&gt;documentationWriter = new DocumentationWriter($this-&gt;filesystem);
    }

    public function testWriteNewFile()
    {
        // Stub
        $this-&gt;filesystem-&gt;expects($this-&gt;any())
            -&gt;method('exists')
            -&gt;with(self::FIXTURE_ABSOLUTE_PATHNAME)
            -&gt;will($this-&gt;returnValue(true))
        ;

        // Mock
        $this-&gt;filesystem-&gt;expects($this-&gt;once())
            -&gt;method('dumpFile')
            -&gt;with(
                $this-&gt;equalTo(self::FIXTURE_ABSOLUTE_PATHNAME),
                $this-&gt;equalTo(self::FIXTURE_CONTENT)
            )
        ;

        // Call
        $this-&gt;documentationWriter-&gt;write(
            self::FIXTURE_ABSOLUTE_PATHNAME,
            self::FIXTURE_CONTENT
        );
    }
}</code></pre>
<p>In the stub: for every call (<code>expects($this-&gt;any())</code>) of the method <code>exists</code>
with the parameter <code>self::FIXTURE_ABSOLUTE_PATHNAME</code>, force the colaborator to
return <code>true</code>.</p>
<p>In the mock: a unique call must be made (<code>expects($this-&gt;once())</code>) of the method
<code>dumpFile</code> with the two parameters <code>self::FIXTURE_ABSOLUTE_PATHNAME</code> and
<code>self::FIXTURE_CONTENT</code>.</p>
<p>You can run the test using <code>php vendor/bin/phpunit</code> and see that they pass. As
an exercise, write a second method in this test suite
<code>testDoesNotWriteExistingFile</code>, with a stub returning false and a mock checking
that <code>dumpFile</code> is never called (<a href="http://phpunit.de/manual/3.7/en/test-doubles.html#test-doubles.mock-objects.tables.matchers">hint</a>).</p>
<p>I advise you to watch <a href="http://verraes.net/2013/09/extract-till-you-drop/">extract till you drop</a>,
a nice refactoring session by Mathias Verraes: in order to improve his code, he
writes tests which give him enough confidence to proceed. He uses PHPUnit with
assertions, mocks and stubs, so you can really see their use.</p>
<h2 id="functional-tests">Functional tests<a href="#functional-tests" class="anchor">#</a></h2>
<p>Unit tests are used in order to make sure each unit of <code>code</code> works as expected.
But applications aren't just about code, they're also about interactions
between these units. This is what functional tests are for: they use the entry
point of the system and check the final status code.</p>
<p>To illustrate this, we'll still use PHPUnit: even though there's the word <code>unit</code>
in its name, this test framework allows us to write many types of tests.</p>
<p>The Symfony2 web framework is all about the HTTP protocol: it takes a HTTP
Request and returns a HTTP Response. It also provides a convenient client which
simulates HTTP Requests, allowing us to write easily functional tests:</p>
<pre><code>&lt;?php
// File: src/Acme/DemoBundle/Tests/Controller/DemoControllerTest.php

namespace Acme\DemoBundle\Tests\Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\Response;

class DemoControllerTest extends WebTestCase
{
    public function testIndex()
    {
        $client = static::createClient();

        $client-&gt;request('GET', '/demo/hello/Fabien');

        $this-&gt;assertSame(
            Response::HTTP_OK,
            $client-&gt;getResponse()-&gt;getStatusCode()
        );
    }
}</code></pre>
<p>The <code>assertSame</code> line is an assertion: it compares the expected value (first
argument) with the actual one (second one). PHPUnit provides many assertions:</p>
<ul><li><code>assertSame</code> is equivalent to <code>===</code> (type and value comparison)</li>
<li><code>assertEquals</code> is equivalent to <code>==</code> (loose value comparison)</li>
<li><code>assertFileExists</code> checks if the given filename corresponds to an exisitng file</li>
<li><a href="http://phpunit.de/manual/3.7/en/appendixes.assertions.html">and many more</a></li>
</ul><p>Different approaches exist with assertions, for example jasmine uses the
<code>expect</code> method to set the actual value, chained with a matcher like <code>toBe</code>
which takes the expected value:</p>
<pre><code>describe("A suite", function() {
  it("contains spec with an expectation", function() {
    var expectedValue = true;
    var actualValue = true;

    expect(actualValue).toBe(expectedValue);
  });
});</code></pre>
<p>In this case, assertions are splitted into expectations and matchers.</p>
<p>Back to our sheeps. Here's an example of functional test for a Symfony2 command:</p>
<pre><code>&lt;?php
// File: src/Acme/DemoBundle/Tests/Command/GreetCommandTest.php

namespace Acme/DemoBundle/Tests/Command;

use Symfony\Component\Console\Tester\CommandTester;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Acme\DemoBundle\Command\GreetCommand;

class ListCommandTest extends WebTestCase
{
    public function testExecute()
    {
        $kernel = $this-&gt;createKernel();
        $kernel-&gt;boot();

        $application = new Application($kernel);
        $application-&gt;add(new GreetCommand());

        $command = $application-&gt;find('demo:greet');
        $commandTester = new CommandTester($command);
        $commandTester-&gt;execute(
            array(
                'name' =&gt; 'Fabien',
                '--yell'  =&gt; true,
            )
        );

        $exitSuccess = 0;

        $this-&gt;assertSame($exitSuccess, $commandTester-&gt;getStatusCode());
    }
}</code></pre>
<p>Just like with a controller where we check the HTTP Response's status code, in
a command we check the exit status code.</p>
<h2 id="user-interfact-tests">User Interfact tests<a href="#user-interfact-tests" class="anchor">#</a></h2>
<p>Up until now, we've been testing that the code worked and that interractions
between all those units go well. But what about the thing the user actually
sees and interacts with?</p>
<p>The User Interface (UI) turns out to be tricky to test, but not impossible. You
can click on buttons, or load pages, or run CLI tasks programmatically and you
can inspect the standard output or the HTTP Response's content.</p>
<p>The main problem with this is that you'll tie your tests to the UI, which
changes a lot.</p>
<p>We'll see briefly the tools available and then better explain the flaws of such
a technique.</p>
<h3 id="selenium">Selenium<a href="#selenium" class="anchor">#</a></h3>
<p><a href="http://docs.seleniumhq.org/">Selenium</a> allows you to open a browser and
simulates interractions with the page. Technically it means having a Selenium
server running in the background, and using a webdriver library in your test to
send messages to it. In PHP, you can find those webdrivers:</p>
<ul><li><a href="https://github.com/alexandresalome/php-webdriver">One by Alexandre Salom&eacute;</a></li>
<li><a href="https://github.com/facebook/php-webdriver">another one by Facebook</a></li>
</ul><p>You can find code samples in the respective documentation of each library, for
example here's the doc describing <a href="https://github.com/alexandresalome/php-webdriver/blob/master/doc/elements.rst#element-api">how to click on a button with Alexandre's one</a>.</p>
<p>If you're curious, <a href="http://codeception.com/11-20-2013/webdriver-tests-with-codeception.html">here's how to use Selenium with another test framework</a>:
<a href="http://codeception.com/">Codeception</a>.</p>
<h3 id="casperjs">CasperJs<a href="#casperjs" class="anchor">#</a></h3>
<p>You don't like the idea of running a server in order to run your tests? You
don't want a browser to be openned and you <a href="http://stackoverflow.com/questions/2354590/why-is-selenium-rc-so-slow">find it too slow</a>?</p>
<p>Then you might want to try a <strong>headless website testing</strong> solution like
<a href="http://casperjs.org/">CasperJs</a>. It's headless because it won't open a
browser to make the tests.</p>
<p>Here's the <a href="http://docs.casperjs.org/en/latest/quickstart.html">get started documentation</a>,
so you can have a quick look on how to use it.</p>
<h3 id="goutte">Goutte<a href="#goutte" class="anchor">#</a></h3>
<p>Simulating a browser is too much for you? Making a curl request and parsing its
response would be sufficient for your needs? Then have a look at the
<a href="https://github.com/fabpot/goutte">Goutte web scrapper</a>.</p>
<p>This one also allows you to click on links.</p>
<h3 id="mink">Mink<a href="#mink" class="anchor">#</a></h3>
<blockquote>
<p>One Tool to rule them all, One Tool to find them,
One Tool to bring them all and in the webness bind them</p>
</blockquote>
<p><a href="http://mink.behat.org/">Mink</a> can use either Goutte or Selenium as a driver to
interract with the UI. It's goal is to provide a unified API.</p>
<h3 id="what-s-the-point">What's the point?<a href="#what-s-the-point" class="anchor">#</a></h3>
<p>The thing in common with all these tools is that they rely on the HTML rendered
in the HTTP Response. In order to check if a message appears, you'll have to
crawl the page, find the <code>div</code> using its class or id in a CSS selector, or even
worse using its xpath.</p>
<p>When the page will change (and it will) your tests will be broken. There's some
best practices out there, mainly making your tests rely on ID's on one hand and
making your code and stylesheets rely on classes on the other hand, but in the
end it still is a risky business.</p>
<p>Well that's my opinion and this section might be more a rant than an objective
description. To counter balance this, here's a nice article on
<a href="http://blog.mozilla.org/webqa/2013/09/26/writing-reliable-locators-for-selenium-and-webdriver-tests/">writing reliable locators for Selenium and WebDriver tests</a>.</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>In PHP, <a href="http://phpunit.de/">PHPUnit</a> is the most popular test framework and it
allows you to write unit, functional and every other kinds of tests.</p>
<p>Unit tests allow you to make sure each functions return the expected output when
given a set of fixtures, and functional tests are used to check the status code
(think HTTP response, or a command's exit status).</p>
<p>Stubs are used to force a colaborator's method to return a wanted value, and
mocks are used to check if a colaborator's method have been called.</p>
<p><a href="http://docs.seleniumhq.org/">Selenium</a> is the most popular tool to test the
User Interface, which is done by interracting with the HTML rendered in the
HTML's reponse.</p>
<p>I hope this article helped you to see how each kinds of tests are written. The
next one will be on Test Driven Development, a practice where tests are written
before the code: <a href="../../../2014/02/19/test-driven-development.html">TDD</a>.</p>
<p>If there's something bothering you in this post, or if you have a question, or
if you want to give me your opinion, be sure to do so on
<a href="https://twitter.com/epiloic">Twitter</a> ;) .</p>]]></content>
    </entry>
        <entry>
        <title>Tests: Introduction</title>
                <id>http://gnugat.github.io/2014/02/05/tests-introduction.html</id>
                <updated>2014-02-05T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/02/05/tests-introduction.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>This article is part of a series on Tests in general and on how to practice
them:</p>
<ol><li><a href="../../../2014/02/05/tests-introduction.html">Introduction</a></li>
<li><a href="../../../2014/02/12/tests-tools-overview.html">Tools overview</a></li>
<li><a href="../../../2014/02/19/test-driven-development.html">Test Driven Development</a></li>
<li><a href="../../../2014/02/26/tdd-just-do-it.html">TDD: just do it!</a></li>
<li><a href="../../../2014/03/05/spec-bdd.html">spec BDD</a></li>
<li><a href="../../../2014/03/11/phpspec-quick-tour.html">phpspec: a quick tour</a></li>
<li><a href="../../../2014/03/19/behavior-driven-development-story-bdd.html">Behavior Driven Development: story BDD</a></li>
<li><a href="../../../2014/03/26/behat-quick-tour.html">Behat: a quick tour</a></li>
<li><a href="../../../2014/04/02/tests-cheat-sheet.html">Conclusion</a></li>
</ol><p>This introduction can be read by anyone (no special level required) and it
targets those who've never heard about tests, or those you've never really
practice them. Here's what we'll cover:</p>
<ol><li><a href="#what-is-a-test">what is a test</a></li>
<li><a href="#what-are-the-different-kinds-of-tests">which kinds of tests are around there</a></li>
<li><a href="#how-to-do-an-isolated-test">how to do an isolated test</a></li>
</ol><p><a href="#conclusion">TL;DR: jump to the conclusion</a>.</p>
<h2 id="what-is-a-test">What is a test?<a href="#what-is-a-test" class="anchor">#</a></h2>
<p>A test is a way to check if part of the system is working. Let's say you just
wrote the <code>strlen</code> function: it takes a string as argument and returns its
length. To make sure it works correctly, you might have created a script file
which looked like this:</p>
<pre><code>&lt;?php

echo strlen('We'); // Should print 2
echo strlen('are'); // Sould print 3
echo strlen('the knights'); // Should print 11
echo strlen('who say "Ni"!'); // Should print 13</code></pre>
<p>This script (which you might have thrown away once satisfied with the printed
result) is a test. It makes sure your function works correctly by providing it
with different inputs and comparing its output with the expected one.</p>
<p>This test is not really efficient, but it does the work. Let's see how to
improve it in the following sections.</p>
<h2 id="what-are-the-different-kinds-of-tests">What are the different kinds of tests<a href="#what-are-the-different-kinds-of-tests" class="anchor">#</a></h2>
<p>Tests can be grouped under 3 categories:</p>
<ol><li>random manual tests</li>
<li>scenarized manual tests</li>
<li>automated tests</li>
</ol><h3 id="random-manual-tests">Random manual tests<a href="#random-manual-tests" class="anchor">#</a></h3>
<p>The first one is when you use your software to see if it works correctly. This
is the worst kind of test because systems can be so complex that some part will
enventually be forgoten, and therefore not checked.</p>
<p>Incidentally, this is what happens everyday when users use your product, except
you're not sure if they'll report the bugs they see (and for each bug discovery
you can potentially lose them).</p>
<p>Why do I mention it, if it's so bad? Because it's still usefull to discover bugs
on parts which haven't been correctly covered by the other kinds of tests.
Actually this is the kind of tests which are done during beta-tests: you get a
restricted set of (volunteer) users to use your product and see if everything
is fine.</p>
<h3 id="scenarized-manual-tests">Scenarized manual tests<a href="#scenarized-manual-tests" class="anchor">#</a></h3>
<p>Let's take a scientific approach to the first kind of tests by writing test
plans which describe use cases with their expected outcome.</p>
<p>Everytime someone tests the system, they follow the scenario given to them.
This is an improvement of the previous approach as there's less risk of
forgoting a step which is written.</p>
<p>Those tests are generally followed (more or less rigorously) during
<strong>acceptance testing</strong> at the end of developments by the customer or product
owner or even better by Quality Assurance (QA).</p>
<h3 id="automated-tests">Automated tests<a href="#automated-tests" class="anchor">#</a></h3>
<p>The problem with the two previous categories is that they require humans, and
<em>to err is human</em>. The software industry was partly created to automate
repititive tasks, so how about we automate those tests?</p>
<p>The simplest way of automating test is to use assertions:</p>
<pre><code>&lt;?php

$input = 'We are no longer the knights who say "Ni"!';
$expectedOutput = 42;

$output = strlen($input);

echo ($expectedOutput === $output ? 'Test pass' : 'Test fails');</code></pre>
<p>If you keep this script, you can run it regurarly, which means the risk of
forgoting a step is almost near zero! I say almost because the test doesn't
magically cover every use case: human still have to write them, which lets a
small room for errors to happen, but this is the best we can do.</p>
<p>As you can see, automated tests are constructed very simply:</p>
<ol><li>define the input and the expected output</li>
<li>execute the part of the system which needs to be tested</li>
<li>compare its output with the expected one</li>
</ol><h2 id="further-kinds-of-tests">Further kinds of tests<a href="#further-kinds-of-tests" class="anchor">#</a></h2>
<p>We've seen the 3 big categories of tests. But that's not quite it: whether it's
automated or not, your tests can target many levels/layers in your application:</p>
<ul><li>View layer:
<ul><li>User Interface (UI) tests: HTML and DOM</li>
</ul></li>
<li>Application layer:
<ul><li>functional tests: controllers, HTTP status code, command exit status</li>
</ul></li>
<li>Domain layer (the code which solves business needs):
<ul><li>behavior tests: interaction between classes</li>
<li>unit tests: services, interfaces, functions</li>
</ul></li>
</ul><p><strong>Note</strong>: this classification has been taken from
<a href="https://speakerdeck.com/halleck/symfony2-un-framework-oriente-domain-driven-design?slide=20">Jean Fran&ccedil;ois L&eacute;pine's slides</a></p>
<p>Each of those tests can be executed manually, or can be automated.</p>
<p>There's so many types of tests out there, and so little of us to write them!
Depending on your team, competences, project and planning, you won't be able to
write every possible tests.</p>
<p>I'm afraid you'll have somehow to chose which kind of test is more suitable for
you project. As a matter of fact, testing everything isn't wise:</p>
<pre><code>&lt;?php

class User
{
    private $name;

    public function __construct($name)
    {
        $this-&gt;name = $name;
    }

    public function getName()
    {
        return $this-&gt;name;
    }
}

// Is this test really usefull? I think not!
$input = 'Johann Gambolputty de von Ausfern -schplenden -schlitter -crasscrenbon -fried -digger -dangle -dungle -burstein -von -knacker -thrasher -apple -banger -horowitz -ticolensic -grander -knotty -spelltinkle -grandlich -grumblemeyer -spelterwasser -k&uuml;rstlich -himbleeisen -bahnwagen -gutenabend -bitte -eine -n&uuml;rnburger -bratwustle -gerspurten -mit -zweimache -luber -hundsfut -gumberaber -sh&ouml;nendanker -kalbsfleisch -mittler -raucher von Hautkopft of Ulm.';
$expectedOutput = $input;

$user = new User($input);
$output = $user-&gt;getName();

echo ($expectedOutput === $output ? 'Test pass' : 'Test fails');</code></pre>
<p>In the upper code sample, we're testing if the getter returns a value which
haven't been modified. Sure you could introduce a typo while sketching the
class, but once you've manually tested it a first time there's no need to check
regularly if it still works in the future.</p>
<p>You may not be able to write every possible tests, but still writing some tests
will save you time in the future as it will prevent regression: the software
industry is an industry of changing requirements, which means your code will
eventually be changed, adapted and sometime completly re-written.</p>
<p>Tests will allow you to change the code lighthearted, because if your change
breaks something, you'll know it simply by running your tests.</p>
<h2 id="how-to-do-an-isolated-test">How to do an isolated test?<a href="#how-to-do-an-isolated-test" class="anchor">#</a></h2>
<p>Chances are your system is composed of parts which interact with each other:
your functions call other functions, your classes depend on other classes and
use external functions, etc.</p>
<p>What if the part of the system you want to test interracts with a database, the
filesystem and also use a randomizer? Yep that's right, a randomizer: how can
you even write the expected output if it's supposed to be unpredictable?</p>
<p>The solution is quite simple: you should isolate the part you want to test.
In order to do so, you should use <strong>test doubles</strong> which is the practice of
replacing the dependencies of this part with objects which will behave the way
you tell them to.</p>
<p>There's many kinds of test doubles, fortunately <a href="http://martinfowler.com/articles/mocksArentStubs.html">Martin Fowler has summed it up
for you</a> as follow:</p>
<blockquote>
<ul><li>
<p>Dummy objects are passed around but never actually used.
Usually they are just used to fill parameter lists.</p>
</li>
<li>
<p>Fake objects actually have working implementations, but usually take some
shortcut which makes them not suitable for production (an in memory
database is a good example).</p>
</li>
<li>
<p>Stubs provide canned answers to calls made during the test, usually not
responding at all to anything outside what's programmed in for the test.
Stubs may also record information about calls, such as an email gateway
stub that remembers the messages it 'sent', or maybe only how many messages
it 'sent'.</p>
</li>
<li>Mocks are what we are talking about here: objects pre-programmed with
expectations which form a specification of the calls they are expected to
receive.</li>
</ul></blockquote>
<p>In practice you'll use stubs to specify the return value of the dependency, and
you'll use mocks to check if the dependency's method has been called. The best
way to create stubs and mocks is to write a class which inherits the targeted
dependency, and overwrites its public methods.</p>
<p><strong>Note</strong>: the part you want to test is called the System Under Test (SUT), and
its dependencies are called collaborators.</p>
<h3 id="dependency-injection-s-back">Dependency Injection's back!<a href="#dependency-injection-s-back" class="anchor">#</a></h3>
<p>Did you notice I've used the word dependency in this section? That's because in
order to make a class <em>testable</em>, you need it to be as decoupled as possible
from its dependencies.</p>
<p>You won't be able to easily replace dependencies which are created by the part
you want to test. The simplest way is to inject them (pass them as arguments)
to your class, allowing you to decide what should be injected: the real
dependency, or one of its stub (or mock).</p>
<p>This is why Dependency Injection is a big deal. If you don't clearly know what
is this design pattern about, I advise you to
<a href="../../../2014/01/22/ioc-di-and-service-locator.html">read this article</a></p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Tests allow you to make sure parts of your system work as expected, and they can
be automated so you can run them regurarly in order to detect any regressions.</p>
<p>There's a lot of layers which can be tested and you might have to choose what is
best for you (the wrong answer being "no tests for me, thank you very much").</p>
<p>Dependency Injection is the right way to go, as it will allow you to use test
doubles to isolate the part you want to check.</p>
<p>This article had much theory in it, so the next one will be more practical with
code samples, case studies and tools which will allow you to test your
applications: <a href="../../../2014/02/12/tests-tools-overview.html">Tools overview</a>.</p>
<h3 id="a-word-about-test-coverage">A word about test coverage<a href="#a-word-about-test-coverage" class="anchor">#</a></h3>
<p>I might not have stressed this out enough: <strong>tests won't magically prevent your
system from failing</strong>. This is all because your test will only cover the part
you targeted, for the use case you could think of at the time.</p>
<p>So, how to make sure your tests are enough? At first glance, test coverage might
be a solution: it's a tool which will mark any line of code executed while the
test is run and which will produce a report telling you which parts haven't been
visited.</p>
<p>The biggest flaw of such a tool is that just because you called a line doesn't
mean you tested it. The other important weakness is that not every code needs
to be tested (for example getters of values which are not altered): the report
will tell you a percentage of code covered, but it won't be able to tell you
if the covered part is the essential one.</p>
<p>In order to know if your tests cover the critical parts, mutation testing have
been invented: a tool will alter random parts of your code and run the tests. If
your tests fail, then they play well their role of guarding your application
against regressions.</p>
<p>However this is not very precise, they're slow and they can't know what are the
critical parts of your system...</p>
<p>I guess the best you can do is TDD, which we'll see in a future article ;) .</p>
<p>If you're interested in this subject, I advise you to read
<a href="http://codemanship.co.uk/parlezuml/blog/?postid=1202">Jason Gorman's article on code coverage</a>.</p>]]></content>
    </entry>
        <entry>
        <title>Symfony2 Dependency Injection component, by example</title>
                <id>http://gnugat.github.io/2014/01/29/sf2-di-component-by-example.html</id>
                <updated>2014-01-29T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/01/29/sf2-di-component-by-example.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>In <a href="../../../2014/01/22/ioc-di-and-service-locator.html">the previous article</a>
we've seen among other things the definition of Dependency Injection (DI) and of
the Dependency Injection Container (DIC).</p>
<p>In this article we'll see the Symfony2's DI component which provides a powerful
DIC. Here's the summary:</p>
<ul><li>putting the construction of your services into configuration</li>
<li>how to use it to wire your application</li>
</ul><p>You don't use Symfony2? Don't worry, this article is all about using this
component as a standalone library (you can use it in your
CakePHP/Zend/Home-made-framework application).</p>
<h2 id="construction-configuration">Construction configuration<a href="#construction-configuration" class="anchor">#</a></h2>
<p>DI is all about passing arguments to the constructor of an object. Because
constructing all those object might become a burden, the DIC is here to
take this responsibility and centralize it.</p>
<p>Let's replace <a href="http://pimple.sensiolabs.org/">Pimple</a> by
<a href="http://symfony.com/doc/current/components/dependency_injection/index.html">Symfony2 DI component</a>
in the code sample from the previous article:</p>
<pre><code>&lt;?php

use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\DependencyInjection\ContainerBuilder;

$container = new ContainerBuilder();

// This is a parameter definition
$container-&gt;setParameter('verbosity_level_map', array(
    OutputInterface::VERBOSITY_NORMAL =&gt; Logger::NOTICE,
    OutputInterface::VERBOSITY_VERBOSE =&gt; Logger::INFO,
    OutputInterface::VERBOSITY_VERY_VERBOSE =&gt; Logger::DEBUG,
    OutputInterface::VERBOSITY_DEBUG =&gt; Logger::DEBUG,
);

// register takes the service name, and then its fully qualified classname as a string
$container-&gt;register(
    'console_output',
    'Symfony\Component\Console\Output\ConsoleOutput'
);
$container-&gt;register(
    'output_formatter',
    'Gnugat\Fossil\ApplicationLayer\OutputFormatter'
);

// You can inject:
// * dependencies which have been declared previously
// * arguments
// * parameters which have been declared previously
// * setter dependencies
$container
    -&gt;register('console_handler', 'Symfony\Bridge\Monolog\Handler\ConsoleHandler')
    -&gt;addArgument(new Reference('console_output'))
    -&gt;addArgument(true)
    -&gt;addArgument('%verbosity_level_map%')
    -&gt;addMethodCall('setFormatter', array(new Reference('output_formatter')));
;

$container
    -&gt;register('logger', 'Monolog\Logger')
    -&gt;addArgument('default.logger')
    -&gt;addMethodCall('pushHandler', array(new Reference('console_handler')));
;

$container-&gt;register('filesystem', 'Symfony\Component\Filesystem\Filesystem');

$container
    -&gt;register('documentation_writer', 'Gnugat\Fossil\MarkdownFile\DocumentationWriter')
    -&gt;addArgument(new Reference('filesystem'))
    -&gt;addArgument(new Reference('logger'))
;</code></pre>
<p>If you think about it, the construction of objects is a configuration thing:
you need to define for each object their dependencies. Symfony2's DI component
allows you to put all those definition inside a configuration file:</p>
<pre><code>&lt;?xml version="1.0" ?&gt;
&lt;!-- File: dic_config.xml --&gt;

&lt;container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd"&gt;
    &lt;parameters&gt;
        &lt;parameter key="verbosity_Level_map" type="collection"&gt;
            &lt;parameter key="Symfony\Component\Console\Output\OutputInterface::VERBOSITY_NORMAL"&gt;Monolog\Logger::NOTICE&lt;/parameter&gt;
            &lt;parameter key="Symfony\Component\Console\Output\OutputInterface::VERBOSITY_VERBOSE"&gt;Monolog\Logger::INFO&lt;/parameter&gt;
            &lt;parameter key="Symfony\Component\Console\Output\OutputInterface::VERBOSITY_VERY_VERBOSE"&gt;Monolog\Logger::DEBUG&lt;/parameter&gt;
            &lt;parameter key="Symfony\Component\Console\Output\OutputInterface::VERBOSITY_DEBUG"&gt;Monolog\Logger::DEBUG&lt;/parameter&gt;
        &lt;/parameter&gt;
    &lt;/parameters&gt;

    &lt;services&gt;
        &lt;service id="console_output"
            class="Symfony\Component\Console\Output\ConsoleOutput"&gt;
        &lt;/service&gt;

        &lt;service id="output_formatter"
            class="Gnugat\Fossil\ApplicationLayer\OutputFormatter"&gt;
        &lt;/service&gt;

        &lt;service id="console_handler"
            class="Symfony\Bridge\Monolog\Handler\ConsoleHandler"&gt;
            &lt;argument type="service" id="console.output" /&gt;
            &lt;argument key="bubble"&gt;true&lt;/argument&gt;
            &lt;argument&gt;%verbosity_Level_map%&lt;/argument&gt;
            &lt;call method="setFormatter"&gt;
                 &lt;argument type="service" id="output_formatter" /&gt;
            &lt;/call&gt;
        &lt;/service&gt;

        &lt;service id="logger" class="Monolog\Logger"&gt;
            &lt;argument&gt;default.logger&lt;/argument&gt;
            &lt;call method="pushHandler"&gt;
                 &lt;argument type="service" id="console_handler" /&gt;
            &lt;/call&gt;
        &lt;/service&gt;

        &lt;service id="filesystem"
            class="Symfony\Component\Filesystem\Filesystem"&gt;
        &lt;/service&gt;

        &lt;service id="documentation_writer"
            class="Gnugat\Fossil\MarkdownFile\DocumentationWriter"&gt;
            &lt;argument type="service" id="filesystem" /&gt;
            &lt;argument type="service" id="logger" /&gt;
        &lt;/service&gt;
    &lt;/services&gt;
&lt;/container&gt;</code></pre>
<p>And here's the code sample allowing you to feed the DIC with this configuration:</p>
<pre><code>&lt;?php

// File: front_controller.php

use Symfony\Component\Config\FileLocator;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;

$container = new ContainerBuilder();
$configurationDirectory = new FileLocator(__DIR__);

$loader = new XmlFileLoader($container, $configurationDirectory);
$loader-&gt;load('dic_config.xml');

$documentationWriter = $container-&gt;get('documentation_writer');
$documentationWriter-&gt;write('/tmp/example.txt', 'Hello world');</code></pre>
<p>The construction of our objects has been completely removed from the code and
has been put into a configuration file. Actually, we've replaced object
constructions by container initialization, which is way more concise.</p>
<h3 id="configuration-format">Configuration format<a href="#configuration-format" class="anchor">#</a></h3>
<p>The Symfony2's DI component <a href="http://symfony.com/doc/current/components/dependency_injection/configurators.html">allows many configuration formats</a>:</p>
<ul><li>plain PHP (like in our first code sample)</li>
<li>XML (like in our second code sample)</li>
<li><a href="http://www.yaml.org/">YAML</a></li>
</ul><p>I wouldn't advise you to use YAML format, as it needs to introduce
<a href="http://symfony.com/doc/current/components/dependency_injection/parameters.html#yaml">special formating in order to support advanced options</a>
like:</p>
<ul><li>prefixing services ID's with <code>@</code></li>
<li>prefixing services ID's which aren't mandatory with <code>@?</code></li>
<li>prefixing <code>@</code> with <code>@</code> in order to escape them</li>
<li><a href="http://symfony.com/doc/current/book/service_container.html#using-the-expression-language">prefixing expressions with <code>@=</code></a></li>
</ul><p>Not to mention the fact that it doesn't support every options (for instance
<a href="http://symfony.com/doc/current/components/dependency_injection/parameters.html#constants-as-parameters">you cannot declare constants as parameters</a>)</p>
<p>On the other hand, the only thing XML doesn't support is concatenation:</p>
<pre><code>&lt;?php

use Symfony\Component\DependencyInjection\ContainerBuilder;

$container = new ContainerBuilder();
// Needs to be done in plain PHP
$container-&gt;setParameter('skeletons_path', __DIR__.'/skeletons');</code></pre>
<p>XML can be easily validated and it also can be read by many software like IDE's
which can use it in order to provide you with blissful autocompletion.</p>
<p>If you're concerned about performances (reading XML might be slower than
requiring directly plain PHP), Symfony2's DI component allows you to convert it
into plain PHP and dump it into a cache file which you can then include in
your application: <a href="http://symfony.com/doc/current/components/dependency_injection/compilation.html#dumping-the-configuration-for-performance">take a look at the documentation</a>.</p>
<h2 id="wiring-your-application">Wiring your application<a href="#wiring-your-application" class="anchor">#</a></h2>
<p>There's a fantastic conclusion we can deduce from the above section: we can
reduce the lines of codes of our projects simply by extracting object
construction and putting it into configuration files.</p>
<p>Object construction is part of the "wiring layer" of your application: it
doesn't solve your "business problem", nor does it solve your
"application problem". It simply is the boilerplate code necessary to write
those.</p>
<p>Let's explore the impact of wiring your application using Symfony2's DI
component. You might not have noticed it, but the code samples used in the
previous article as well as in this one all come from <a href="https://github.com/gnugat/fossil">fossil</a>,
a command which allows you to bootstrap markdown files of your projects
(<a href="../../../2014/01/15/bootstrap-markdown-files-of-your-FOSS-project.html">cf this article</a>).
It uses Symfony2's Console component which requires some boilerplate code in
order to create the application:</p>
<pre><code>&lt;?php

// This is the front controller of the application
// File: fossil

use Gnugat\Fossil\DocCommand;
use Symfony\Component\Config\FileLocator;
use Symfony\Component\Console\Application;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;

$container = new ContainerBuilder();
$configurationDirectory = new FileLocator(__DIR__);

$loader = new XmlFileLoader($container, $configurationDirectory);
$loader-&gt;load('dic_config.xml');

$documentationWriter = $container-&gt;get('documentation_writer');

$docCommand = new DocCommand($documentationWriter);

$application = new Application('Fossil', '2.0.0');
$application-&gt;add($docCommand);

$output = $container-&gt;get('console_output');

$application-&gt;run(null, $output);</code></pre>
<p>Can you imagine what this front controller can become if we were to add more
commands? You'd rather not? Me neither, that's why I advise you to put all this
boilerplate code into a configuration file:</p>
<pre><code>&lt;?xml version="1.0" ?&gt;

&lt;!-- File: dic_config.xml --&gt;

&lt;container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd"&gt;
    &lt;services&gt;
        &lt;service id="console_output"
            class="Symfony\Component\Console\Output\ConsoleOutput"&gt;
        &lt;/service&gt;

        &lt;service id="output_formatter"
            class="Gnugat\Fossil\ApplicationLayer\OutputFormatter"
        &lt;/service&gt;

        &lt;service id="console_handler"
            class="Symfony\Bridge\Monolog\Handler\ConsoleHandler"
            &lt;argument type="service" id="console.output" /&gt;
            &lt;argument key="bubble"&gt;true&lt;/argument&gt;
            &lt;argument&gt;%verbosity_Level_map%&lt;/argument&gt;
            &lt;call method="setFormatter"&gt;
                 &lt;argument type="service" id="output_formatter" /&gt;
            &lt;/call&gt;
        &lt;/service&gt;

        &lt;service id="logger" class="Monolog\Logger"&gt;
            &lt;argument&gt;default.logger&lt;/argument&gt;
            &lt;call method="pushHandler"&gt;
                 &lt;argument type="service" id="console_handler" /&gt;
            &lt;/call&gt;
        &lt;/service&gt;

        &lt;service id="filesystem"
            class="Symfony\Component\Filesystem\Filesystem"
        &lt;/service&gt;

        &lt;service id="documentation_writer"
            class="Gnugat\Fossil\MarkdownFile\DocumentationWriter"
            &lt;argument type="service" id="filesystem" /&gt;
            &lt;argument type="service" id="logger" /&gt;
        &lt;/service&gt;

        &lt;service id="doc_command" class="Gnugat\Fossil\DocCommand"&gt;
            &lt;argument type="service" id="documentation_writer" /&gt;
        &lt;/service&gt;

        &lt;service id="application"
            class="Symfony\Component\Console\Application"&gt;
            &lt;argument key="name"&gt;Fossil&lt;/argument&gt;
            &lt;argument key="version"&gt;2.0.0&lt;/argument&gt;
            &lt;call method="add"&gt;
                 &lt;argument type="service" id="doc_command" /&gt;
            &lt;/call&gt;
        &lt;/service&gt;
    &lt;/services&gt;
&lt;/container&gt;</code></pre>
<p>Which allows us to reduce our front controller:</p>
<pre><code>&lt;?php

// This is the front controller of the application
// File: fossil

use Symfony\Component\Config\FileLocator;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;

$container = new ContainerBuilder();
$configurationDirectory = new FileLocator(__DIR__);

$loader = new XmlFileLoader($container, $configurationDirectory);
$loader-&gt;load('dic_config.xml');

$application = $container-&gt;get('application');

$output = $container-&gt;get('console_output');

$application-&gt;run(null, $output);</code></pre>
<p>Now our concern is the size of the <code>dic_config.xml</code> file which will keep growing
each time we create new services. Don't panic! You can split it into many files
using the <code>imports</code> tag:</p>
<pre><code>&lt;?xml version="1.0" ?&gt;

&lt;!-- File: config/dic.xml --&gt;

&lt;container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd"&gt;
    &lt;imports&gt;
        &lt;import resource="01-application.xml" /&gt;
        &lt;import resource="02-documentation_writer.xml" /&gt;
    &lt;/imports&gt;
&lt;/container&gt;</code></pre>
<p>We created a <code>config</code> directory to put all those XML files, which means we
should change our front controller to:</p>
<pre><code>&lt;?php

// This is the front controller of the application
// File: fossil

use Symfony\Component\Config\FileLocator;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;

$container = new ContainerBuilder();
$configurationDirectory = new FileLocator(__DIR__.'/config');

$loader = new XmlFileLoader($container, $configurationDirectory);
$loader-&gt;load('dic.xml');

$application = $container-&gt;get('application');

$output = $container-&gt;get('console_output');

$application-&gt;run(null, $output);</code></pre>
<p>The creation of the <code>config/01-application.xml</code> and
<code>config/02-documentation_writer.xml</code> files is left as an exercise for the
reader.</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>The Symfony2's Dependency Injection component can be used outside of a Symfony2
application. It provides a powerful DIC which can be initialized using
configuration files. This means that boilerplate code (also called "wiring
layer") can be removed from your code and put in configuration files, hooray!</p>
<p>I hope you enjoyed this article, be sure to
<a href="https://twitter.com/epiloic">tweet me what you think about it</a> ;) .</p>
<h3 id="nota-bene">Nota bene<a href="#nota-bene" class="anchor">#</a></h3>
<p>We've used the component as a standalone library, but everything we've done
here is possible inside a Symfony2 fullstack application.</p>
<p>There's also some tips I'd like to share with you:</p>
<h3 id="doctrine-repositories-as-services">Doctrine repositories as services<a href="#doctrine-repositories-as-services" class="anchor">#</a></h3>
<p>The construction of Doctrine repositories is fully handled by the EntityManager,
which means:</p>
<ol><li>you cannot inject them as dependencies in your own services</li>
<li>you cannot inject dependencies into them</li>
</ol><p><a href="https://gist.github.com/gnugat/8314217">Or can you?</a></p>
<h3 id="service-locator">Service locator<a href="#service-locator" class="anchor">#</a></h3>
<p><a href="../../../2014/01/22/ioc-di-and-service-locator.html">The previous article</a>
spoke about service locator, which is all about using DIC as a dependency. If
you still don't see what it means, take a look at <a href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/ContainerAware.php">Symfony2 ContainerAware classes</a>.</p>
<p>For example, a <a href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/Controller.php">Symfony2 controller</a>
uses the DIC as a Service Locator. In this specific case it might be justified,
as the controller shouldn't contain any logic: its purpose is to pass the
request's parameters to some services, and to feed their return values as the
response's parameters.</p>
<p>Keep in mind that in your own code, there's a 99.99% chance that using Service
Locator is a unjustified decision ;) .</p>]]></content>
    </entry>
        <entry>
        <title>Inversion of Control, Dependency Injection, Dependency Injection Container and Service Locator</title>
                <id>http://gnugat.github.io/2014/01/22/ioc-di-and-service-locator.html</id>
                <updated>2014-01-22T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/01/22/ioc-di-and-service-locator.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>If you don't want to read this article, just jump to the <a href="#conclusion">conclusion</a>
which sums it up in 44 words.</p>
<p>If you've never heard of those (or one of those), this article will teach you
what they are.</p>
<p>If you know what are those, but don't know what's the difference between them,
this article will teach you what it is.</p>
<p>If you know what are those and what's the difference between them... Well read
this article and tell me what you think about it on
<a href="https://twitter.com/epiloic">Twitter</a> ;) .</p>
<p>Those big names actually refer to simple design patterns and principles which
might help you in your projects. Maybe you've been using them without knowing it!</p>
<h2 id="inversion-of-control">Inversion of Control<a href="#inversion-of-control" class="anchor">#</a></h2>
<p>This principle is very abstract, as it is based on the way you use objects
rather than specifying how to write them.</p>
<p>To keep things short: IoC (Inversion of Control) is all about relationship
between higher level classes and detail classes. Higher level classes shouldn't
depend on detail classes, but rather the contrary.</p>
<p>In order to ensure this, higher level classes should depend on abstractions
(like interfaces) instead of depending on concrete classes. Also, you should
make sure that higher level classes own detail classes.</p>
<p>While I understand this principle, I cannot make a better explanation than this
which is really a shame. But I know a good article which can:
<a href="http://lostechies.com/derickbailey/2011/09/22/dependency-injection-is-not-the-same-as-the-dependency-inversion-principle/">Dependency Injection is NOT the same as the Dependency Inversion Principle, by Derick Bailey</a>.</p>
<p>I really encourage you to read it as it explains very well the problem IoC tries
to solve, with some good (and graphical) examples.</p>
<h2 id="dependency-injection">Dependency Injection<a href="#dependency-injection" class="anchor">#</a></h2>
<p>Let's explain each words:</p>
<ul><li>a dependency is an object used by your class</li>
<li>an injection is the fact of passing an argument to a function</li>
</ul><p>Some people instanciate those dependencies inside the class which use them, for
example:</p>
<pre><code>&lt;?php

namespace Gnugat\Fossil\MarkdownFile;

use Symfony\Component\Filesystem\Filesystem;

class DocumentationWriter
{
    public function write($absolutePathname, $content)
    {
        $filesystem = new Filesystem();
        if (!$filesystem-&gt;exists($absolutePathname)) {
            $filesystem-&gt;dumpFile($absolutePathname, $content);
        }
    }
}

$documentationWriter = new DocumentationWriter();
$documentationWriter-&gt;write('/tmp/example.txt', 'Hello world');</code></pre>
<p>There's nothing wrong with this code, but it could be improved.</p>
<p>First of all, it happens that <code>Filesystem</code> is "stateless": you can call every
methods it has, in the order you want, it won't change the way it behaves. Which
means you could create a single instance for your whole application: it would
save some precious memory.</p>
<p>Second of all, this class cannot be tested: if anything, you would be testing
<code>Filesystem</code> itself by checking if the file was written with the same name and
content.</p>
<p>DI (Dependency Injection) is used to solve these two problems: you should first
create the instance of <code>Filesystem</code> and then pass it to (inject it into)
<code>DocumentationWriter</code>:</p>
<pre><code>&lt;?php

namespace Gnugat\Fossil\MarkdownFile;

use Symfony\Component\Filesystem\Filesystem;

class DocumentationWriter
{
    public function write(Filesystem $filesystem, $absolutePathname, $content)
    {
        if (!$filesystem-&gt;exists($absolutePathname)) {
            $filesystem-&gt;dumpFile($absolutePathname, $content);
        }
    }
}

$filesystem = new Filesystem();

$documentationWriter = new DocumentationWriter();
$documentationWriter-&gt;write($filesystem, '/tmp/example.txt', 'Hello world');</code></pre>
<p>The dependency can now be shared throughout your application, and you can pass
a mock of it which will be able to tell you which method was called.</p>
<p>Injection is usually done via the constructor:</p>
<pre><code>&lt;?php

namespace Gnugat\Fossil\MarkdownFile;

use Symfony\Component\Filesystem\Filesystem;

class DocumentationWriter
{
    private $filesystem;

    public function __construct(Filesystem $filesystem)
    {
        $this-&gt;filesystem = $filesystem;
    }

    public function write($absolutePathname, $content)
    {
        if (!$this-&gt;filesystem-&gt;exists($absolutePathname)) {
            $this-&gt;filesystem-&gt;dumpFile($absolutePathname, $content);
        }
    }
}

$filesystem = new Filesystem();

$documentationWriter = new DocumentationWriter($filesystem);
$documentationWriter-&gt;write('/tmp/example.txt', 'Hello world');</code></pre>
<p>Time to time, injection will be done via setters:</p>
<pre><code>&lt;?php

namespace Gnugat\Fossil\MarkdownFile;

use Symfony\Component\Filesystem\Filesystem;

class DocumentationWriter
{
    private $filesystem;

    public function setFilesystem(Filesystem $filesystem)
    {
        $this-&gt;filesystem = $filesystem;
    }

    public function write($absolutePathname, $content)
    {
        if (!$this-&gt;filesystem-&gt;exists($absolutePathname)) {
            $this-&gt;filesystem-&gt;dumpFile($absolutePathname, $content);
        }
    }
}

$filesystem = new Filesystem();

$documentationWriter = new DocumentationWriter();
$documentationWriter-&gt;setFilesystem($filesystem);
$documentationWriter-&gt;write('/tmp/example.txt', 'Hello world');</code></pre>
<p>Setter injection is used when you have no control on the object construction,
and can be dangerous: if the setter isn't called, a runtime error will occur.</p>
<p>To help debug this kind of error, you can do this:</p>
<pre><code>&lt;?php

namespace Gnugat\Fossil\MarkdownFile;

use Symfony\Component\Filesystem\Filesystem;

class DocumentationWriter
{
    private $filesystem;

    public function setFilesystem(Filesystem $filesystem)
    {
        $this-&gt;filesystem = $filesystem;
    }

    public function write($absolutePathname, $content)
    {
        if (!$this-&gt;getFilesystem()-&gt;exists($absolutePathname)) {
            $this-&gt;getFilesystem()-&gt;dumpFile($absolutePathname, $content);
        }
    }

    private function getFilesystem()
    {
        if (!($this-&gt;filesystem instanceof Filesystem)) {
            $msg = 'The Filesystem dependency is missing.';
            $msg .= ' Did you forgot to call setFilesystem?';
            throw new \LogicException($msg);
        }

        return $this-&gt;filesystem;
    }
}

$documentationWriter = new DocumentationWriter();
// Will throw an exception with a helpful message.
$documentationWriter-&gt;write('/tmp/example.txt', 'Hello world');</code></pre>
<p>You shouldn't need to use setter injection in your own class, but rather on
classes which extend third party library.</p>
<p>For example Doctrine's repositories can only be retrieved using its
<code>EntityManager</code>, which mean you don't have the control on its construction. If
you need to pass dependencies to it, you'll have to use setter injection.</p>
<h3 id="dependency-injection-and-inversion-of-control">Dependency Injection and Inversion of Control<a href="#dependency-injection-and-inversion-of-control" class="anchor">#</a></h3>
<p>The subject of <a href="http://lostechies.com/derickbailey/2011/09/22/dependency-injection-is-not-the-same-as-the-dependency-inversion-principle/">the article previously quoted</a>
is the relation between DI and IoC: some people confuse them and think they're
the same by simply deducing that IoC is injecting interfaces instead of concrete
classes.</p>
<p>While combining them is possible, you should remember that IoC is first a matter
of higher level classes owning their detail classes. The principle (IoC) and the
design pattern (DI) are really different things.</p>
<h2 id="dependency-injection-container">Dependency Injection Container<a href="#dependency-injection-container" class="anchor">#</a></h2>
<p>The flaw of DI is the manual construction of all those objects: some classes
might have dependencies which themselves have dependencies. And even without
deep dependencies, manually creating a large number of classes is never
pleasant.</p>
<p>The biggest risk is to scatter object construction in the whole application and
losing track of it: if you don't know that an object has already been
constructing you might accidently construct it again.</p>
<p>Let's add a dependency on <a href="https://github.com/Seldaek/monolog">Monolog</a> to our
<code>DocumentationWriter</code> (plus some custom configuration to spice it up):</p>
<pre><code>&lt;?php

use Gnugat\Fossil\ApplicationLayer\OutputFormatter;
use Gnugat\Fossil\MarkdownFile\DocumentationWriter;
use Monolog\Logger;
use Symfony\Bridge\Monolog\Handler\ConsoleHandler;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;

$verbosityLevelMap = array(
    'OutputInterface::VERBOSITY_NORMAL' =&gt; Logger::NOTICE,
    'OutputInterface::VERBOSITY_VERBOSE' =&gt; Logger::INFO,
    'OutputInterface::VERBOSITY_VERY_VERBOSE' =&gt; Logger::DEBUG,
    'OutputInterface::VERBOSITY_DEBUG' =&gt; Logger::DEBUG,
);

$consoleOutput = new ConsoleOutput();
$outputFormatter = new OutputFormatter();
$consoleHandler = new ConsoleHandler(
    $consoleOutput,
    true,
    $verbosityLevelMap
);
$consoleHandler-&gt;setFormatter($outputFormatter);

$logger = new Logger('default.logger');
$logger-&gt;pushHandler($consoleHandler);

$filesystem = new Filesystem();

$documentationWritter = new DocumentationWriter(
    $filesystem,
    $logger
);
$documentationWriter-&gt;write('/tmp/example.txt', 'Hello world');</code></pre>
<p>It's quite a burden isn't it?</p>
<p>The DIC (Dependency Injection Container) solves this problem by taking the
responsibility of creating them for you. technically, you still write all of
these lines, but instead of putting them mixed with business logic code you put
it in a separate file.</p>
<p>DIC can be found in many languages:</p>
<ul><li>java, for example with <a href="http://docs.spring.io/spring/docs/2.5.6/reference/beans.html">Spring</a></li>
<li>PHP, for example with <a href="http://framework.zend.com/manual/2.0/en/modules/zend.di.introduction.html">Zend\Di</a></li>
<li>js, for example in <a href="http://angularjs.org/">AngularJs</a></li>
</ul><p>To better understand what is a DIC, we'll take a look at <a href="pimple.sensiolabs.org">Pimple</a>,
a small DIC for PHP using a javascript-like syntax.</p>
<p>Pimple can be considered as an array in which you can put parameters and
"factories": an anonymous function which creates an instance of the class.</p>
<p>Here's the code sample:</p>
<pre><code>&lt;?php

// File: dic.php

use Gnugat\Fossil\ApplicationLayer\OutputFormatter;
use Gnugat\Fossil\MarkdownFile\DocumentationWriter;
use Monolog\Logger;
use Symfony\Bridge\Monolog\Handler\ConsoleHandler;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;

$dic = new Pimple();

// This is a parameter definition
$dic['verbosity_level_map'] = array(
    'OutputInterface::VERBOSITY_NORMAL' =&gt; Logger::NOTICE,
    'OutputInterface::VERBOSITY_VERBOSE' =&gt; Logger::INFO,
    'OutputInterface::VERBOSITY_VERY_VERBOSE' =&gt; Logger::DEBUG,
    'OutputInterface::VERBOSITY_DEBUG' =&gt; Logger::DEBUG,
);

// Thess are a factory definition
$dic['console_output'] = $dic-&gt;share(function($dic) {
    return new ConsoleOutput();
});
$dic['output_formatter'] = $dic-&gt;share(function($dic) {
    return new OutputFormatter();
});

// You can inject dependencies which have been declared previously
$dic['console_handler'] = $dic-&gt;share(function($dic) {
    $consoleHandler = new ConsoleHandler(
        $dic['console_output'],
        true,
        $dic['verbosity_level_map']
    );
    $consoleHandler-&gt;setFormatter($dic['output_formatter']);

    return $consoleHandler
});

$dic['logger'] = $dic-&gt;share(function($dic) {
    $logger = new Logger('default.logger');
    $logger-&gt;pushHandler($dic['console_handler']);

    return $logger
});

$dic['filesystem'] = $dic-&gt;share(function($dic) {
    return new Filesystem();
});

$dic['documentation_writer'] = $dic-&gt;share(function($dic) {
    return new DocumentationWriter(
        $dic['filesystem'],
        $dic['logger']
    );
});</code></pre>
<p>So, what's the big difference between this and the previous code sample? Well
now you centralized all your instances into a single container, the definition
of your object is done in a central place (you can move it into a file
<code>dic.php</code> for example) and the best of all: classes will be instanciated lazily,
which means as long as you don't aks for them they won't be created, and once
you created them they won't be created a second time.</p>
<p>In your application, you just need to pass the DIC and use it:</p>
<pre><code>&lt;?php

// File: front_controller.php

require_once __DIR__.'/dic.php';

// Now you can retrieve instances from the DIC
$documentationWriter = $dic['documentation_writer'];

$documentationWriter-&gt;write('/tmp/example.txt', 'Hello world');</code></pre>
<p>I must stress on the fact that object creation is now centralized: the code
from the first example (the one without DIC) could be scattered into different
places of your application.</p>
<h3 id="dependency-injection-container-and-ioc">Dependency Injection Container and IoC<a href="#dependency-injection-container-and-ioc" class="anchor">#</a></h3>
<p>Again, people often mixep up those two for the same reason they mix up DI and
IoC. There's a lot of <a href="https://github.com/rande/python-simple-ioc">DIC libraries which have been falsely called ioc</a>.</p>
<p>Please, don't make the same mistake.</p>
<h3 id="dependency-injection-container-and-singleton">Dependency Injection Container and Singleton<a href="#dependency-injection-container-and-singleton" class="anchor">#</a></h3>
<p>Singleton is a design pattern saying that a given object should only be
instanciated once and that it should be guarded from being instanciated a second
time.</p>
<p>Here's an implementation example of a singleton:</p>
<pre><code>&lt;?php

// Code from https://github.com/domnikl/DesignPatternsPHP/blob/master/Singleton/Singleton.php

class Singleton
{
    protected static $instance;

    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static;
        }

        return static::$instance;
    }

    private function __construct()
    {
        // is not allowed to call from outside: private!
    }
}</code></pre>
<p>While in our example the DIC makes sure our objects are constructed only once,
we can't call them singletons as nobody prevents you from creating them a second
time manually.</p>
<p>Keep in mind that DIC aren't always making sure of this: in our example we've
used <a href="https://github.com/fabpot/Pimple/blob/1.1/lib/Pimple.php#L116">the special share method</a>
of Pimple to ensure it, but you can also retrieve a new instance on every call:</p>
<pre><code>&lt;?php

use Symfony\Component\Finder\Finder;

$dic['finder'] = function($dic) {
    return new Finder();
});

$firstFinder = $dic['finder'];
$secondFinder = $dic['finder'];</code></pre>
<p>To recap: DI and DIC have nothing to do with Singleton.</p>
<h2 id="service-locator">Service Locator<a href="#service-locator" class="anchor">#</a></h2>
<p>The classes you put into the DIC can be called <code>Services</code>: they will execute
a task for you when you call them.</p>
<p>A Service Locator isn't just a container of services which gets them when you
ask it to: what we described is simply a DIC. To be a Service Locator, a DIC
must be injected as a dependency.</p>
<p>This might happen with classes which have many dependencies: instead of
injecting them one by one you can inject directly the DIC and let the class
retrieve the services it needs.</p>
<p>You should be warned that this is generally a bad idea: a class which requires
too many dependencies should be splitted into several smaller classes.</p>
<p>There is however some cases when Service Locator are usefull, for example
controllers are good candidates as their only responsibility is to pass input
to services and to return output.</p>
<p>To be more precise, Service Locator shouldn't be used in your business logic,
but rather in objects which serve as intermediate between two layers.</p>
<p>Here's a <a href="http://ralphschindler.com/2012/10/10/di-dic-service-locator-redux">good article about when to use Service Locators by Ralph Schindler</a>.</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Here's the TL;DR:</p>
<ul><li>IoC: higher level classes own detail classes (which are abstractions)</li>
<li>DI: pass as argument objects to the class which will use them</li>
<li>DIC: creates the dependencies and then injects them into the asked class</li>
<li>Service Locator: depending on the DIC instead of many dependencies</li>
</ul><p>If this article didn't teach you anything and made you angry, please
<a href="https://twitter.com/epiloic">tweet it to me</a>. If you learned some things, or
if this article made your day, feel free to do the same ;) .</p>
<h3 id="more-resources">More resources<a href="#more-resources" class="anchor">#</a></h3>
<p>If you want to read more about DI and DIC, here's good series by
Fabien Potencier's series on <a href="http://fabien.potencier.org/article/11/what-is-dependency-injection">what is Dependency Injection</a>.</p>
<p>There's also William Durand's slides on <a href="http://edu.williamdurand.fr/php-slides/index.html#slide152">Writing Better Code</a>
(actually the slides are about PHP and contain good resources. I encourage you to read it entirely!).</p>]]></content>
    </entry>
        <entry>
        <title>Bootstrap the markdown files of your FOSS project</title>
                <id>http://gnugat.github.io/2014/01/15/bootstrap-markdown-files-of-your-FOSS-project.html</id>
                <updated>2014-01-15T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/01/15/bootstrap-markdown-files-of-your-FOSS-project.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>The one thing that will make developers use your Free or Open Source Software
(FOSS) project is its documentation. Without it, how can they know what it does,
or how to install it?</p>
<p>Last summer <a href="http://williamdurand.fr/2013/07/04/on-open-sourcing-libraries/">William Durand wrote an article about it</a>,
describing the minimum files your FOSS project should have, and what they should
contain.</p>
<p>After reading his article, maybe you did the same thing as me: you took your
courage with both hands and wrote thoroughly a decent documentation for the
project you were working on at the time.</p>
<p>Because it was tedious, you decided to copy those markdown files into your new
projects and adapt them.</p>
<p>But this too was tedious...</p>
<p>To solve this problem once for all I created <strong><a href="https://github.com/gnugat/fossil">fossil</a></strong>:
it will bootstrap the markdown files of your FOSS projects, and it will even
create an installer for you!</p>
<p>It generates the following files out of skeletons:</p>
<ul><li><code>CHANGELOG.md</code></li>
<li><code>CONTRIBUTING.md</code></li>
<li><code>LICENSE</code></li>
<li><code>README.md</code></li>
<li><code>VERSIONING.md</code></li>
<li><code>bin/installer.sh</code></li>
<li><code>doc</code> (or <code>Resources/doc</code> if the project is a bundle) directory:
<ul><li><code>01-introduction.md</code></li>
<li><code>02-installation.md</code></li>
<li><code>03-usage.md</code></li>
<li><code>04-tests.md</code></li>
</ul></li>
</ul><p>The best thing about it: you can run it on your new FOSS projects as well as
with your existing ones! By default it does not replace existing files (if you
want to, simply use the <code>-f</code> option).</p>
<p><strong>Fossil</strong> supports different kind of projects: applications, libraries and
Symfony2 bundles. Here's a quick usage guide.</p>
<h2 id="applications">Applications<a href="#applications" class="anchor">#</a></h2>
<p>The <code>doc</code> command allows you to generate the markdown files of your
applications, which can be a web application or a CLI tool just like <strong>fossil</strong>.</p>
<p>As you can see in the following example, it only requires 2 arguments:</p>
<pre><code>fossil doc 'acme/application' 'The ACME company'</code></pre>
<h3 id="the-github-repository-argument">The <a href="https://github.com/">Github</a> repository argument<a href="#the-github-repository-argument" class="anchor">#</a></h3>
<p>Applications are installed by cloning the github repository, which makes it as
easy to update as to run <code>git pull</code>.</p>
<p>This argument is used in the installer script as well as in the installation
instructions.</p>
<p>You don't need to write the whole github URL, simply give the username and the
project name in the following format: <code>username/project-name</code></p>
<h3 id="the-license-author-argument">The license author argument<a href="#the-license-author-argument" class="anchor">#</a></h3>
<p>While the copyright's date can be computed, you need to provide the author's
name to generate the <code>LICENSE</code> file.</p>
<p>For now it only generates MIT licenses, but pull requests are welcomed :) .</p>
<h3 id="the-path-option">The path option<a href="#the-path-option" class="anchor">#</a></h3>
<p>By default the files are created in the current directory, but you can target a
specific path:</p>
<pre><code>fossil doc 'acme/application' 'The ACME company' -p '/tmp/application'</code></pre>
<h3 id="the-force-overwrite-option">The force overwrite option<a href="#the-force-overwrite-option" class="anchor">#</a></h3>
<p>As mentioned earlier, <strong>fossil</strong> won't replace existing files by default: for
instance if your project already has a <code>README.md</code> and a <code>LICENSE</code> file it will
only generate the other ones.</p>
<p>But if you want to throw them away, you can use this option:</p>
<pre><code>fossil doc 'acme/project' 'The ACME company' -f</code></pre>
<h2 id="libraries">Libraries<a href="#libraries" class="anchor">#</a></h2>
<p>The <code>doc:library</code> command has the exact same arguments and options as the <code>doc</code>
one:</p>
<pre><code>fossil doc:library 'acme/library' 'The ACME company'</code></pre>
<p>You can use the shortcut <code>d:l</code>:</p>
<pre><code>fossil d:l 'acme/library' 'The ACME company'</code></pre>
<p>The difference between an application and a library lies in its installation:
the library is installed using <a href="http://getcomposer.org/">composer</a>.</p>
<h3 id="the-composer-package-option">The composer package option<a href="#the-composer-package-option" class="anchor">#</a></h3>
<p>By default <strong>fossil</strong> assumes the composer package's name is the same as the
Github repository name (in the example it would be <code>acme/library</code>).
If it's not your case, use the following option:</p>
<pre><code>fossil d:l 'acme/library' 'The ACME company' -c 'acme/composer-package'</code></pre>
<h2 id="symfony2-bundles">Symfony2 Bundles<a href="#symfony2-bundles" class="anchor">#</a></h2>
<p>The <code>doc:bundle</code> command has almost the same arguments and options as the
<code>doc:library</code> one. It has an additional argument:</p>
<pre><code>fossil doc:bundle 'acme/demo-bundle' 'The ACME company' 'Acme\DemoBundle\AcmeDemoBundle'</code></pre>
<p>You can use the shortcut <code>d:b</code>:</p>
<pre><code>fossil d:b 'acme/demo-bundle' 'The ACME company' 'Acme\DemoBundle\AcmeDemoBundle'</code></pre>
<p>The difference between a library and a bundle is the documentation directory,
which is in <code>Resources/doc</code> instead of <code>doc</code>.</p>
<h3 id="the-fully-qualified-classname-argument">The fully qualified classname argument<a href="#the-fully-qualified-classname-argument" class="anchor">#</a></h3>
<p>Another difference is the installation: the bundle needs to be added in the
application's kernel.</p>
<p>This will be detailed in the documentation, but it will also be taken care of
by the installer.</p>
<p>That's right, you read it right: when developers will run the installer, not
only will it download the bundle using composer, but it will also add its fully
qualified classname in the <code>app/AppKernel.php</code> file! Hooray!</p>
<p>The application's kernel will look like this afterwards:</p>
<pre><code>&lt;?php
// File: app/AppKernel.php

use Symfony\Component\HttpKernel\Kernel;

class AppKernel extends Kernel
{
    public function registerBundles()
    {
        $bundles = array(
            // Other bundles...
            new Acme\DemoBundle\AcmeDemoBundle(),
        );

        if (in_array($this-&gt;getEnvironment(), array('dev', 'test'))) {
            // Other bundles...
        }

        return $bundles;
    }
}</code></pre>
<p><em>Note</em>: because of the backslashes you should escape this argument using
quotes, just like in the example.</p>
<h3 id="the-development-tool-option">The development tool option<a href="#the-development-tool-option" class="anchor">#</a></h3>
<p>By using this option, the bundle will be registered in the application only if
it runs in development or test environment:</p>
<pre><code>fossil d:b 'acme/demo-bundle' 'The ACME company' 'Acme\DemoBundle\AcmeDemoBundle' -d</code></pre>
<p>The application's kernel will look like this afterwards:</p>
<pre><code>&lt;?php
// File: app/AppKernel.php

use Symfony\Component\HttpKernel\Kernel;

class AppKernel extends Kernel
{
    public function registerBundles()
    {
        $bundles = array(
            // Other bundles...
        );

        if (in_array($this-&gt;getEnvironment(), array('dev', 'test'))) {
            // Other bundles...
            $bundles[] = new Acme\DemoBundle\AcmeDemoBundle();
        }

        return $bundles;
    }
}</code></pre>
<h2 id="you-still-need-to-write-the-documentation">You still need to write the documentation<a href="#you-still-need-to-write-the-documentation" class="anchor">#</a></h2>
<p>After running <strong>fossil</strong> you still need to provide some information (for
instance the elevator pitch in <code>README.md</code>) by editing those files:</p>
<ul><li><code>README.md</code></li>
<li><code>doc/01-introduction.md</code></li>
<li><code>doc/03-usage.md</code></li>
<li><code>doc/04-tests.md</code></li>
</ul><p>But is that enough? While I think <strong>fossil</strong> automates as much things as
possible, there's still some part of your project that needs specific
documentation.</p>
<p>For example you could add recipes which describe common tasks, or a glossary
defining technical or business terms used in your project.</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Bootstrap the markdown files of your new and your old FOSS projects using
<strong><a href="https://github.com/gnugat/fossil">fossil</a></strong>, and then complete the
documentation so everyone can see how awesome your work is!</p>
<p>Happy hacking!</p>]]></content>
    </entry>
        <entry>
        <title>Technology scouting</title>
                <id>http://gnugat.github.io/2014/01/08/technology-scouting.html</id>
                <updated>2014-01-08T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/01/08/technology-scouting.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>As a curious person I'm constantly trying to learn new practices and to discover
tools which might help me, by collecting information via technology scouting and
then reading it.</p>
<p>In this article, I will present how to do so effectively.</p>
<h2 id="collecting-information">Collecting information<a href="#collecting-information" class="anchor">#</a></h2>
<p>Whenever you find an interesting link, send it to <a href="http://getpocket.com/">Pocket</a>
so you can read it later.</p>
<h3 id="blogs">Blogs<a href="#blogs" class="anchor">#</a></h3>
<p>To find interesting links subscribe to blog RSS feeds using
<a href="https://ifttt.com/">If This Then That</a>: it will send new entries directly to
pocket.</p>
<p>Here are some blogs I personnally follow (caution, they're not really sorted):</p>
<ul><li><a href="http://williamdurand.fr/">William Durand's blog</a></li>
<li><a href="http://www.mountaingoatsoftware.com/blog">Mountain Goat Software</a></li>
<li><a href="http://blog.karolsojko.com/">Karol S&oacute;jko's blog</a></li>
<li><a href="http://blog.8thlight.com/">8th light</a></li>
<li><a href="http://richardmiller.co.uk/">Richard Miller's blog</a></li>
<li><a href="http://verraes.net/#blog">Mathias Verraes's blog</a></li>
<li><a href="http://www.whitewashing.de/">Benjamin Eberlei's blog</a></li>
<li><a href="http://nedroid.com/">Nedroid</a></li>
<li><a href="https://igor.io/">Igor Wiedler's blog</a></li>
</ul><h3 id="twitter">Twitter<a href="#twitter" class="anchor">#</a></h3>
<p>You can also use <a href="https://twitter.com/">Twitter</a>:</p>
<ol><li>create a private list which will serve as a pool</li>
<li>add any author which might post interresting messages</li>
<li>after a week or so, add the author to a public list</li>
</ol><p>The lists only show messages (not retweets) and conversations between people
you follow. They also allow you to create categories.</p>
<p>If you want, you can have a look at
<a href="https://twitter.com/epiloic/lists/">my own public lists</a>.</p>
<h3 id="github">Github<a href="#github" class="anchor">#</a></h3>
<p>Last but not least, <a href="https://github.com/">Github</a> can also be a great source of
discoveries: by following someone which stars or watch a lot of projects you
will have them listed on your homepage.</p>
<p>Here's my advice: <a href="https://github.com/pborreli">Pascal Borreli</a> contributes to
many repositories, you should start to follow him.</p>
<h2 id="reading-it">Reading it<a href="#reading-it" class="anchor">#</a></h2>
<p>Collecting resources is a thing, getting it read is another one. Just like
<a href="http://verraes.net/2012/12/how-to-read-more-books/">Mathias Verraes advised it</a>,
you should get an e-reader: you can send the pages you gathered on Pocket and
then read them everywhere.</p>
<p>Pocket allows you to remove the articles you found not so interresting after
all, it also allows you to archive the good ones and to favorite the great ones.</p>
<p>Speaking of reading and e-readers, books are another good way of discovering new
things. Do not underestimate them. Here's a list of books I'd recommend:</p>
<ul><li><a href="http://git-scm.com/book">Pro Git</a></li>
<li>Clean Code, by Robert C. Martin</li>
<li>Agile Software Development, Principles, Patterns, and Practices, by Robert C. Martin</li>
</ul><h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>The point is: current tools won't last and there's a lot of practices you're
not aware of. If you want to improve yourself and keep up with other developers,
you have to try your best to discover new practices (which might be rather old
actually) and new trending tools.</p>
<p>I hope you found this article enjoyable and helpful.</p>]]></content>
    </entry>
        <entry>
        <title>Carew, the static site generator</title>
                <id>http://gnugat.github.io/2014/01/01/carew-static-site-generator.html</id>
                <updated>2014-01-01T00:00:00+00:00</updated>
        <author>
            <name>Loïc Chardonnet</name>
            <email>loic.chardonnet@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://gnugat.github.io/2014/01/01/carew-static-site-generator.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Frameworks are a real help when building web applications which serve business
logic. But what about static websites?</p>
<p>Those only contain pages which could be directly written in HTML. The only
problem with this approach is that HTML isn't writter friendly compared to
Markdown.</p>
<p>Also, we could say that static websites like blogs do have some logic behind the
scenes:</p>
<ul><li>posts can have a state (is it published yet?)</li>
<li>posts can be tagged, in order to make them easier to find</li>
</ul><p>But still, a framework might be too much for this task.</p>
<p>Static site generators are a way to solve this problem:</p>
<ol><li>simply write your pages in markdown</li>
<li>launch a command to generate HTML from it</li>
</ol><p><a href="http://carew.github.io/">Carew</a> is one of them (among
  <a href="http://jekyllrb.com/">Jekyll</a>,
  <a href="http://hyde.github.io/">Hyde</a>,
  <a href="https://github.com/obensonne/poole">Poole</a>
  and <a href="https://github.com/spjwebster/lanyon">Lanyon</a>):
it is written in PHP, allows you to use the template engine
<a href="http://twig.sensiolabs.org/">Twig</a> in your markdown and it provides a theme
using <a href="http://getbootstrap.com/2.3.2/">Bootstrap</a>.</p>
<p>This blog post will focus on Carew, as
<a href="https://github.com/gnugat/gnugat.github.io">this very blog is written with it</a>.</p>
<h2 id="carew-and-github">Carew and Github<a href="#carew-and-github" class="anchor">#</a></h2>
<p>A common way to quickly publish static sites is to use
<a href="http://pages.github.com/">Github Pages</a> which works as follow:</p>
<ol><li>create a repository, the name should follow this format: <code>&lt;username&gt;.github.io</code></li>
<li>add, commit and push the content of the <code>web</code> directory directly at the
root of your repo</li>
<li>the site is now available at this address: <code>http://&lt;username&gt;.github.io</code></li>
</ol><p><a href="http://carew.github.io/cookbook/hosting.html">Learn more about hosting a website built with Carew on the official website</a>.</p>
<h2 id="creation">Creation<a href="#creation" class="anchor">#</a></h2>
<p>Creating your site using Carew is very simple, just follow these steps:</p>
<pre><code>$ php composer.phar create-project carew/boilerplate &lt;project&gt; -s dev
$ cd &lt;project&gt;
$ bin/carew build</code></pre>
<p>Examples pages (which sources are located in <code>pages</code> and <code>posts</code>) are converted
from markdown to HTML in the <code>web</code> directory.</p>
<h2 id="customization">Customization<a href="#customization" class="anchor">#</a></h2>
<p>Before writing any page or post, edit the configuration wich is located inside
the <code>config.yml</code> file.</p>
<p>Then edit the <code>pages/index.md</code> and <code>pages/about.md</code> pages with your own content.</p>
<p>Finally, remove the content of the <code>posts</code> folder and create your first blog
post using this command:</p>
<pre><code>$ bin/carew generate:post [--date='YYYY-MM-DD'] title</code></pre>
<p><a href="http://carew.github.io/cookbook/configuration.html">See the configuration documentation on the official website</a>.</p>
<h2 id="front-matters">Front matters<a href="#front-matters" class="anchor">#</a></h2>
<p>Each markdown file starts with a header:</p>
<pre><code>---
layout: post # no need for this line when writing a regular page
title: Will be used by `&lt;title&gt;&lt;/title&gt;` and `&lt;h1&gt;&lt;/h1&gt;`
tags:
    - first tag
    - carew
---</code></pre>
<p>Carew generates a page listing all existing tags. You can create a link to this
page with the following snippet:</p>
<pre><code>{{ link('tags', 'The page with all the tags') }}.</code></pre>
<p><a href="http://carew.github.io/documentation.html#front-matter">Learn more about Front matters on the official website</a>.</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor">#</a></h2>
<p>Carew is really simple to use, in this article we've covered the minimum you
should know to create pages, blog posts and tags.</p>
<p>I hope you enjoyed this article and that it helped you a little.</p>
<p>If you want to learn more, for example to customize its behaviour or its theme,
please refer to <a href="http://carew.github.io/documentation.html">the official documentation</a>.</p>]]></content>
    </entry>
    </feed>
